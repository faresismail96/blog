<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>python on Learning Publicly</title>
    <link>https://fares.codes/tags/python/</link>
    <description>Recent content in python on Learning Publicly</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 30 Mar 2021 19:20:00 +0200</lastBuildDate><atom:link href="https://fares.codes/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>String Interpolation in Python</title>
      <link>https://fares.codes/posts/string-interpolation-in-python/</link>
      <pubDate>Tue, 30 Mar 2021 19:20:00 +0200</pubDate>
      
      <guid>https://fares.codes/posts/string-interpolation-in-python/</guid>
      <description>Right off the bat, I&amp;rsquo;ll say this: my go to solution for string interpolation in python are f-strings. They&amp;rsquo;re elegant, simple to read and even simpler to understand. But in some cases, depending on your setup, you might be forced to use another way. In this article I&amp;rsquo;ll outline the different possibilities that I have come to learn exist when talking about string interpolation in python.
Note: This article is mostly me recopying what is said here: https://www.</description>
    </item>
    
    <item>
      <title>Monkey Patching in Python</title>
      <link>https://fares.codes/posts/monkey-patching-in-python/</link>
      <pubDate>Mon, 21 Sep 2020 06:20:00 +0200</pubDate>
      
      <guid>https://fares.codes/posts/monkey-patching-in-python/</guid>
      <description>Asides from giving you the ability to say the words &amp;ldquo;Monkey Patch&amp;rdquo; out loud in your office, monkey patching can be a useful tool when working with external libraries. It can also be the reason why all the developers who will work on the product after you will come loath you&amp;hellip; More on that in a bit.
For some additional clarifications, the concept is something I recently learned from someone I work with and the examples closely resemble his own&amp;hellip; The reason I&amp;rsquo;m recopying them can be summarized in the following french quote: &amp;ldquo;Le savant reste ignorant de ce qu‚Äôil a appris tant qu‚Äôil ne l‚Äôa pas mis en pratique&amp;rdquo; - Unknown.</description>
    </item>
    
    <item>
      <title>Resolving Circular Dependencies Due to Type Hinting</title>
      <link>https://fares.codes/posts/resolving-circular-dependencies-due-to-type-hinting/</link>
      <pubDate>Sun, 13 Sep 2020 14:08:00 +0200</pubDate>
      
      <guid>https://fares.codes/posts/resolving-circular-dependencies-due-to-type-hinting/</guid>
      <description>In a previous article, I&amp;rsquo;ve talked about type hinting and its usefulness. However I recently realized that while using typing and defining custom types, one can easily find oneself in a circular dependency loop.
Here&amp;rsquo;s a case scenario:
root | custom_types.py my_function.py custom_types is the module in which we define all custom types used in my_function.py
my_function is the module in which we define all functions.
So it&amp;rsquo;s clear that my_function will depend on our custom_types.</description>
    </item>
    
    <item>
      <title>Keyword and Positional Only Arguments in Python</title>
      <link>https://fares.codes/posts/keyword-and-positional-only-arguments-in-python/</link>
      <pubDate>Fri, 17 Jul 2020 06:20:00 +0200</pubDate>
      
      <guid>https://fares.codes/posts/keyword-and-positional-only-arguments-in-python/</guid>
      <description>My flights are now synonymous with new articles&amp;hellip; It is a welcomed distraction from the subtle armrest war, the crammed chairs with barely any leg room and the crying babies&amp;hellip;
Here&amp;rsquo;s a small feature I recently learned about that might significantly impact your code readability: Forcing functions to take Keyword-Only Arguments or Positional Only Arguments!.
The Keyword-Only argument feature was not so recently introduced in PEP 3102. But as with most things, I&amp;rsquo;m discovering this a little bit too late ü§¶‚Äç‚ôÇ</description>
    </item>
    
    <item>
      <title>Named Tuples In Python</title>
      <link>https://fares.codes/posts/named-tuples-in-python/</link>
      <pubDate>Sun, 12 Jul 2020 09:15:00 +0200</pubDate>
      
      <guid>https://fares.codes/posts/named-tuples-in-python/</guid>
      <description>This cool little feature has been out since Python 2.6 but I&amp;rsquo;m only discovering this now ü§¶‚Äç‚ôÇ
Before we begin, let us take a quick look at tuples in python and how they work:
def _get_person_from_db(user_id): person_name = ... ## Something person_age = ... ## Something return (person_name, person_age) res = _get_person_from_db(0) print(f&amp;#34;&amp;#34;&amp;#34;Person {res[0]}is {res[1]}years old!&amp;#34;&amp;#34;&amp;#34;) Above, the function returns a tuple consisting of a name and the persons age. This result is stored in res and we access it like a list.</description>
    </item>
    
    <item>
      <title>DataClasses in Python</title>
      <link>https://fares.codes/posts/dataclasses-in-python/</link>
      <pubDate>Sat, 11 Jul 2020 19:15:00 +0200</pubDate>
      
      <guid>https://fares.codes/posts/dataclasses-in-python/</guid>
      <description>This is one of those cool features you&amp;rsquo;d probably wished you&amp;rsquo;d have known about a while back. Unless I&amp;rsquo;m the only person to not have known this from the start üôä
DataClasses is a module that was introduced in python 3.7 and described in PEP 557. This module simplifies the creation of new classes by defining boilerplate code for you.
Dataclasses are classes designed to store data objects (think case classes in Scala).</description>
    </item>
    
    <item>
      <title>Everything You Probably Need to Know About Airflow</title>
      <link>https://fares.codes/posts/everything-you-probably-need-to-know-about-airflow/</link>
      <pubDate>Sat, 04 Jul 2020 12:20:00 +0200</pubDate>
      
      <guid>https://fares.codes/posts/everything-you-probably-need-to-know-about-airflow/</guid>
      <description>Taking a small break from scala to look into Airflow.
Also, I&amp;rsquo;m making a habit of writing those things during flights and trains ü§∑‚Äç‚ôÇÔ∏è&amp;hellip; Probably the only thing keeping me from starting a travel blog.
Table of Content  Intro to Airflow Task Dependencies The Dag File Intervals BackFilling Best Practice For Airflow Tasks Templating Passing Arguments to Python Operator Triggering WorkFlows Triggering Rules XCOM Sensors Random TILs If You Must Remember 3 Things   Intro to Airflow Airflow is a platform to programmatically author, schedule and monitor workflows.</description>
    </item>
    
    <item>
      <title>Type Hinting in Python</title>
      <link>https://fares.codes/posts/type-hinting-in-python/</link>
      <pubDate>Mon, 29 Jun 2020 00:05:00 +0200</pubDate>
      
      <guid>https://fares.codes/posts/type-hinting-in-python/</guid>
      <description>As I turn 24, my blog is about to turn 1 year old!! üéä
This article will mostly be a summary of the official python documentation. I have found it useful to read a documentation and then re-summarize it in my own words. (Examples are mostly theirs though)
Typing is a new module starting python 3.5 and introduced by PEP 484. Its goal is to introduce static types to Python.</description>
    </item>
    
  </channel>
</rss>
