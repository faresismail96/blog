<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>abstract class on Learning Publicly</title>
    <link>https://fares.codes/tags/abstract-class/</link>
    <description>Recent content in abstract class on Learning Publicly</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 03 May 2020 20:00:00 +0200</lastBuildDate>
    
	<atom:link href="https://fares.codes/tags/abstract-class/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Scala Sealed Trait vs Sealed Abstract Class</title>
      <link>https://fares.codes/posts/scala-sealed-trait-vs-sealed-abstract-class/</link>
      <pubDate>Sun, 03 May 2020 20:00:00 +0200</pubDate>
      
      <guid>https://fares.codes/posts/scala-sealed-trait-vs-sealed-abstract-class/</guid>
      <description>From my previous articles, you&amp;rsquo;ve seen me create ADTs in two different ways:
sealed abstract class Animal object Animal { final case object Dog extends Animal final case object Cat extends Animal } or
sealed trait Animal object Animal { final case object Dog extends Animal final case object Cat extends Animal } This article will outline the difference between those two implementations.
Sealed Trait If a behavior is to be re-used, traits are very handy since they can be mixed in.</description>
    </item>
    
  </channel>
</rss>