<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Learning Publicly</title>
    <link>https://fares.codes/posts/</link>
    <description>Recent content in Posts on Learning Publicly</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 07 Aug 2022 21:00:00 +0100</lastBuildDate><atom:link href="https://fares.codes/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Cats Effect Part One: Effects</title>
      <link>https://fares.codes/posts/cats-effect-part-one-effects/</link>
      <pubDate>Sun, 07 Aug 2022 21:00:00 +0100</pubDate>
      
      <guid>https://fares.codes/posts/cats-effect-part-one-effects/</guid>
      <description>Cats Effect Series For some time now, I&amp;rsquo;ve been meaning to learn about cats effect. My plan is to follow the Essential Effects by Adam Rosien You can find a copy of the book here: https://essentialeffects.dev/ Though at the time of writing, the book is still in draft version.
I will be summarizing my understanding of each chapter in blog posts (chapter by chapter). I will also be solving and posting some of their exercises.</description>
    </item>
    
    <item>
      <title>Single Abstract Method</title>
      <link>https://fares.codes/posts/single-abstract-method/</link>
      <pubDate>Mon, 04 Apr 2022 20:20:00 +0200</pubDate>
      
      <guid>https://fares.codes/posts/single-abstract-method/</guid>
      <description>Short and quick article to explain a syntactic sugar in Scala.
Often we&amp;rsquo;ll have traits that declare a single abstract method to be overridden in the subclasses of that trait.
This might look like this:
sealed trait Animal{ def sayHi(name: String): String } object Animal{ final case object Dog { override def siHi(name: String): String = s&amp;#34;Woof $name&amp;#34; } } But we can also instantiate anonymous classes that implement the trait Animal:</description>
    </item>
    
    <item>
      <title>Schema on Read v.s Schema on Write</title>
      <link>https://fares.codes/posts/schema-on-read-v.s-schema-on-write/</link>
      <pubDate>Sun, 31 Oct 2021 12:20:00 +0200</pubDate>
      
      <guid>https://fares.codes/posts/schema-on-read-v.s-schema-on-write/</guid>
      <description>There are two mechanisms to store data in a database.
Either follow a schema on read approach or a schema on write approach.
Schema on Write This is typically used with relational databases.
With this approach, the schema is defined and created before the data is inserted into a db.
It usually follows the below steps:
Create the schema (create tables) Load the data Query the data and extract insight The advantage of this approach is that reading the data (querying) becomes much faster since the schema is already known.</description>
    </item>
    
    <item>
      <title>String Interpolation in Python</title>
      <link>https://fares.codes/posts/string-interpolation-in-python/</link>
      <pubDate>Tue, 30 Mar 2021 19:20:00 +0200</pubDate>
      
      <guid>https://fares.codes/posts/string-interpolation-in-python/</guid>
      <description>Right off the bat, I&amp;rsquo;ll say this: my go to solution for string interpolation in python are f-strings. They&amp;rsquo;re elegant, simple to read and even simpler to understand. But in some cases, depending on your setup, you might be forced to use another way. In this article I&amp;rsquo;ll outline the different possibilities that I have come to learn exist when talking about string interpolation in python.
Note: This article is mostly me recopying what is said here: https://www.</description>
    </item>
    
    <item>
      <title>Property Based Testing with ScalaCheck</title>
      <link>https://fares.codes/posts/property-based-testing-with-scalacheck/</link>
      <pubDate>Sun, 28 Feb 2021 19:20:00 +0200</pubDate>
      
      <guid>https://fares.codes/posts/property-based-testing-with-scalacheck/</guid>
      <description>Unit testing is an effective way of catching bugs and protecting our code from future bugs related to refactoring.
But with the classical unit tests (example based tests), we are restricted to the test cases we can think ok. We can only write a finite number of tests that cover a finite number of cases.
In this article I&amp;rsquo;ll begin by showing the limitations of example based tests before moving to scalacheck and property based testing.</description>
    </item>
    
    <item>
      <title>ADTs: Sum Types and Product Types</title>
      <link>https://fares.codes/posts/adts-sum-types-and-product-types/</link>
      <pubDate>Sun, 14 Feb 2021 12:20:00 +0200</pubDate>
      
      <guid>https://fares.codes/posts/adts-sum-types-and-product-types/</guid>
      <description>It has been a while since I haven&amp;rsquo;t posted a new article, and in an attempt to break the cycle I&amp;rsquo;m starting off with something pretty simple.
When listening to people talk of ADTs, you&amp;rsquo;ll often hear the words: Sum type and Product type. Now I have a bad habit of confusing the two so in this article I&amp;rsquo;ll attempt to make things clearer and I will hopefully never find myself re-re-researching both.</description>
    </item>
    
    <item>
      <title>Reader Monads and Dependency Injection</title>
      <link>https://fares.codes/posts/reader-monads-and-dependency-injection/</link>
      <pubDate>Sun, 29 Nov 2020 20:37:00 +0100</pubDate>
      
      <guid>https://fares.codes/posts/reader-monads-and-dependency-injection/</guid>
      <description>After writing an article about the Writer Monad, it only seems fair that I write another one about the Reader Monad.
As with the Writer article, my main support will be the Scala with Cats Underscore Book freely available online.
I&amp;rsquo;ve also decided to put more effort into my examples and have them answer a real life problem. So in this articles&amp;rsquo; examples, I&amp;rsquo;ll attempt to answer a common life question: &amp;ldquo;Can I become friends with x person&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>Writer Monads</title>
      <link>https://fares.codes/posts/writer-monads/</link>
      <pubDate>Sun, 04 Oct 2020 23:00:00 +0200</pubDate>
      
      <guid>https://fares.codes/posts/writer-monads/</guid>
      <description>This is actually one of the very first GitHub tickets I&amp;rsquo;ve opened. I tend read medium articles on my daily commute to work and I always see articles on the Writer Monad (along other monad instances I plan to write about). I did not use to read them because they&amp;rsquo;re topics I do not understand but I&amp;rsquo;ve been meaning to learn about them for a while now&amp;hellip; And so here is goes:</description>
    </item>
    
    <item>
      <title>Cats MonadError</title>
      <link>https://fares.codes/posts/cats-monaderror/</link>
      <pubDate>Fri, 25 Sep 2020 06:20:00 +0200</pubDate>
      
      <guid>https://fares.codes/posts/cats-monaderror/</guid>
      <description>I&amp;rsquo;ve been mostly focusing on Python for the past couple weeks so I&amp;rsquo;ll attempt to balance things out by prioritizing a couple Scala articles&amp;hellip;
I&amp;rsquo;ve also come to realize that I have not been following the methodology that has inspired this blog in the first place. In this article, I&amp;rsquo;ll attempt to constantly answer the question &amp;ldquo;why&amp;rdquo; and in doing so hopefully strengthen my grasp of the subject . And so for all my readers, the both of you might notice a change in format üòù.</description>
    </item>
    
    <item>
      <title>Monkey Patching in Python</title>
      <link>https://fares.codes/posts/monkey-patching-in-python/</link>
      <pubDate>Mon, 21 Sep 2020 06:20:00 +0200</pubDate>
      
      <guid>https://fares.codes/posts/monkey-patching-in-python/</guid>
      <description>Asides from giving you the ability to say the words &amp;ldquo;Monkey Patch&amp;rdquo; out loud in your office, monkey patching can be a useful tool when working with external libraries. It can also be the reason why all the developers who will work on the product after you will come loath you&amp;hellip; More on that in a bit.
For some additional clarifications, the concept is something I recently learned from someone I work with and the examples closely resemble his own&amp;hellip; The reason I&amp;rsquo;m recopying them can be summarized in the following french quote: &amp;ldquo;Le savant reste ignorant de ce qu‚Äôil a appris tant qu‚Äôil ne l‚Äôa pas mis en pratique&amp;rdquo; - Unknown.</description>
    </item>
    
    <item>
      <title>Resolving Circular Dependencies Due to Type Hinting</title>
      <link>https://fares.codes/posts/resolving-circular-dependencies-due-to-type-hinting/</link>
      <pubDate>Sun, 13 Sep 2020 14:08:00 +0200</pubDate>
      
      <guid>https://fares.codes/posts/resolving-circular-dependencies-due-to-type-hinting/</guid>
      <description>In a previous article, I&amp;rsquo;ve talked about type hinting and its usefulness. However I recently realized that while using typing and defining custom types, one can easily find oneself in a circular dependency loop.
Here&amp;rsquo;s a case scenario:
root | custom_types.py my_function.py custom_types is the module in which we define all custom types used in my_function.py
my_function is the module in which we define all functions.
So it&amp;rsquo;s clear that my_function will depend on our custom_types.</description>
    </item>
    
    <item>
      <title>Keyword and Positional Only Arguments in Python</title>
      <link>https://fares.codes/posts/keyword-and-positional-only-arguments-in-python/</link>
      <pubDate>Fri, 17 Jul 2020 06:20:00 +0200</pubDate>
      
      <guid>https://fares.codes/posts/keyword-and-positional-only-arguments-in-python/</guid>
      <description>My flights are now synonymous with new articles&amp;hellip; It is a welcomed distraction from the subtle armrest war, the crammed chairs with barely any leg room and the crying babies&amp;hellip;
Here&amp;rsquo;s a small feature I recently learned about that might significantly impact your code readability: Forcing functions to take Keyword-Only Arguments or Positional Only Arguments!.
The Keyword-Only argument feature was not so recently introduced in PEP 3102. But as with most things, I&amp;rsquo;m discovering this a little bit too late ü§¶‚Äç‚ôÇ</description>
    </item>
    
    <item>
      <title>Named Tuples In Python</title>
      <link>https://fares.codes/posts/named-tuples-in-python/</link>
      <pubDate>Sun, 12 Jul 2020 09:15:00 +0200</pubDate>
      
      <guid>https://fares.codes/posts/named-tuples-in-python/</guid>
      <description>This cool little feature has been out since Python 2.6 but I&amp;rsquo;m only discovering this now ü§¶‚Äç‚ôÇ
Before we begin, let us take a quick look at tuples in python and how they work:
def _get_person_from_db(user_id): person_name = ... ## Something person_age = ... ## Something return (person_name, person_age) res = _get_person_from_db(0) print(f&amp;#34;&amp;#34;&amp;#34;Person {res[0]} is {res[1]} years old!&amp;#34;&amp;#34;&amp;#34;) Above, the function returns a tuple consisting of a name and the persons age.</description>
    </item>
    
    <item>
      <title>DataClasses in Python</title>
      <link>https://fares.codes/posts/dataclasses-in-python/</link>
      <pubDate>Sat, 11 Jul 2020 19:15:00 +0200</pubDate>
      
      <guid>https://fares.codes/posts/dataclasses-in-python/</guid>
      <description>This is one of those cool features you&amp;rsquo;d probably wished you&amp;rsquo;d have known about a while back. Unless I&amp;rsquo;m the only person to not have known this from the start üôä
DataClasses is a module that was introduced in python 3.7 and described in PEP 557. This module simplifies the creation of new classes by defining boilerplate code for you.
Dataclasses are classes designed to store data objects (think case classes in Scala).</description>
    </item>
    
    <item>
      <title>Everything You Probably Need to Know About Airflow</title>
      <link>https://fares.codes/posts/everything-you-probably-need-to-know-about-airflow/</link>
      <pubDate>Sat, 04 Jul 2020 12:20:00 +0200</pubDate>
      
      <guid>https://fares.codes/posts/everything-you-probably-need-to-know-about-airflow/</guid>
      <description>Taking a small break from scala to look into Airflow.
Also, I&amp;rsquo;m making a habit of writing those things during flights and trains ü§∑‚Äç‚ôÇÔ∏è&amp;hellip; Probably the only thing keeping me from starting a travel blog.
Table of Content Intro to Airflow Task Dependencies The Dag File Intervals BackFilling Best Practice For Airflow Tasks Templating Passing Arguments to Python Operator Triggering WorkFlows Triggering Rules XCOM Sensors Random TILs If You Must Remember 3 Things Intro to Airflow Airflow is a platform to programmatically author, schedule and monitor workflows.</description>
    </item>
    
    <item>
      <title>Type Hinting in Python</title>
      <link>https://fares.codes/posts/type-hinting-in-python/</link>
      <pubDate>Mon, 29 Jun 2020 00:05:00 +0200</pubDate>
      
      <guid>https://fares.codes/posts/type-hinting-in-python/</guid>
      <description>As I turn 24, my blog is about to turn 1 year old!! üéä
This article will mostly be a summary of the official python documentation. I have found it useful to read a documentation and then re-summarize it in my own words. (Examples are mostly theirs though)
Typing is a new module starting python 3.5 and introduced by PEP 484. Its goal is to introduce static types to Python.</description>
    </item>
    
    <item>
      <title>Cats Kleisli</title>
      <link>https://fares.codes/posts/cats-kleisli/</link>
      <pubDate>Sun, 17 May 2020 10:00:00 +0200</pubDate>
      
      <guid>https://fares.codes/posts/cats-kleisli/</guid>
      <description>I wont lie&amp;hellip; The main reason I&amp;rsquo;m looking into Kleisli is because I think the name is cool.
Kleisli allows the composition of functions where the return type is a monadic value while the input to the next function is not.
Function Composition Function Composition allows us to chain function calls together.
Here is a dummy example:
val getValueFromDB: Unit =&amp;gt; String = _ =&amp;gt; &amp;#34;Fares&amp;#34; val transformValue: String =&amp;gt; String = _.</description>
    </item>
    
    <item>
      <title>Scala Sealed Trait vs Sealed Abstract Class</title>
      <link>https://fares.codes/posts/scala-sealed-trait-vs-sealed-abstract-class/</link>
      <pubDate>Sun, 03 May 2020 20:00:00 +0200</pubDate>
      
      <guid>https://fares.codes/posts/scala-sealed-trait-vs-sealed-abstract-class/</guid>
      <description>From my previous articles, you&amp;rsquo;ve seen me create ADTs in two different ways:
sealed abstract class Animal object Animal { final case object Dog extends Animal final case object Cat extends Animal } or
sealed trait Animal object Animal { final case object Dog extends Animal final case object Cat extends Animal } This article will outline the difference between those two implementations.
Sealed Trait If a behavior is to be re-used, traits are very handy since they can be mixed in.</description>
    </item>
    
    <item>
      <title>Smart Constructors in Scala</title>
      <link>https://fares.codes/posts/smart-constructors-in-scala/</link>
      <pubDate>Sun, 03 May 2020 10:00:00 +0200</pubDate>
      
      <guid>https://fares.codes/posts/smart-constructors-in-scala/</guid>
      <description>Assume we have the following ADT:
sealed trait Person { def name: String def age: Int } object Person { final case class Adult(name: String, age: Int, fieldOfWork: String) extends Person final case class Child(name: String,age: Int, favAnimal: String) extends Person } Probably a very naive way to see humanity but for our example, it&amp;rsquo;ll do.
So a Person can either be an Adult with a field of work or a Child with a favorite animal.</description>
    </item>
    
    <item>
      <title>PureConfig From A to F</title>
      <link>https://fares.codes/posts/pureconfig-from-a-to-f/</link>
      <pubDate>Mon, 13 Apr 2020 10:00:00 +0000</pubDate>
      
      <guid>https://fares.codes/posts/pureconfig-from-a-to-f/</guid>
      <description>If you&amp;rsquo;re saying to yourself: &amp;ldquo;Surely theres a typo here&amp;hellip; Its normally From A to Z&amp;rdquo;, yes&amp;hellip; but since I have much left to learn in pureconfig, well stop at F üòâ
Sometimes I write useless articles (cond or cats show) and in other times, I write something slightly more interesting and useful üòÉ
PureConfig allows us to quickly and easily load configurations from config files in a type safe and boiler plate free manner.</description>
    </item>
    
    <item>
      <title>Cats Chain</title>
      <link>https://fares.codes/posts/cats-chain/</link>
      <pubDate>Fri, 03 Apr 2020 10:00:00 +0000</pubDate>
      
      <guid>https://fares.codes/posts/cats-chain/</guid>
      <description>In previous articles, I&amp;rsquo;ve talked about accumulating errors with Validated, and for that we said that we needed a Semigroup on the left side that will be used to accumulate the errors (We used a NonEmptyList[A] as an example). Today well talk about Chain and NonEmptyChain[A] and how it&amp;rsquo;s different from a List.
Appending to a List requires iterating over the entire collection (linear time). So using ValidatedNel[A,B] will make us incur a heavy performance penalty specially if we traverse it.</description>
    </item>
    
    <item>
      <title>Cond in Scala</title>
      <link>https://fares.codes/posts/cond-in-scala/</link>
      <pubDate>Tue, 31 Mar 2020 01:00:00 +0000</pubDate>
      
      <guid>https://fares.codes/posts/cond-in-scala/</guid>
      <description>This is probably one of the simplest articles I&amp;rsquo;ve written&amp;hellip; except for the About section of this site&amp;hellip;
The reason I&amp;rsquo;m writing it is because I recently discovered a simple yet very useful function that facilitates the construction of an Either monad or a Validated monad.
This function is called cond probably short for condition. Ans here is how it works:
import cats.data.Validated def someFunction: Boolean = ??? val either: Either[String, String] = Either.</description>
    </item>
    
    <item>
      <title>Validated(Nel) for Validation</title>
      <link>https://fares.codes/posts/validatednel-for-validation/</link>
      <pubDate>Mon, 30 Mar 2020 01:00:00 +0000</pubDate>
      
      <guid>https://fares.codes/posts/validatednel-for-validation/</guid>
      <description>Week two of being stuck at home due to the Corona-virus confinement. I&amp;rsquo;m writing this article because I desperately need to feel like I&amp;rsquo;ve accomplished ONE productive thing this weekend. On a side note, I&amp;rsquo;ve recently taken up cooking and managed to completely botch a recipe that was considered kids friendly&amp;hellip; So yea those are my life updates&amp;hellip;
I will begin my explanation of Validated by explaining something else entirely&amp;hellip;</description>
    </item>
    
    <item>
      <title>Cats Ior</title>
      <link>https://fares.codes/posts/cats-ior/</link>
      <pubDate>Sat, 21 Mar 2020 10:00:00 +0000</pubDate>
      
      <guid>https://fares.codes/posts/cats-ior/</guid>
      <description>If you&amp;rsquo;ve gotten this far reading my blog, you&amp;rsquo;re probably very familiar with Either. Of course Im also assuming someone is reading this blog in the first place üòõ
Anyway, Either[A,B] allows us to return either an A or a B depending on some conditions&amp;hellip; In other words, its a XOR (exclusive or) A value can either be A or it can be B but it cannot be both.
You probably see where this is going, IOR is a cats datatype that stands for Inclusive Or.</description>
    </item>
    
    <item>
      <title>Cats Show</title>
      <link>https://fares.codes/posts/cats-show/</link>
      <pubDate>Fri, 20 Mar 2020 10:00:00 +0000</pubDate>
      
      <guid>https://fares.codes/posts/cats-show/</guid>
      <description>You can tell I&amp;rsquo;m not looking to write something serious by the topic I&amp;rsquo;ve chosen üòõ
The first time I read about Show I instantly said to my self &amp;ldquo;its just a glorified toString&amp;rdquo;. I still struggle to see the difference&amp;hellip; Okay not really but they are pretty similar.
Backing up, Here is the signature of show:
/** creates an instance of [[Show]] using the provided function */ def show[A](f: A =&amp;gt; String): Show[A] = new Show[A] { def show(a: A): String = f(a) } So it takes a A as a type parameter and a function that takes an A and transforms it to a String.</description>
    </item>
    
    <item>
      <title>Kafka HealthChecks</title>
      <link>https://fares.codes/posts/kafka-healthchecks/</link>
      <pubDate>Thu, 19 Mar 2020 10:00:00 +0000</pubDate>
      
      <guid>https://fares.codes/posts/kafka-healthchecks/</guid>
      <description>Ive been recently asked to write healthchecks for long running services that depend on kafka.
This article will not go into the need for healthchecks nor a &amp;ldquo;let it crash&amp;rdquo; design. Instead I&amp;rsquo;ll delve into the struggle I had to actually write those healthchecks and more specifically checking the status of our kafka brokers.
Its important to note that I do not have an in-depth knowledge of the inner workings of kafka, and this might have probably contributed to the difficulty I found implementing said healthchecks.</description>
    </item>
    
    <item>
      <title>Cats Bifunctor</title>
      <link>https://fares.codes/posts/cats-bifunctor/</link>
      <pubDate>Sun, 09 Feb 2020 10:00:00 +0000</pubDate>
      
      <guid>https://fares.codes/posts/cats-bifunctor/</guid>
      <description>The following will be a short and rather simple article about a useful function I recently learned about: bimap by cats.
In cats and in some cases scala, types like Either, Validated, Option&amp;hellip; are right biased. which means that when we call .map on them, the function applied in the map is only applied on the case of a right.
Here are some examples:
val either: Either[String, Int] = Right(2) val result: Either[String, Int] = either.</description>
    </item>
    
    <item>
      <title>Spark Odd Behavior with Nulls</title>
      <link>https://fares.codes/posts/spark-odd-behavior-with-nulls/</link>
      <pubDate>Sun, 19 Jan 2020 10:00:00 +0000</pubDate>
      
      <guid>https://fares.codes/posts/spark-odd-behavior-with-nulls/</guid>
      <description>Once again, I will put a 5 hour flight into good use to detail an interesting/odd behavior encountered with spark while dealing with nulls.
Any basic spark tutorial will tell you that there are a couple ways to create dataframes.
Some of which are:
Transforming existing dataframes.
Reading a file.
Parallelizing over a collection.
The first two will not be in the scope of this article. Instead I will focus on an odd behavior encountered while creating a dataframe.</description>
    </item>
    
    <item>
      <title>Stack Safe Mutual Recursion with Eval</title>
      <link>https://fares.codes/posts/stack-safe-mutual-recursion-with-eval/</link>
      <pubDate>Wed, 15 Jan 2020 10:00:00 +0000</pubDate>
      
      <guid>https://fares.codes/posts/stack-safe-mutual-recursion-with-eval/</guid>
      <description>The first time I heard someone say: &amp;ldquo;Stack Safe Mutual Recursion using cats Eval DataType and Trampolining&amp;rdquo; I figured I&amp;rsquo;d found the ONE thing I wouldn&amp;rsquo;t be able to write about, on the count of how complex it sounded.
To start with, mutual recursion is not a topic I&amp;rsquo;m comfortable with, let alone Stack Safety&amp;hellip;
But with some time and a small exercise, the idea is getting clearer in my head.</description>
    </item>
    
    <item>
      <title>Crash Course in Machine Learning</title>
      <link>https://fares.codes/posts/crash-course-in-machine-learning/</link>
      <pubDate>Mon, 09 Dec 2019 10:00:00 +0000</pubDate>
      
      <guid>https://fares.codes/posts/crash-course-in-machine-learning/</guid>
      <description>I take article requests now&amp;hellip; üòõ
The following article will be a quick overview of classical machine learning and the different types and algorithms out there.
Don&amp;rsquo;t expect any code implementation or a hands-on lab this is just to provide an overview of the types of machine learning algorithms and when those can be used.
On a high level, we can think of a machine learning model as a black box.</description>
    </item>
    
    <item>
      <title>Passing the Scrum Master Certification</title>
      <link>https://fares.codes/posts/passing-the-scrum-master-certification/</link>
      <pubDate>Sun, 03 Nov 2019 12:00:00 +0000</pubDate>
      
      <guid>https://fares.codes/posts/passing-the-scrum-master-certification/</guid>
      <description>The Professional Scrum Master Certification level 1 is one of those easy certifications you can easily obtain by reading a little bit about scrum and doing a couple mock tests.
This article will compile a list of useful resources that will help learn more about the scrum framework and eventually pass the certification.
I highly suggest reading the official scrum guide. It is short and simple to read. With that said I will outline below the most important parts of each section and then mention important points to keep in mind while passing the scrum certification.</description>
    </item>
    
    <item>
      <title>Refined Types In Scala</title>
      <link>https://fares.codes/posts/refined-types-in-scala/</link>
      <pubDate>Mon, 14 Oct 2019 13:00:00 +0000</pubDate>
      
      <guid>https://fares.codes/posts/refined-types-in-scala/</guid>
      <description>The following is my interpretation of the Refined Types presentation
In previous articles, I wrote about some issues surrounding the use of String parameters (passing an accountId instead of a userId and so on&amp;hellip;)
Lets quickly recap:
final case class UserBankAccount(userId: String, accountId: String, amount: Double) UserBankAccount(&amp;#34;user_10023&amp;#34;, &amp;#34;account_28179&amp;#34;, 2000) // Ok UserBankAccount(&amp;#34;account_28179&amp;#34;, &amp;#34;user_10023&amp;#34;, 2000) // Possible bug It would be cool if we had a type safe solution that would prevent the code from compiling&amp;hellip;</description>
    </item>
    
    <item>
      <title>Value Classes in Scala</title>
      <link>https://fares.codes/posts/value-classes-in-scala/</link>
      <pubDate>Fri, 04 Oct 2019 20:55:00 +0000</pubDate>
      
      <guid>https://fares.codes/posts/value-classes-in-scala/</guid>
      <description>Before we look into value classes, lets start by why we might need them in the first place.
case class Client(id: Int, name: String) case class BankAccount(id: Int, clientId: Int, amount: Double) val account1 = BankAccount(1,1,100) val account2 = BankAccount(2,1,200) val account3 = BankAccount(1,2,1000) val client1 = Client(1,&amp;#34;Danny&amp;#34;) val client2 = Client(2, &amp;#34;Emily&amp;#34;) In this example, we have three bank accounts, two belonging to Danny and one to Emily.
Now we add a function that checks if two bank accounts belong to the same client:</description>
    </item>
    
    <item>
      <title>Interactive Rebase for a Cleaner Git Commit History</title>
      <link>https://fares.codes/posts/interactive-rebase-for-a-cleaner-git-commit-history/</link>
      <pubDate>Tue, 03 Sep 2019 20:55:00 +0000</pubDate>
      
      <guid>https://fares.codes/posts/interactive-rebase-for-a-cleaner-git-commit-history/</guid>
      <description>Any article you read online about maintaining a clean project will mention a version control system (usually git) and will then talk about maintaining a clean commit history through atomic commits, meaningful commit messages and so on.
This article wont go into all the techniques above, instead Im going to focus on a single technique that I have recently learned: Interactive Rebase.
No matter how hard we try to keep our commit messages clean and clear, we often end up with something looking like this:</description>
    </item>
    
    <item>
      <title>Fold vs Pattern Matching and Matching on Options</title>
      <link>https://fares.codes/posts/fold-vs-pattern-matching-and-matching-on-options/</link>
      <pubDate>Sun, 01 Sep 2019 10:00:00 +0000</pubDate>
      
      <guid>https://fares.codes/posts/fold-vs-pattern-matching-and-matching-on-options/</guid>
      <description>The following article is a summary of the Lambda Conf 2015 talk: Idiomatic Scala Your Options Do Not Match by Marconi Lanna https://www.youtube.com/watch?v=ol2AB5UN1IA&amp;amp;t=1s
Often when dealing with Options, we have a case where we want to check if a value is defined and if it is, apply a specific treatment on the value inside the option. So we end up with a code that looks something like this:
value match { case Some(a) =&amp;gt; foo(a) case None =&amp;gt; bar } In this example, we patten match on the Option value.</description>
    </item>
    
    <item>
      <title>Passing the DataBricks Apache Spark Certification</title>
      <link>https://fares.codes/posts/passing-the-databricks-apache-spark-certification/</link>
      <pubDate>Wed, 21 Aug 2019 20:00:00 +0000</pubDate>
      
      <guid>https://fares.codes/posts/passing-the-databricks-apache-spark-certification/</guid>
      <description>The following is a compilation of all the resources I&amp;rsquo;ve used to pass the Databricks 2.X Spark Certification, as well as some questions that came up.
Background on the Exam The exam databricks spark 2.x spark with scala certification is made up of 40 MCQ questions, 3 hours to answer them in total. The registration grants you 2 trials, meaning if you fail the first attempt, you have to wait 15 days and then you can apply for a second trial.</description>
    </item>
    
    <item>
      <title>Dynamic Scaling and Backpressure</title>
      <link>https://fares.codes/posts/dynamic-scaling-and-backpressure/</link>
      <pubDate>Sat, 10 Aug 2019 09:00:00 +0000</pubDate>
      
      <guid>https://fares.codes/posts/dynamic-scaling-and-backpressure/</guid>
      <description>Taking a little break from Scala to review some interesting features of spark streaming.
This article has been updated to reflect recently gained knowledge with spark streaming both in theory and practice.
An important note: This article is about backpressure and dynamic allocation in spark streaming and not normal batch jobs.
Dynamic Allocation in Spark Streaming Dynamic Allocation also called Elastic Scaling is a feature that lets spark dynamically adjust the number of executors to match the workload.</description>
    </item>
    
    <item>
      <title>SemigroupK and CombineK</title>
      <link>https://fares.codes/posts/semigroupk-and-combinek/</link>
      <pubDate>Sat, 03 Aug 2019 15:00:00 +0000</pubDate>
      
      <guid>https://fares.codes/posts/semigroupk-and-combinek/</guid>
      <description>Before we get into SemigroupKand combineK let us first quickly recap what a semigroup is.
Semigroup A Semigroup for a given type A has a single operation that takes two values of type A and returns a single value of the same type. This operation needs to be associative. We will call this operation combine for simplicity.
from algebra.Semigroup we have:
/** * A semigroup is any set `A` with an associative operation (`combine`).</description>
    </item>
    
    <item>
      <title>Collect / FilterMap</title>
      <link>https://fares.codes/posts/collect-/-filtermap/</link>
      <pubDate>Sat, 03 Aug 2019 10:00:00 +0000</pubDate>
      
      <guid>https://fares.codes/posts/collect-/-filtermap/</guid>
      <description>Collect or FilterMap does exactly what is says. it filters a collection and then maps the values.
collect takes a partial function as a parameter and returns a Traversable of the same type.
def collect[B](pf: PartialFunction[A, B]): CC[B] Also from the scaladoc:
/** * @tparam CC type constructor of the collection (e.g. `List`, `Set`). Operations returning a * collection with a different type of element `B` (e.g. `map`) return a `CC[B]`.</description>
    </item>
    
    <item>
      <title>Un-Apply in Scala</title>
      <link>https://fares.codes/posts/un-apply-in-scala/</link>
      <pubDate>Fri, 02 Aug 2019 10:10:00 +0000</pubDate>
      
      <guid>https://fares.codes/posts/un-apply-in-scala/</guid>
      <description>Unapply in Scala is the inverse of the apply&amp;hellip; (queue no shit comments :p)
So what does it do exactly? given a class Person:
case class Person(name: String, age: Int, hobbies: List[String]) If we wanted to decompose the class person into a set of attributes:
name: String age: Int hobbies: List[String] We would use the unapply. the return type of the unapply is an Option of a tuple with the values inside the tuple representing the values we seek to retrieve.</description>
    </item>
    
    <item>
      <title>Sealed Traits in Scala</title>
      <link>https://fares.codes/posts/sealed-traits-in-scala/</link>
      <pubDate>Wed, 31 Jul 2019 21:00:00 +0000</pubDate>
      
      <guid>https://fares.codes/posts/sealed-traits-in-scala/</guid>
      <description>A sealed trait in scala forces all the case classes/objects that wish to extend it to be in the same source file.
In other words, if case class B wishes to extend sealed trait A B has to be defined in the same file where trait A is defined.
Taking a little step back, What exactly is a trait?
Traits in Scala Traits in scala are similar to interfaces in java.</description>
    </item>
    
    <item>
      <title>For Comprehensions Demystified</title>
      <link>https://fares.codes/posts/for-comprehensions-demystified/</link>
      <pubDate>Mon, 29 Jul 2019 21:37:00 +0000</pubDate>
      
      <guid>https://fares.codes/posts/for-comprehensions-demystified/</guid>
      <description>A For Comprehension is a syntactic sugar for using a composition of map, flatMap and filter.
At first glance it might look complicated and difficult to comprehend. But once you get the hang of it, you&amp;rsquo;ll realise it&amp;rsquo;s a cool card to have up your sleeve, one that will surely make your code much more readable.
Lets look at the below couple functions:
def computeA(a: Int): Either[Throwable, Int] = ??? def computeB(b: Int): Either[Throwable, Int] = ?</description>
    </item>
    
    <item>
      <title></title>
      <link>https://fares.codes/posts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://fares.codes/posts/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
