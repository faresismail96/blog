<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Learning Publicly</title>
        <link>https://fares.codes/posts/</link>
        <description>Recent content in Posts on Learning Publicly</description>
        <generator>Hugo -- gohugo.io</generator>
        <lastBuildDate>Sun, 28 Feb 2021 19:20:00 +0200</lastBuildDate>
        <atom:link href="https://fares.codes/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Property Based Testing with ScalaCheck</title>
            <link>https://fares.codes/posts/property-based-testing-with-scalacheck/</link>
            <pubDate>Sun, 28 Feb 2021 19:20:00 +0200</pubDate>
            
            <guid>https://fares.codes/posts/property-based-testing-with-scalacheck/</guid>
            <description>Unit testing is an effective way of catching bugs and protecting our code from future bugs related to refactoring.
But with the classical unit tests (example based tests), we are restricted to the test cases we can think ok. We can only write a finite number of tests that cover a finite number of cases.
In this article I&amp;rsquo;ll begin by showing the limitations of example based tests before moving to scalacheck and property based testing.</description>
            <content type="html"><![CDATA[<p>Unit testing is an effective way of catching bugs and protecting our code from future bugs related to refactoring.</p>
<p>But with the classical unit tests (example based tests), we are restricted to the test cases we can think ok. We can only write a finite number of tests that cover a finite number of cases.</p>
<p>In this article I&rsquo;ll begin by showing the limitations of example based tests before moving to scalacheck and property based testing.</p>
<p>The following article is inspired by Magda Sto≈ºeks&rsquo; talk in the ScalaLove 2021 conference: &ldquo;Property-based testing - let your testing library work for you&rdquo;.</p>
<h2 id="example-based-tests">Example Based Tests</h2>
<p>Example based tests are a great way to test out code against a specific input and compare it with a precomputed output. Here&rsquo;s how a simple one might look:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">  behavior of <span style="color:#e6db74">&#34;MyFunc&#34;</span>

  it should <span style="color:#e6db74">&#34;correctly compute result&#34;</span> in <span style="color:#f92672">{</span>

    <span style="color:#66d9ef">val</span> input <span style="color:#66d9ef">=</span> <span style="color:#f92672">???</span>
    <span style="color:#66d9ef">val</span> res <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">MyFunc</span><span style="color:#f92672">.</span>compute<span style="color:#f92672">(</span>input<span style="color:#f92672">)</span>
    <span style="color:#66d9ef">val</span> expected <span style="color:#66d9ef">=</span> <span style="color:#f92672">???</span>
    
    res mustBe<span style="color:#f92672">(</span>expected<span style="color:#f92672">)</span>
  <span style="color:#f92672">}</span>
</code></pre></div><p>In addition to allowing us to quickly test our code against a specific example, this type of tests also serves as a documentation. Anyone reading those types of unit tests can easily and quickly get a sense of what our code does and what are the cases that it handles etc&hellip;</p>
<p>But as I&rsquo;ve mentioned above, they&rsquo;re somewhat restricted to the examples we can think of.</p>
<p>Assume we are computing someones&rsquo; age based on birthday to authorize access to a site, we might think of testing a &ldquo;happy path&rdquo; where the person is above 18 years old and so should be granted access to our site, and test that if a person is below 18, their access will be denied.</p>
<p>But we might forget to test what happens if the person inputs a birth date that is in the future. The age will be negative and if our code does not handle that, it will lead to a bug.</p>
<p>Using a framework that can automatically generate test cases based on a specified properties can immensely improve our code and potentially catch unthought of bugs.</p>
<h2 id="property-based-testing">Property Based Testing</h2>
<p>Before we get into property based testing, lets look at what a property is.</p>
<h3 id="defining-properties">Defining Properties</h3>
<p>A property is something that is always true no matter what the input is.</p>
<p>Here are some examples of properties:</p>
<ul>
<li>When computing age or distance between two points: the result cannot be negative.</li>
<li>When concatenating two lists, the size of the result should be the sum of the size of both lists</li>
<li>Applying reverse twice on the same list will return the original list</li>
</ul>
<h3 id="scalacheck">ScalaCheck</h3>
<p>ScalaCheck is a framework that allows us to automatically generate test cases using the properties that are provided.</p>
<p>Here is how the concatenation of two list test would look like:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#66d9ef">import</span> org.scalacheck.Properties
<span style="color:#66d9ef">import</span> org.scalacheck.Prop.forAll

<span style="color:#66d9ef">object</span> <span style="color:#a6e22e">MainSpec</span> <span style="color:#66d9ef">extends</span> <span style="color:#a6e22e">Properties</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Main&#34;</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
  property<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;concatLists&#34;</span><span style="color:#f92672">)</span> <span style="color:#66d9ef">=</span> forAll <span style="color:#f92672">{</span> <span style="color:#f92672">(</span>list1<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">List</span><span style="color:#f92672">[</span><span style="color:#66d9ef">Int</span><span style="color:#f92672">],</span> list2<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">List</span><span style="color:#f92672">[</span><span style="color:#66d9ef">Int</span><span style="color:#f92672">])</span> <span style="color:#66d9ef">=&gt;</span>
    list1<span style="color:#f92672">.</span>size <span style="color:#f92672">+</span> list2<span style="color:#f92672">.</span>size <span style="color:#f92672">==</span> <span style="color:#a6e22e">Main</span><span style="color:#f92672">.</span>concatLists<span style="color:#f92672">(</span>list1<span style="color:#f92672">,</span> list2<span style="color:#f92672">).</span>size
  <span style="color:#f92672">}</span>
<span style="color:#f92672">}</span>
</code></pre></div><p>This will yield the following result:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">+ Main.concatLists: OK, passed 100 tests.
</code></pre></div><p>Essentially, ScalaCheck generated 100 test cases and ran them all against our property to validate that it holds for all test cases. In each of those test cases, scalacheck created two lists with varying numbers and lengths and ran them through our function to validate that for each case, the property holds true.</p>
<h3 id="generators">Generators</h3>
<p>We&rsquo;ve seen how ScalaCheck can generate random data for our simple types like String, Int, List[String] etc&hellip; But what if your test takes a case class instance as input? In that case, we will need to supply the forAll function with a custom generator that it&rsquo;ll use to generate that data.</p>
<p>For our examples, we will look at Grade Reports. Here&rsquo;s how we might model one in scala:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Scala" data-lang="Scala">  <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">case</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">GradeReport</span><span style="color:#f92672">(</span>
    firstName<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">String</span><span style="color:#f92672">,</span>
    lastName<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">String</span><span style="color:#f92672">,</span>
    studentId<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Long</span><span style="color:#f92672">,</span>
    coursesResult<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">List</span><span style="color:#f92672">[</span><span style="color:#66d9ef">CourseResult</span><span style="color:#f92672">],</span>
    generalAverage<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Double</span><span style="color:#f92672">,</span>
    studentStatus<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">OverallStatus</span>
  <span style="color:#f92672">)</span>
  <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">case</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">CourseResult</span><span style="color:#f92672">(</span>courseName<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">String</span><span style="color:#f92672">,</span> courseId<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">String</span><span style="color:#f92672">,</span> courseGrade<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Double</span><span style="color:#f92672">)</span>

  <span style="color:#66d9ef">sealed</span> <span style="color:#66d9ef">trait</span> <span style="color:#a6e22e">OverallStatus</span>

  <span style="color:#66d9ef">object</span> <span style="color:#a6e22e">OverallStatus</span> <span style="color:#f92672">{</span>
    <span style="color:#66d9ef">case</span> <span style="color:#66d9ef">object</span> <span style="color:#a6e22e">Passing</span> <span style="color:#66d9ef">extends</span> <span style="color:#a6e22e">OverallStatus</span>
    <span style="color:#66d9ef">case</span> <span style="color:#66d9ef">object</span> <span style="color:#a6e22e">Failing</span> <span style="color:#66d9ef">extends</span> <span style="color:#a6e22e">OverallStatus</span>
  <span style="color:#f92672">}</span>

</code></pre></div><p>Its a pretty simplistic view, A grade report will contain information about the student, a list of courses the student has taken along with their respective grades and the students&rsquo; overall status along with his average.</p>
<p>So how can we generate Grade Reports knowing that some fields in our GradeReport depend on others. For example, a students&rsquo; overall status depends on the general average which in turn depends on the list of courses taken. Naturally, our Generator will have to take all that into account.</p>
<p>To generate simple fields like a name of an id:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#66d9ef">val</span> nameGen<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Gen</span><span style="color:#f92672">[</span><span style="color:#66d9ef">String</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">Gen</span><span style="color:#f92672">.</span>alphaLowerStr
</code></pre></div><p>We&rsquo;re using the method alphaLowerStr because we would like to restrict ourselves to the 26 characters of the english alphabet, and we&rsquo;d also like to have everything in lowercase.</p>
<p>Here&rsquo;s some examples of what might get generated:</p>
<ul>
<li>
<p>eycp</p>
</li>
<li>
<p>e</p>
</li>
<li>
<p>hjsbqcyhzecjfcydyxheajplls</p>
</li>
<li></li>
</ul>
<p>(yes the last one is an empty string)</p>
<p>So overall the generated values are valid strings with varying lengths.</p>
<p>Note that we also have out of the box generators for numeric string, alphanumeric string, constant values where the generator will always return the same value etc&hellip;</p>
<p>For the studentId, we can have the generator pick a value from a given range:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#66d9ef">val</span> studentId <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">Gen</span><span style="color:#f92672">.</span>choose<span style="color:#f92672">(</span><span style="color:#ae81ff">100L</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">100000L</span><span style="color:#f92672">)</span>
<span style="color:#75715e">// Examples:
</span><span style="color:#75715e">// 98159
</span><span style="color:#75715e">// 9138
</span><span style="color:#75715e">// 793
</span><span style="color:#75715e"></span>
</code></pre></div><p>On to more interesting generators.</p>
<p>How can we generate a list of <code>CourseResult</code>? start small:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">  <span style="color:#66d9ef">val</span> courseResultGen<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Gen</span><span style="color:#f92672">[</span><span style="color:#66d9ef">CourseResult</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span> <span style="color:#66d9ef">for</span> <span style="color:#f92672">{</span>
    courseName  <span style="color:#66d9ef">&lt;-</span> <span style="color:#a6e22e">Gen</span><span style="color:#f92672">.</span>alphaLowerStr
    courseId    <span style="color:#66d9ef">&lt;-</span> <span style="color:#a6e22e">Gen</span><span style="color:#f92672">.</span>alphaStr
    courseGrade <span style="color:#66d9ef">&lt;-</span> <span style="color:#a6e22e">Gen</span><span style="color:#f92672">.</span>choose<span style="color:#f92672">(</span><span style="color:#ae81ff">0</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">100</span><span style="color:#f92672">)</span>
  <span style="color:#f92672">}</span> <span style="color:#66d9ef">yield</span> <span style="color:#a6e22e">CourseResult</span><span style="color:#f92672">(</span>courseName<span style="color:#f92672">,</span> courseId<span style="color:#f92672">,</span> courseGrade<span style="color:#f92672">)</span>

</code></pre></div><p>Over here, we are creating a generator for our case class. The for comprehension syntax is just a prettier representation and allows us to easily create generators for custom product types.</p>
<p>Then we could reuse this generator to create a list of <code>CourseResult</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#66d9ef">val</span> listCourseResult<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Gen</span><span style="color:#f92672">[</span><span style="color:#66d9ef">List</span><span style="color:#f92672">[</span><span style="color:#66d9ef">CourseResult</span><span style="color:#f92672">]]</span> <span style="color:#66d9ef">=</span> 
    <span style="color:#a6e22e">Gen</span><span style="color:#f92672">.</span>listOf<span style="color:#f92672">(</span>courseResultGen<span style="color:#f92672">)</span>

<span style="color:#75715e">// If we want to fix the list length, use:
</span><span style="color:#75715e">//   Gen.listOfN(NUMBER, courseResultGen)
</span></code></pre></div><p>Alright&hellip; now that we have a generator for listOfCourseResult, we can calculate the generalAverage and based on that, choose a specific OverallStatus:</p>
<h3 id="dependant-generators">Dependant Generators</h3>
<p>A students&rsquo; Overall Status should only be passing if the average of his courses is above some value (say 70%). So when generating a value, our generator needs to take into account the generated value for another field. In our case the list of courses along with their details. Here&rsquo;s how this might look:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">
  <span style="color:#66d9ef">val</span> gradeReportGen<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Gen</span><span style="color:#f92672">[</span><span style="color:#66d9ef">GradeReport</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span> <span style="color:#66d9ef">for</span> <span style="color:#f92672">{</span>
    firstName      <span style="color:#66d9ef">&lt;-</span> <span style="color:#a6e22e">Gen</span><span style="color:#f92672">.</span>alphaLowerStr
    lastName       <span style="color:#66d9ef">&lt;-</span> <span style="color:#a6e22e">Gen</span><span style="color:#f92672">.</span>alphaLowerStr
    studentId      <span style="color:#66d9ef">&lt;-</span> <span style="color:#a6e22e">Gen</span><span style="color:#f92672">.</span>choose<span style="color:#f92672">(</span><span style="color:#ae81ff">100L</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">100000L</span><span style="color:#f92672">)</span>
    courseResult   <span style="color:#66d9ef">&lt;-</span> listCourseResult
    generalAverage <span style="color:#66d9ef">&lt;-</span> <span style="color:#a6e22e">Gen</span><span style="color:#f92672">.</span>const<span style="color:#f92672">(</span>courseResult<span style="color:#f92672">.</span>map<span style="color:#f92672">(</span><span style="color:#66d9ef">_</span><span style="color:#f92672">.</span>courseGrade<span style="color:#f92672">).</span>sum <span style="color:#f92672">/</span> courseResult<span style="color:#f92672">.</span>length<span style="color:#f92672">)</span>
    studentStatus  <span style="color:#66d9ef">&lt;-</span> <span style="color:#a6e22e">Gen</span><span style="color:#f92672">.</span>const<span style="color:#f92672">(</span><span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>generalAverage <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">70</span><span style="color:#f92672">)</span> <span style="color:#a6e22e">Passing</span> <span style="color:#66d9ef">else</span> <span style="color:#a6e22e">Failing</span><span style="color:#f92672">)</span>
  <span style="color:#f92672">}</span> <span style="color:#66d9ef">yield</span> <span style="color:#a6e22e">GradeReport</span><span style="color:#f92672">(</span>
        firstName<span style="color:#f92672">,</span>
        lastName<span style="color:#f92672">,</span>
        studentId<span style="color:#f92672">,</span>
        courseResult<span style="color:#f92672">,</span>
        generalAverage<span style="color:#f92672">,</span>
        studentStatus
    <span style="color:#f92672">)</span>

</code></pre></div><p>With the above code, we are able to generate logical results that make sense.</p>
<p><strong>But there is one flaw in our design.</strong></p>
<p>If the passing threshold is 70% then we cannot really rely on a random generator for our CourseGrade. By definition, half the generated values will be below 50% and as a result (with 70% being the threshold) the majority of our students will end up <code>Failing</code> their years, the dean would soon demand answers and accreditation will be revoked&hellip;</p>
<p>Instead of relying on a random generator, we&rsquo;ll have to created a biased generator that will favor some values over others. Grades will most likely have a normal distribution around a class average with a relatively low standard deviation (or at least from personal experience üòõ)</p>
<h3 id="not-so-random-data">Not So Random Data</h3>
<p>Before moving on to generating biased generators, how can you verify what I&rsquo;ve said? Prop offers a classify function that collects data about the test cases and displays them in the final result.</p>
<h4 id="collecting-test-data-with-classify">Collecting Test Data with Classify</h4>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">  property<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;something&#34;</span><span style="color:#f92672">)</span> <span style="color:#66d9ef">=</span> forAll<span style="color:#f92672">(</span>gradeReportGen<span style="color:#f92672">)</span> <span style="color:#f92672">{</span> name <span style="color:#66d9ef">=&gt;</span>
    <span style="color:#a6e22e">Prop</span><span style="color:#f92672">.</span>classify<span style="color:#f92672">(</span>name<span style="color:#f92672">.</span>generalAverage <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">50</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;below 50&#34;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;above 50&#34;</span><span style="color:#f92672">){</span> 
        <span style="color:#66d9ef">true</span> 
    <span style="color:#f92672">}</span>
  <span style="color:#f92672">}</span>
</code></pre></div><p>This shows the following results:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">&gt; Collected test data: 
52% above 50
48% below 50
</code></pre></div><p>And in another run:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">&gt; Collected test data: 
54% below 50
46% above 50
</code></pre></div><p>So when we compare with 70?</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">&gt; Collected test data: 
88% below 70
12% above 70
</code></pre></div><p>This somewhat verifies it.</p>
<h4 id="biased-generators">Biased Generators</h4>
<p>One way of creating a biased generator is by using the frequency function:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">
<span style="color:#66d9ef">val</span> beverageGen <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">Gen</span><span style="color:#f92672">.</span>frequency<span style="color:#f92672">(</span>
    <span style="color:#f92672">(</span><span style="color:#ae81ff">1</span><span style="color:#f92672">,</span> <span style="color:#a6e22e">Gen</span><span style="color:#f92672">.</span>const<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Hot Chocolate&#34;</span><span style="color:#f92672">)),</span>
    <span style="color:#f92672">(</span><span style="color:#ae81ff">5</span><span style="color:#f92672">,</span> <span style="color:#a6e22e">Gen</span><span style="color:#f92672">.</span>const<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Coffee&#34;</span><span style="color:#f92672">))</span>
<span style="color:#f92672">)</span>

</code></pre></div><p>In this case our custom Beverage Generator is biased towards coffee. 5 out of 6 times, the result will be Coffee and not Hot Chocolate. the numbers represent the results&rsquo; weight.</p>
<p>But this is a bit harder to apply to our case since we&rsquo;re dealing with continuous variables and not discrete ones. Instead lets look at defining a distribution and using that to generate our data:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">courseGrade <span style="color:#66d9ef">&lt;-</span> <span style="color:#a6e22e">Gen</span><span style="color:#f92672">.</span>const<span style="color:#f92672">(</span><span style="color:#a6e22e">Random</span><span style="color:#f92672">.</span>nextGaussian<span style="color:#f92672">()</span> <span style="color:#f92672">*</span> <span style="color:#ae81ff">10</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">70</span><span style="color:#f92672">)</span>
</code></pre></div><p>A lot of things are happening in the above line, so let&rsquo;s break it down:</p>
<p>Random.nextGaussian() will generate a pseudorandom number that has a normal distribution. Those values will have a standard deviation of 1 and a mean of 0.</p>
<p>To shift that to our own average, we multiply by 10 (standard deviation) and add 70.</p>
<p>Here are some examples of the generated values:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">85.84898535417973
71.96463467037076
70.75840861524729
54.78215028238531
66.1747348048266
</code></pre></div><p>and the classify result:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">+ Main.something: OK, passed 100 tests.
&gt; Collected test data: 
51% above 70
49% below 70
</code></pre></div><p>Any person having taken basic math would be able to point out another flaw. With three times the standard deviation we can only garante that 99.7% of the values will fall in our acceptable range (so 99.7% of the values will be below 3*10+70 thats 100). But what of the 0.3%? well, either you say that its an acceptable test case and carry on (NO) or you still have the option to filter it during the execution of the test (more on that in the next section).
Also note that the same applies for numbers below 0 (which in our case would be an <strong>extremely</strong> rare case).</p>
<p>With this, we now have a fully functioning GradeReport Generator that produces logical values.</p>
<p>ScalaCheck also offers some neat features that I couldn&rsquo;t mention in the context of my example, but I&rsquo;ll list them below</p>
<h2 id="limiting-test-cases">Limiting Test Cases</h2>
<p>In some cases, we would like to exclude some test values from running through our unit test. This could either be because they are not possible in our use case or because they are not handled etc&hellip; Fortunately, ScalaCheck offers a simple way to exclude some cases:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">
  property<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;something&#34;</span><span style="color:#f92672">)</span> <span style="color:#66d9ef">=</span> forAll<span style="color:#f92672">(</span>gradeReportGen<span style="color:#f92672">)</span> <span style="color:#f92672">{</span> name<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">GradeReport</span> <span style="color:#f92672">=&gt;</span>
    name<span style="color:#f92672">.</span>coursesResult<span style="color:#f92672">.</span>map<span style="color:#f92672">(</span>x <span style="color:#66d9ef">=&gt;</span>
     <span style="color:#f92672">(</span>x<span style="color:#f92672">.</span>courseGrade <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">0</span><span style="color:#f92672">)</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#f92672">(</span>x<span style="color:#f92672">.</span>courseGrade <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">100</span><span style="color:#f92672">)</span>
     <span style="color:#f92672">).</span>forall<span style="color:#f92672">(</span>identity<span style="color:#f92672">)</span> <span style="color:#f92672">==&gt;</span> <span style="color:#66d9ef">true</span>
  <span style="color:#f92672">}</span>

</code></pre></div><p>The implication operator (==&gt;) in this case is used to filter out the values that do not satisfy the given conditions</p>
<h3 id="dangers-in-doing-so">Dangers in doing so</h3>
<p>When filtering out test cases, it is important to make sure that the condition will not filter most if not all the test cases.</p>
<p>In some cases, the property test will fail with a similar message:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">Gave up after only 9 passed tests. 501 tests were discarded.
Found 1 failing properties.
</code></pre></div><p>We could also be filtering out test cases by accident that could have proved interesting.</p>
<h2 id="labeling-test-cases">Labeling Test Cases</h2>
<p>ScalaCheck has allows us to label our assertions, and it&rsquo;ll use those labels in the report for clearer error messages. Here is a simple example that demonstrate labeling assertions and the results:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">
  property<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;bigger than 0&#34;</span><span style="color:#f92672">)</span> <span style="color:#66d9ef">=</span> forAll <span style="color:#f92672">{</span> num<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Int</span> <span style="color:#f92672">=&gt;</span>
    <span style="color:#f92672">(</span>num <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">0</span><span style="color:#f92672">)</span> <span style="color:#66d9ef">:</span><span style="color:#66d9ef">|</span> <span style="color:#960050;background-color:#1e0010">&#34;</span><span style="color:#66d9ef">number</span> <span style="color:#66d9ef">should</span> <span style="color:#66d9ef">be</span> <span style="color:#66d9ef">bigger</span> <span style="color:#66d9ef">or</span> <span style="color:#66d9ef">equal</span> <span style="color:#66d9ef">to</span> <span style="color:#66d9ef">zero</span><span style="color:#960050;background-color:#1e0010">&#34;</span>
  <span style="color:#f92672">}</span>

</code></pre></div><p>Generates the following error:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">! Main.bigger than 0: Falsified after 2 passed tests.
&gt; Labels of failing property: 
number should be bigger or equal to zero
&gt; ARG_0: -1
</code></pre></div><p>When the same test is ran without the labels, here is the output:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">
! Main.bigger than 0: Falsified after 1 passed tests.
&gt; ARG_0: -1
Found 1 failing properties.

</code></pre></div><p>Note that if you&rsquo;re using scalacheck with ScalaTest, then the matchers will make labeling assertions irrelevant because scalacheck can use informations from the matchers to generate a report.</p>
<h2 id="difficulties-using-scalacheck">Difficulties using ScalaCheck</h2>
<p>You might not have noticed it in this article because the example was rather simple, but in my opinion one of the hardest things in property based testing is coming up with the properties to test.</p>
<p>Another issue is code readability. With example based testing, it is easy to understand what the code is supposed to do simply by reading the unit tests. In those cases, the unit tests act as a code documentation. This becomes a bit harder to do in Property Based Testing.</p>
<h2 id="best-practice">Best Practice</h2>
<p>Because of the above mentioned points, property based tests can easily reside in the same code base as example based tests.</p>
<p>Another best practice is to reproduce any bug caught by the property based test as an example based test. That way, you&rsquo;re sure it&rsquo;ll be checked again every time from this point on.</p>
<h2 id="if-you-must-remember-two-things">If you must remember two things</h2>
<ul>
<li>ScalaCheck is a framework that generates test cases to validate or invalidate some properties</li>
<li>ScalaCheck can be used together with ScalaTest for better test coverage and the ability to use unit tests as code documentation</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>ADTs: Sum Types and Product Types</title>
            <link>https://fares.codes/posts/adts-sum-types-and-product-types/</link>
            <pubDate>Sun, 14 Feb 2021 12:20:00 +0200</pubDate>
            
            <guid>https://fares.codes/posts/adts-sum-types-and-product-types/</guid>
            <description>It has been a while since I haven&amp;rsquo;t posted a new article, and in an attempt to break the cycle I&amp;rsquo;m starting off with something pretty simple.
When listening to people talk of ADTs, you&amp;rsquo;ll often hear the words: Sum type and Product type. Now I have a bad habit of confusing the two so in this article I&amp;rsquo;ll attempt to make things clearer and I will hopefully never find myself re-re-researching both.</description>
            <content type="html"><![CDATA[<p>It has been a while since I haven&rsquo;t posted a new article, and in an attempt to break the cycle I&rsquo;m starting off with something pretty simple.</p>
<p>When listening to people talk of ADTs, you&rsquo;ll often hear the words: <code>Sum type</code> and <code>Product type</code>. Now I have a bad habit of confusing the two so in this article I&rsquo;ll attempt to make things clearer and I will hopefully never find myself re-re-researching both.</p>
<p>But first, ADT stands for Algebraic Data Type and they&rsquo;re essentially all about combining existing types to create new ones to better model a specific domain.</p>
<p>A simplistic explanation of domain is &ldquo;an area of knowledge&rdquo;, the problem space we are working with. This includes all related entities, their behavior and the laws they obey.</p>
<p>ADTs allow us to model all that, including the relationships between different entities.</p>
<h2 id="product-types">Product Types</h2>
<p>Product types are created by combining two or more types together with the <code>AND</code> operator. Here are a couple examples:</p>
<p>Street addresses are comprised of a street number and a street name.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#66d9ef">final</span> <span style="color:#66d9ef">case</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">StreetAddress</span><span style="color:#f92672">(</span>streetNumber<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Int</span><span style="color:#f92672">,</span> streetName<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">String</span><span style="color:#f92672">)</span>
</code></pre></div><p>A book consists of a title, and author and an ISBN.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#66d9ef">final</span> <span style="color:#66d9ef">case</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Book</span><span style="color:#f92672">(</span>title<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">String</span><span style="color:#f92672">,</span> author<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">String</span><span style="color:#f92672">,</span> isbn<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Long</span><span style="color:#f92672">)</span>
</code></pre></div><h2 id="sum-types">Sum Types</h2>
<p>A sum type is a type that combines other types using the <code>OR</code> operator. Here are a couple examples:</p>
<ul>
<li>
<p>A grade is a pass or fail class is a Sum type, it can either be <code>Pass</code> or can be <code>Fail</code> but not both.</p>
</li>
<li>
<p>A boolean can either be <code>True</code> or it can be <code>False</code> but not both.</p>
</li>
<li>
<p>A dice roll can only be one out of six possibilities at a time but not more.</p>
</li>
</ul>
<p>In our PostalAddress class, we represented a fullName as a String. But what if we wanted to push this further?</p>
<p>A fullName can be comprised of a firstName and a lastName, but a persons&rsquo; name can also include a middleName</p>
<p>So here&rsquo;s one way of modeling this:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#66d9ef">final</span> <span style="color:#66d9ef">case</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">FullName</span><span style="color:#f92672">(</span>
  firstName<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">String</span><span style="color:#f92672">,</span>
  middleName<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Option</span><span style="color:#f92672">[</span><span style="color:#66d9ef">String</span><span style="color:#f92672">],</span> 
  lastName<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">String</span>
<span style="color:#f92672">)</span>
</code></pre></div><p>And I guess thats okay&hellip; But we&rsquo;ll have to add <code>None</code> everywhere a middle name does not exist and when it does, we&rsquo;ll have to wrap it in a <code>Some</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">  <span style="color:#66d9ef">val</span> stephen <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">FullName</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Stephen&#34;</span><span style="color:#f92672">,</span> <span style="color:#a6e22e">None</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;Chbosky&#34;</span><span style="color:#f92672">)</span>
  <span style="color:#66d9ef">val</span> sagan <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">FullName</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Carl&#34;</span><span style="color:#f92672">,</span> <span style="color:#a6e22e">Some</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Edward&#34;</span><span style="color:#f92672">),</span> <span style="color:#e6db74">&#34;Sagan&#34;</span><span style="color:#f92672">)</span>
</code></pre></div><p>But what about people with a singe name such as : <code>Aristotle</code>, <code>Charlemagne</code>, <code>Fibonacci</code> etc&hellip;</p>
<p>Should we make the firstName optional? can those really be considered their last names? or should be put some cases aside as special cases to be handled separately? If so wouldn&rsquo;t we end up in a situation where we have so many exceptions of different kind that it becomes unmanageable?</p>
<p>If I&rsquo;m asking these questions its because they best demonstrate where Sum Types really shine!</p>
<p>A FullName can be modeled as a first and last name OR a first, middle and last name OR a single name etc&hellip;</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">
<span style="color:#66d9ef">sealed</span> <span style="color:#66d9ef">trait</span> <span style="color:#a6e22e">FullName</span>

<span style="color:#66d9ef">object</span> <span style="color:#a6e22e">FullName</span> <span style="color:#f92672">{</span>
  
  <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">case</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">FirstLastName</span><span style="color:#f92672">(</span>
    firstName<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">String</span><span style="color:#f92672">,</span> 
    lastName<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">String</span>
    <span style="color:#f92672">)</span> <span style="color:#66d9ef">extends</span> <span style="color:#a6e22e">FullName</span>

  <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">case</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">WithMiddleName</span><span style="color:#f92672">(</span>
    firstName<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">String</span><span style="color:#f92672">,</span> 
    middleName<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">String</span><span style="color:#f92672">,</span> 
    lastName<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">String</span><span style="color:#f92672">)</span> 
    <span style="color:#66d9ef">extends</span> <span style="color:#a6e22e">FullName</span>

  <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">case</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">SingleName</span><span style="color:#f92672">(</span>name<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">String</span><span style="color:#f92672">)</span> <span style="color:#66d9ef">extends</span> <span style="color:#a6e22e">FullName</span>
  
  <span style="color:#66d9ef">val</span> stephen<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">FullName</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">FirstLastName</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Stephen&#34;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;Chbosky&#34;</span><span style="color:#f92672">)</span>
  <span style="color:#66d9ef">val</span> sagan<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">FullName</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">WithMiddleName</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Carl&#34;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;Edward&#34;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;Sagan&#34;</span><span style="color:#f92672">)</span>
  <span style="color:#66d9ef">val</span> aristotle<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">FullName</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">SingleName</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Aristotle&#34;</span><span style="color:#f92672">)</span>
<span style="color:#f92672">}</span>

</code></pre></div><p>I&rsquo;m definitely not the best at coming up with class names, but this point aside&hellip; All three instances are of the same type: <code>FullName</code> which is a Sum Type that can either be one of the three defined above.</p>
<p>We&rsquo;re not restricted to Either Sum or Product Types. Instead we can use both together to better model our domain. Here&rsquo;s our Book type better represented using the FullName Sum Type:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#66d9ef">final</span> <span style="color:#66d9ef">case</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Book</span><span style="color:#f92672">(</span>title<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">String</span><span style="color:#f92672">,</span> author<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">FullName</span><span style="color:#f92672">,</span> isbn<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Long</span><span style="color:#f92672">)</span>
</code></pre></div><p>The last one is known as a Hybrid type or a <code>Sum of Products</code> type.</p>
<h2 id="if-you-must-remember-two-things">If you must remember two things</h2>
<ul>
<li>ADTs are all about combining existing types to create new ones and better model our domain.</li>
<li>Sum Types combine types with the OR operator while Product Types do it with the AND operator.</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Reader Monads and Dependency Injection</title>
            <link>https://fares.codes/posts/reader-monads-and-dependency-injection/</link>
            <pubDate>Sun, 29 Nov 2020 20:37:00 +0100</pubDate>
            
            <guid>https://fares.codes/posts/reader-monads-and-dependency-injection/</guid>
            <description>After writing an article about the Writer Monad, it only seems fair that I write another one about the Reader Monad.
As with the Writer article, my main support will be the Scala with Cats Underscore Book freely available online.
I&amp;rsquo;ve also decided to put more effort into my examples and have them answer a real life problem. So in this articles&amp;rsquo; examples, I&amp;rsquo;ll attempt to answer a common life question: &amp;ldquo;Can I become friends with x person&amp;rdquo;.</description>
            <content type="html"><![CDATA[<p>After writing an article about the Writer Monad, it only seems fair that I write another one about the Reader Monad.</p>
<p>As with the Writer article, my main support will be the Scala with Cats Underscore Book freely available online.</p>
<p>I&rsquo;ve also decided to put more effort into my examples and have them answer a real life problem. So in this articles&rsquo; examples, I&rsquo;ll attempt to answer a common life question: &ldquo;Can I become friends with x person&rdquo;.</p>
<p>For this, we&rsquo;ll simplify our &ldquo;Person&rdquo; and consider that a <code>Person</code> is only a name, age and recommendedBooks.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#66d9ef">case</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Person</span><span style="color:#f92672">(</span>name<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">String</span><span style="color:#f92672">,</span> age<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Int</span><span style="color:#f92672">,</span> recommendedBooks<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">List</span><span style="color:#f92672">[</span><span style="color:#66d9ef">String</span><span style="color:#f92672">])</span>
</code></pre></div><p>But I&rsquo;m jumping the gun. Let&rsquo;s go back to reader Monads:</p>
<h2 id="what-is-it">What is it</h2>
<p>The reader monad allows us to sequence some operation that depend on the same external input (also called configuration).</p>
<h3 id="creating-readers">Creating Readers</h3>
<p>To create a reader, we can use the apply method and pass to it a function that takes our external configuration/input and returns something:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">  <span style="color:#66d9ef">import</span> cats.data.Reader
  <span style="color:#66d9ef">import</span> cats.implicits._

  <span style="color:#66d9ef">val</span> canBeFriend<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Person</span> <span style="color:#f92672">=&gt;</span> <span style="color:#a6e22e">Boolean</span> <span style="color:#66d9ef">=</span> <span style="color:#66d9ef">_</span><span style="color:#f92672">.</span>recommendedBooks contains <span style="color:#e6db74">&#34;Le Petit Prince&#34;</span>
  <span style="color:#66d9ef">val</span> reader<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Reader</span><span style="color:#f92672">[</span><span style="color:#66d9ef">Person</span>, <span style="color:#66d9ef">Boolean</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">Reader</span><span style="color:#f92672">(</span>canBeFriend<span style="color:#f92672">)</span>
</code></pre></div><p><code>canBeFriend</code> is a function that takes a Person and returns a Boolean. It checks if the person would normally recommend the book &ldquo;The Little Prince&rdquo; to others. Coz can we really be friends with someone who doesn&rsquo;t???</p>
<p><code>reader</code> is simply an apply. The type is a <code>Reader[Person, Boolean]</code>. So it&rsquo;s a <code>Reader</code> that takes in a Person and returns a Boolean.</p>
<p>You might also notice that reader is implemented as a <code>Kleisli</code> but well talk about that later. (You can also check out my article on Kleisli)</p>
<h2 id="why-are-they-better-than-a-raw-function">Why are they better than a raw function</h2>
<p>A valid question could be: Why are they useful? What is the difference between doing this and a simple raw function:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#66d9ef">def</span> canBeFriends<span style="color:#f92672">(</span>person<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Person</span><span style="color:#f92672">)</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Boolean</span> <span style="color:#f92672">=</span> person<span style="color:#f92672">.</span>recommendedBooks contains <span style="color:#e6db74">&#34;Le Petit Prince&#34;</span>
</code></pre></div><p>Put like that, there isn&rsquo;t and a raw function is simpler to use/read.</p>
<p>But is &ldquo;Le Petit Prince&rdquo; the only criteria for being friends with someone? After all it is the second most translated book in the world after the bible&hellip; So maybe filter some more people out?</p>
<p>In an attempt to simplify the modeling of whether or not two people click together, we will assume that I can click with any person who is above 21 years old, below 30 years old aaaand who would recommend the book: Le Petit Prince. (I&rsquo;m not that picky when it comes to friends).</p>
<p>We will also test this theory with 3 different people: myself, some random idiot who loves twilight and Eric an ok but slightly old person.</p>
<p>Our code might look like this:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">  <span style="color:#66d9ef">val</span> fares <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">Person</span><span style="color:#f92672">(</span>
    <span style="color:#e6db74">&#34;Fares&#34;</span><span style="color:#f92672">,</span>
    <span style="color:#ae81ff">24</span><span style="color:#f92672">,</span>
    <span style="color:#a6e22e">List</span><span style="color:#f92672">(</span>
      <span style="color:#e6db74">&#34;All The Light We Cannot See&#34;</span><span style="color:#f92672">,</span>
      <span style="color:#e6db74">&#34;The Catcher in the Rye&#34;</span><span style="color:#f92672">,</span>
      <span style="color:#e6db74">&#34;L&#39;√©tranger&#34;</span><span style="color:#f92672">,</span>
      <span style="color:#e6db74">&#34;Le Petit Prince&#34;</span><span style="color:#f92672">,</span>
      <span style="color:#e6db74">&#34;La Vie Devant Soi&#34;</span>
    <span style="color:#f92672">)</span>
  <span style="color:#f92672">)</span>
  <span style="color:#66d9ef">val</span> someIdiot <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">Person</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Random Human&#34;</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">16</span><span style="color:#f92672">,</span> <span style="color:#a6e22e">List</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Twilight&#34;</span><span style="color:#f92672">))</span>
  <span style="color:#66d9ef">val</span> okButOld <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">Person</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Eric&#34;</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">38</span><span style="color:#f92672">,</span> <span style="color:#a6e22e">List</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Le Petit Prince&#34;</span><span style="color:#f92672">))</span>

  <span style="color:#66d9ef">def</span> isOldEnough<span style="color:#f92672">(</span>person<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Person</span><span style="color:#f92672">)</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Boolean</span> <span style="color:#f92672">=</span>
    person<span style="color:#f92672">.</span>age <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">21</span>

  <span style="color:#66d9ef">def</span> isYoungEnough<span style="color:#f92672">(</span>person<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Person</span><span style="color:#f92672">)</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Boolean</span> <span style="color:#f92672">=</span>
    person<span style="color:#f92672">.</span>age <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">30</span>

  <span style="color:#66d9ef">def</span> okTasteInBooks<span style="color:#f92672">(</span>person<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Person</span><span style="color:#f92672">)</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Boolean</span> <span style="color:#f92672">=</span>
    person<span style="color:#f92672">.</span>recommendedBooks contains <span style="color:#e6db74">&#34;Le Petit Prince&#34;</span>

  <span style="color:#66d9ef">def</span> canWeBeFriends<span style="color:#f92672">(</span>person<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Person</span><span style="color:#f92672">)</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Boolean</span> <span style="color:#f92672">=</span>
    isOldEnough<span style="color:#f92672">(</span>person<span style="color:#f92672">)</span> <span style="color:#f92672">&amp;&amp;</span> isYoungEnough<span style="color:#f92672">(</span>person<span style="color:#f92672">)</span> <span style="color:#f92672">&amp;&amp;</span> okTasteInBooks<span style="color:#f92672">(</span>person<span style="color:#f92672">)</span>
</code></pre></div><p>aaand the fun part:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">  println<span style="color:#f92672">(</span>fares<span style="color:#f92672">.</span>name<span style="color:#f92672">,</span> fares<span style="color:#f92672">.</span>age<span style="color:#f92672">,</span> canWeBeFriends<span style="color:#f92672">(</span>fares<span style="color:#f92672">))</span>
  <span style="color:#75715e">// (Fares,24,true)
</span><span style="color:#75715e"></span>  println<span style="color:#f92672">(</span>someIdiot<span style="color:#f92672">.</span>name<span style="color:#f92672">,</span> someIdiot<span style="color:#f92672">.</span>age<span style="color:#f92672">,</span> canWeBeFriends<span style="color:#f92672">(</span>someIdiot<span style="color:#f92672">))</span>
  <span style="color:#75715e">// (Random Human,16,false) ==&gt; Shocker!
</span><span style="color:#75715e"></span>  println<span style="color:#f92672">(</span>okButOld<span style="color:#f92672">.</span>name<span style="color:#f92672">,</span> okButOld<span style="color:#f92672">.</span>age<span style="color:#f92672">,</span> canWeBeFriends<span style="color:#f92672">(</span>okButOld<span style="color:#f92672">))</span>
  <span style="color:#75715e">// (Eric,38,false)
</span></code></pre></div><p>It&rsquo;s not so bad but here are my couple concerns with the above implementation:</p>
<ul>
<li>It is not the easiest code to read. In our case, its a simple function but more complex ones might be even harder to understand.</li>
<li>We also need to pass the input parameter person through all the intermediary functions just so that they can be passed to our different functions. In addition, our <code>person</code> input to every single one of our functions.</li>
</ul>
<h3 id="how-can-we-do-better-with-reader">How can we do better with reader</h3>
<p>If we were to write the same code but this time using <code>Readers</code> it&rsquo;ll look something like this:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">  <span style="color:#66d9ef">val</span> fares <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">Person</span><span style="color:#f92672">(</span>
    <span style="color:#e6db74">&#34;Fares&#34;</span><span style="color:#f92672">,</span>
    <span style="color:#ae81ff">24</span><span style="color:#f92672">,</span>
    <span style="color:#a6e22e">List</span><span style="color:#f92672">(</span>
      <span style="color:#e6db74">&#34;All The Light We Cannot See&#34;</span><span style="color:#f92672">,</span>
      <span style="color:#e6db74">&#34;The Catcher in the Rye&#34;</span><span style="color:#f92672">,</span>
      <span style="color:#e6db74">&#34;L&#39;√©tranger&#34;</span><span style="color:#f92672">,</span>
      <span style="color:#e6db74">&#34;Le Petit Prince&#34;</span><span style="color:#f92672">,</span>
      <span style="color:#e6db74">&#34;La Vie Devant Soi&#34;</span>
    <span style="color:#f92672">)</span>
  <span style="color:#f92672">)</span>
  <span style="color:#66d9ef">val</span> someIdiot <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">Person</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Random Human&#34;</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">16</span><span style="color:#f92672">,</span> <span style="color:#a6e22e">List</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Twilight&#34;</span><span style="color:#f92672">))</span>
  <span style="color:#66d9ef">val</span> okButOld <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">Person</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Eric&#34;</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">38</span><span style="color:#f92672">,</span> <span style="color:#a6e22e">List</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Le Petit Prince&#34;</span><span style="color:#f92672">))</span>

  <span style="color:#66d9ef">val</span> isOldEnoughReader<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Reader</span><span style="color:#f92672">[</span><span style="color:#66d9ef">Person</span>, <span style="color:#66d9ef">Boolean</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">Reader</span><span style="color:#f92672">(</span><span style="color:#66d9ef">_</span><span style="color:#f92672">.</span>age <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">21</span><span style="color:#f92672">)</span>
  <span style="color:#66d9ef">val</span> isYoungEnoughReader<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Reader</span><span style="color:#f92672">[</span><span style="color:#66d9ef">Person</span>, <span style="color:#66d9ef">Boolean</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">Reader</span><span style="color:#f92672">(</span><span style="color:#66d9ef">_</span><span style="color:#f92672">.</span>age <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">30</span><span style="color:#f92672">)</span>

  <span style="color:#66d9ef">val</span> okTasteInBooks<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Person</span> <span style="color:#f92672">=&gt;</span> <span style="color:#a6e22e">Boolean</span> <span style="color:#66d9ef">=</span> <span style="color:#66d9ef">_</span><span style="color:#f92672">.</span>recommendedBooks contains <span style="color:#e6db74">&#34;Le Petit Prince&#34;</span>
  <span style="color:#66d9ef">val</span> okTasteInBooksReader<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Reader</span><span style="color:#f92672">[</span><span style="color:#66d9ef">Person</span>, <span style="color:#66d9ef">Boolean</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">Reader</span><span style="color:#f92672">(</span>okTasteInBooks<span style="color:#f92672">)</span>
</code></pre></div><p>In the above code, we&rsquo;ve defined our <code>Person</code>s instances and our <code>Reader[Person, Boolean]</code>. One for each validation we would like to have.</p>
<p>Then we can sequence the operations in a for comprehension:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">  <span style="color:#66d9ef">val</span> canWeBeFriends<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Kleisli</span><span style="color:#f92672">[</span><span style="color:#66d9ef">Id</span>, <span style="color:#66d9ef">Person</span>, <span style="color:#66d9ef">Boolean</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span> <span style="color:#66d9ef">for</span> <span style="color:#f92672">{</span>
    okTaste     <span style="color:#66d9ef">&lt;-</span> okTasteInBooksReader
    youngEnough <span style="color:#66d9ef">&lt;-</span> isYoungEnoughReader
    oldEnough   <span style="color:#66d9ef">&lt;-</span> isOldEnoughReader
  <span style="color:#f92672">}</span> <span style="color:#66d9ef">yield</span> okTaste <span style="color:#f92672">&amp;&amp;</span> youngEnough <span style="color:#f92672">&amp;&amp;</span> oldEnough
</code></pre></div><p>aaand again the fun part:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">  println<span style="color:#f92672">(</span>fares<span style="color:#f92672">.</span>name<span style="color:#f92672">,</span> fares<span style="color:#f92672">.</span>age<span style="color:#f92672">,</span> canWeBeFriends<span style="color:#f92672">.</span>run<span style="color:#f92672">(</span>fares<span style="color:#f92672">))</span>
  <span style="color:#75715e">// (Fares,24,true)
</span><span style="color:#75715e"></span>  println<span style="color:#f92672">(</span>someIdiot<span style="color:#f92672">.</span>name<span style="color:#f92672">,</span> someIdiot<span style="color:#f92672">.</span>age<span style="color:#f92672">,</span> canWeBeFriends<span style="color:#f92672">.</span>run<span style="color:#f92672">(</span>someIdiot<span style="color:#f92672">))</span>
  <span style="color:#75715e">// (Random Human,16,false) ==&gt; Shocker!
</span><span style="color:#75715e"></span>  println<span style="color:#f92672">(</span>okButOld<span style="color:#f92672">.</span>name<span style="color:#f92672">,</span> okButOld<span style="color:#f92672">.</span>age<span style="color:#f92672">,</span> canWeBeFriends<span style="color:#f92672">(</span>okButOld<span style="color:#f92672">))</span>
  <span style="color:#75715e">// (Eric,32,false)
</span></code></pre></div><p>Note: the apply <code>canWeBeFriends(someIdiot)</code> consists of calling the <code>run</code> function. So they&rsquo;re interchangeable.</p>
<p>With the reader implementation, we simply need to defined our readers and create the for-comprehension that will hold our business logic. We then simply have to call the result of the for comprehension with the specific input. This is also the reason why <code>Readers</code> are also used as dependency injection.</p>
<p>You might have also noticed that the result of the for-comprehension is a <code>Kleisli[Id, Person, Boolean]</code>. If you recall from my previous article, Kleisli allows for the composition of functions where the return type is monadic.</p>
<p>And how is the return type Monadic? Isn&rsquo;t it Boolean? if you look at any of the above applies of the reader, the return type will be an Id[Boolean], Where Id is a Monad.</p>
<p>I&rsquo;ll probably write an article on that but for now know that Id[A] and A can be used interchangeably.</p>
]]></content>
        </item>
        
        <item>
            <title>Writer Monads</title>
            <link>https://fares.codes/posts/writer-monads/</link>
            <pubDate>Sun, 04 Oct 2020 23:00:00 +0200</pubDate>
            
            <guid>https://fares.codes/posts/writer-monads/</guid>
            <description>This is actually one of the very first GitHub tickets I&amp;rsquo;ve opened. I tend read medium articles on my daily commute to work and I always see articles on the Writer Monad (along other monad instances I plan to write about). I did not use to read them because they&amp;rsquo;re topics I do not understand but I&amp;rsquo;ve been meaning to learn about them for a while now&amp;hellip; And so here is goes:</description>
            <content type="html"><![CDATA[<p>This is actually one of the very first GitHub tickets I&rsquo;ve opened. I tend read medium articles on my daily commute to work and I always see articles on the <code>Writer Monad</code> (along other monad instances I plan to write about). I did not use to read them because they&rsquo;re topics I do not understand but I&rsquo;ve been meaning to learn about them for a while now&hellip; And so here is goes:</p>
<p>Note that my main support for this article is the <a href="https://books.underscore.io/scala-with-cats/scala-with-cats.html#writer-monad">scala with cats book</a></p>
<p>The <code>Writer</code> monad is used to carry a log along a computation.</p>
<p>It&rsquo;s <code>Writer[A,B]</code> Where A represents what we&rsquo;d like to log and B is the computation. One thing worth noting is that the Writer DataType is actually a Type Alias:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#66d9ef">type</span> <span style="color:#66d9ef">Writer</span><span style="color:#f92672">[</span><span style="color:#66d9ef">L</span>, <span style="color:#66d9ef">V</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">WriterT</span><span style="color:#f92672">[</span><span style="color:#66d9ef">Id</span>, <span style="color:#66d9ef">L</span>, <span style="color:#66d9ef">V</span><span style="color:#f92672">]</span>
</code></pre></div><p>Before we go through an example here&rsquo;s a couple functions you should know:</p>
<p>To create a writer Monad:</p>
<ul>
<li>Create the Writer using both values with Apply:</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#66d9ef">val</span> x<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">WriterT</span><span style="color:#f92672">[</span><span style="color:#66d9ef">Id</span>, <span style="color:#66d9ef">String</span>, <span style="color:#66d9ef">Int</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">Writer</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;First Step&#34;</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">1</span><span style="color:#f92672">)</span>
</code></pre></div><p>or a more eye pleasing syntax:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#66d9ef">val</span> b <span style="color:#66d9ef">=</span> <span style="color:#ae81ff">42.</span>writer<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Result of something&#34;</span><span style="color:#f92672">)</span>
</code></pre></div><p>Both return a MonadTransformer WriterT. We can see later on how to extract the actual values.</p>
<ul>
<li>Create the Writer from the Left value:</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#66d9ef">val</span> res<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Writer</span><span style="color:#f92672">[</span><span style="color:#66d9ef">String</span>, <span style="color:#66d9ef">Unit</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span> <span style="color:#e6db74">&#34;Step&#34;</span><span style="color:#f92672">.</span>tell
</code></pre></div><ul>
<li>Create the Writer from the Right value</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#66d9ef">type</span> <span style="color:#66d9ef">Logged</span><span style="color:#f92672">[</span><span style="color:#66d9ef">A</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">Writer</span><span style="color:#f92672">[</span><span style="color:#66d9ef">String</span>, <span style="color:#66d9ef">A</span><span style="color:#f92672">]</span>
<span style="color:#66d9ef">val</span> t<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Logged</span><span style="color:#f92672">[</span><span style="color:#66d9ef">Int</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span> <span style="color:#ae81ff">2.</span>pure<span style="color:#f92672">[</span><span style="color:#66d9ef">Logged</span>
</code></pre></div><p>The reason we had to do that is because pure takes a <code>F[_]</code> so we had to fix the left value by creating a type alias. (Might one day write an article on type alias and type lambdas).</p>
<ul>
<li>Create a writer of Unit:</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#66d9ef">val</span> res<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Writer</span><span style="color:#f92672">[</span><span style="color:#66d9ef">String</span>, <span style="color:#66d9ef">Unit</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span> <span style="color:#e6db74">&#34;Step&#34;</span><span style="color:#f92672">.</span>tell
</code></pre></div><h2 id="extracting-values-from-writers">Extracting values from Writers</h2>
<ul>
<li>To extract the Right value:</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#66d9ef">val</span> b <span style="color:#66d9ef">=</span> <span style="color:#ae81ff">42.</span>writer<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Result of something&#34;</span><span style="color:#f92672">)</span>
<span style="color:#66d9ef">val</span> bResult<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Id</span><span style="color:#f92672">[</span><span style="color:#66d9ef">Int</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span> a<span style="color:#f92672">.</span>value
</code></pre></div><ul>
<li>To extract the Left value:</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#66d9ef">val</span> b <span style="color:#66d9ef">=</span> <span style="color:#ae81ff">42.</span>writer<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Result of something&#34;</span><span style="color:#f92672">)</span>
<span style="color:#66d9ef">val</span> bValue<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Id</span><span style="color:#f92672">[</span><span style="color:#66d9ef">String</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span> b<span style="color:#f92672">.</span>written
</code></pre></div><ul>
<li>To extract both into a tuple:</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#66d9ef">val</span> b <span style="color:#66d9ef">=</span> <span style="color:#ae81ff">42.</span>writer<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Result of something&#34;</span><span style="color:#f92672">)</span>
<span style="color:#66d9ef">val</span> bothResult<span style="color:#66d9ef">:</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">String</span><span style="color:#f92672">,</span> <span style="color:#66d9ef">Int</span><span style="color:#f92672">)</span> <span style="color:#66d9ef">=</span> b<span style="color:#f92672">.</span>run
</code></pre></div><h2 id="what-to-use-as-log-type">What to use as Log type</h2>
<p>In the previous example, we used String but it doesn&rsquo;t make much sense since ideally we&rsquo;d have multiple computations and would like to keep all the logs from each step. A good practice is to use a vector.</p>
<h3 id="why-a-vector">Why a Vector</h3>
<p>Given the need, you might be inclined to ask yourselves: <code>Why a vector and not a List</code> <em>(I know I did)</em>. The answer, it turns out, is because a vector is more efficient at append and concatenate operations.</p>
<h2 id="example">Example</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">  <span style="color:#66d9ef">type</span> <span style="color:#66d9ef">Logged</span><span style="color:#f92672">[</span><span style="color:#66d9ef">A</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">Writer</span><span style="color:#f92672">[</span><span style="color:#66d9ef">Vector</span><span style="color:#f92672">[</span><span style="color:#66d9ef">String</span><span style="color:#f92672">]</span>, <span style="color:#66d9ef">A</span><span style="color:#f92672">]</span>

  <span style="color:#66d9ef">val</span> writer1 <span style="color:#66d9ef">=</span> <span style="color:#66d9ef">for</span> <span style="color:#f92672">{</span>
    a <span style="color:#66d9ef">&lt;-</span> <span style="color:#ae81ff">10.</span>pure<span style="color:#f92672">[</span><span style="color:#66d9ef">Logged</span><span style="color:#f92672">]</span>
    <span style="color:#66d9ef">_</span> <span style="color:#66d9ef">&lt;-</span> <span style="color:#a6e22e">Vector</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Started off with 10&#34;</span><span style="color:#f92672">).</span>tell
    b <span style="color:#66d9ef">&lt;-</span> <span style="color:#ae81ff">32.</span>writer<span style="color:#f92672">(</span><span style="color:#a6e22e">Vector</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;New Writer with initial value: 32&#34;</span><span style="color:#f92672">))</span>
    <span style="color:#66d9ef">_</span> <span style="color:#66d9ef">&lt;-</span> <span style="color:#a6e22e">Vector</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Now Adding both Writers&#34;</span><span style="color:#f92672">).</span>tell
  <span style="color:#f92672">}</span> <span style="color:#66d9ef">yield</span> a <span style="color:#f92672">+</span> b

  println<span style="color:#f92672">(</span>writer1<span style="color:#f92672">)</span> <span style="color:#75715e">// WriterT((Vector(Started off with 10,
</span><span style="color:#75715e"></span>  <span style="color:#75715e">//New Writer with initial value: 32, Now Adding both Writers),42))
</span><span style="color:#75715e"></span>
</code></pre></div><p>Ok&hellip; So what just happened here:</p>
<p>We started off with a Writer(Vector(), 10)
Then in the second line of the for comprehension, we added our first log. <em>(note, we could have done both in the same statement)</em>.
Third line: We created a new Writer with an initial value of 32
Fourth line, we added to our second writer a log stating that we will add both writers.</p>
<p>The end result: All logs were appended to one another, and both values were added to one another.</p>
<h3 id="mapping-on-the-logs">Mapping on the logs</h3>
<p>Think of this as the equivalent of a left map, we have the possibility to map on the logs to transform them. The result will be a new Writer:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">  <span style="color:#66d9ef">val</span> writer2 <span style="color:#66d9ef">=</span> writer1<span style="color:#f92672">.</span>mapWritten<span style="color:#f92672">(</span><span style="color:#66d9ef">_</span><span style="color:#f92672">.</span>mkString<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;\n&#34;</span><span style="color:#f92672">))</span>
  println<span style="color:#f92672">(</span>writer2<span style="color:#f92672">)</span>
</code></pre></div><p>And the result:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">WriterT((Started off with 10
New Writer with initial value: 32
Now Adding both Writers,42))
</code></pre></div><p>To map on both values: either use the classical <code>bimap</code> or <code>mapBoth</code>. The differences are simply in the input parameters:</p>
<h4 id="bimap">bimap</h4>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#66d9ef">val</span> writer1a <span style="color:#66d9ef">=</span> writer2<span style="color:#f92672">.</span>bimap<span style="color:#f92672">(</span><span style="color:#66d9ef">_</span><span style="color:#f92672">.</span>toLowerCase<span style="color:#f92672">,</span> <span style="color:#66d9ef">_</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span><span style="color:#f92672">)</span>
println<span style="color:#f92672">(</span>writer1a<span style="color:#f92672">)</span>
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">WriterT((started off with 10
new writer with initial value: 32
now adding both writers,43))
</code></pre></div><h4 id="mapboth">mapBoth</h4>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">  <span style="color:#66d9ef">val</span> writer1b <span style="color:#66d9ef">=</span> writer2<span style="color:#f92672">.</span>mapBoth<span style="color:#f92672">((</span>str<span style="color:#f92672">,</span> i<span style="color:#f92672">)</span> <span style="color:#66d9ef">=&gt;</span> <span style="color:#f92672">(</span>str<span style="color:#f92672">.</span>toLowerCase<span style="color:#f92672">,</span> i <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span><span style="color:#f92672">))</span>
  println<span style="color:#f92672">(</span>writer1b<span style="color:#f92672">)</span>
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">WriterT((started off with 10
new writer with initial value: 32
now adding both writers,43))
</code></pre></div><p>Not much difference between both but it depends on how you want to use them or your preference.</p>
<h2 id="why-cant-we-just-append-to-a-file-or-a-var">Why can&rsquo;t we just append to a file or a var</h2>
<p>Appending the logs to a global variable or even a log file might sound like a good replacement for Writer monads but it has its limitations, specially when dealing with concurrency and failed computations.</p>
<p>If two actions are executed simultaneously, we might lose control over our log file/list. In addition, if a specific computation began its execution and logging and failed at some task, retrying the computation/task might be problematic and might complicate the handling of the logs.</p>
<p>Another issue (albeit not small) with having a global variable or a log file is that the code no longer remains pure, and code purity is something all functional programmers push for.</p>
<p>Having a pure function means the function can only interact with the arguments that are passed to it and cannot mutate some other state and cannot have side effects (like writing to a file).</p>
<h2 id="real-life-example">Real Life example</h2>
<p>As a kid I loved math, specially algebra. But I would always get marks off my exams and homework even if my final answer was correct. My teachers would always nag me to &ldquo;SHOW YOUR WORK&rdquo;.</p>
<p>In this example, we will attempt to solve for x while logging our work.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">  <span style="color:#66d9ef">val</span> initialExpression <span style="color:#66d9ef">=</span> <span style="color:#e6db74">&#34;(x-1)(x-2)(x-3)=0&#34;</span>

  <span style="color:#66d9ef">val</span> solver <span style="color:#66d9ef">=</span> <span style="color:#66d9ef">for</span> <span style="color:#f92672">{</span>
    <span style="color:#66d9ef">_</span> <span style="color:#66d9ef">&lt;-</span> <span style="color:#ae81ff">0.</span>writer<span style="color:#f92672">(</span><span style="color:#a6e22e">Vector</span><span style="color:#f92672">(</span><span style="color:#e6db74">s&#34;initial equation: </span><span style="color:#e6db74">$initialExpression</span><span style="color:#e6db74">&#34;</span><span style="color:#f92672">))</span>
    <span style="color:#66d9ef">_</span> <span style="color:#66d9ef">&lt;-</span> <span style="color:#a6e22e">Vector</span><span style="color:#f92672">(</span>
      <span style="color:#e6db74">&#34;The answer is x=1, x=2,x=3 but yall want me to &#34;</span> <span style="color:#f92672">+</span>
      <span style="color:#e6db74">&#34;show my work so here it goes:&#34;</span>
    <span style="color:#f92672">).</span>tell
    <span style="color:#66d9ef">_</span> <span style="color:#66d9ef">&lt;-</span> <span style="color:#a6e22e">Vector</span><span style="color:#f92672">(</span>
      <span style="color:#e6db74">&#34;There is a value for x that satisfies this &#34;</span> <span style="color:#f92672">+</span>
      <span style="color:#e6db74">&#34;equation for (x-1)=0, (x-2)=0 and (x-3)=0&#34;</span>
    <span style="color:#f92672">).</span>tell
    res1 <span style="color:#66d9ef">&lt;-</span> <span style="color:#ae81ff">1.</span>writer<span style="color:#f92672">(</span><span style="color:#a6e22e">Vector</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;(x-1)=0 so x=1&#34;</span><span style="color:#f92672">))</span>
    res2 <span style="color:#66d9ef">&lt;-</span> <span style="color:#ae81ff">2.</span>writer<span style="color:#f92672">(</span><span style="color:#a6e22e">Vector</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;(x-2)=0 so x=2&#34;</span><span style="color:#f92672">))</span>
    res3 <span style="color:#66d9ef">&lt;-</span> <span style="color:#ae81ff">3.</span>writer<span style="color:#f92672">(</span><span style="color:#a6e22e">Vector</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;(x-3)=0 so x=3&#34;</span><span style="color:#f92672">))</span>
    <span style="color:#66d9ef">_</span>    <span style="color:#66d9ef">&lt;-</span> <span style="color:#a6e22e">Vector</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;roots of x: &#34;</span><span style="color:#f92672">).</span>tell
  <span style="color:#f92672">}</span> <span style="color:#66d9ef">yield</span> <span style="color:#f92672">(</span>res1<span style="color:#f92672">,</span> res2<span style="color:#f92672">,</span> res3<span style="color:#f92672">)</span>

  <span style="color:#66d9ef">val</span> res <span style="color:#66d9ef">=</span> solver<span style="color:#f92672">.</span>mapWritten<span style="color:#f92672">(</span><span style="color:#66d9ef">_</span><span style="color:#f92672">.</span>mkString<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;\n&#34;</span><span style="color:#f92672">)).</span>run
  print<span style="color:#f92672">(</span>res<span style="color:#f92672">.</span>_1<span style="color:#f92672">)</span>
  println<span style="color:#f92672">(</span>res<span style="color:#f92672">.</span>_2<span style="color:#f92672">)</span>
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">initial equation: (x-1)(x-2)(x-3)=0
The answer is x=1, x=2,x=3 but yall want me to show my work so here it goes:
There is a value for x that satisfies this equation for:
     (x-1)=0, (x-2)=0 and (x-3)=0
(x-1)=0 so x=1
(x-2)=0 so x=2
(x-3)=0 so x=3
roots of x: (1,2,3)
</code></pre></div><p>Yes I am a vindictive and vengeful person üôÑ</p>
<h2 id="drawbacks">Drawbacks</h2>
<ol>
<li>
<p>The logs are not directly written, instead they are written at the end of the computation. This doesn&rsquo;t really show in our case because the computations are simple (0, 1, 2 etc&hellip;) but in the case where they were complex functions, the log would only be appended at the end of each function execution. For that reason, using timestamps in the logs is not a good idea.</p>
</li>
<li>
<p>If one step fails, the entire computation is lost and the logs along with them.</p>
</li>
</ol>
]]></content>
        </item>
        
        <item>
            <title>Cats MonadError</title>
            <link>https://fares.codes/posts/cats-monaderror/</link>
            <pubDate>Fri, 25 Sep 2020 06:20:00 +0200</pubDate>
            
            <guid>https://fares.codes/posts/cats-monaderror/</guid>
            <description>I&amp;rsquo;ve been mostly focusing on Python for the past couple weeks so I&amp;rsquo;ll attempt to balance things out by prioritizing a couple Scala articles&amp;hellip;
I&amp;rsquo;ve also come to realize that I have not been following the methodology that has inspired this blog in the first place. In this article, I&amp;rsquo;ll attempt to constantly answer the question &amp;ldquo;why&amp;rdquo; and in doing so hopefully strengthen my grasp of the subject . And so for all my readers, the both of you might notice a change in format üòù.</description>
            <content type="html"><![CDATA[<p>I&rsquo;ve been mostly focusing on Python for the past couple weeks so I&rsquo;ll attempt to balance things out by prioritizing a couple Scala articles&hellip;</p>
<p>I&rsquo;ve also come to realize that I have not been following the methodology that has inspired this blog in the first place. In this article, I&rsquo;ll attempt to constantly answer the question &ldquo;why&rdquo; and in doing so hopefully strengthen my grasp of the subject . And so for all my readers, the both of you might notice a change in format üòù.</p>
<h2 id="monaderrors-what-are-they">MonadErrors What are they</h2>
<p><code>MonadErrors</code> are an abstraction over <code>Either</code>-like data types.</p>
<h3 id="why-are-they-useful">Why are they useful</h3>
<p>This abstraction is useful if you&rsquo;re working with both <code>Either</code> and <code>Try</code> and would like your function to return a value independently of the context it&rsquo;s in.</p>
<p>More concretely, assume you have a function <code>sayHello</code> that can return an exception. Depending on where you&rsquo;re calling this function, you would like it to either return an <code>Either[Throwable, String]</code> or a <code>Try[String]</code> (or something else&hellip;).</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#66d9ef">import</span> scala.language.higherKinds
<span style="color:#66d9ef">import</span> cats.MonadError
<span style="color:#66d9ef">import</span> scala.util.Try

<span style="color:#66d9ef">def</span> sayHello<span style="color:#f92672">[</span><span style="color:#66d9ef">F</span><span style="color:#f92672">[</span><span style="color:#66d9ef">_</span><span style="color:#f92672">]](</span>value<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">String</span><span style="color:#f92672">)(</span><span style="color:#66d9ef">implicit</span> me<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">MonadError</span><span style="color:#f92672">[</span><span style="color:#66d9ef">F</span>, <span style="color:#66d9ef">Throwable</span><span style="color:#f92672">])</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">F</span><span style="color:#f92672">[</span><span style="color:#66d9ef">String</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span> <span style="color:#f92672">{</span>
    me<span style="color:#f92672">.</span>catchNonFatal<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Hello &#34;</span><span style="color:#f92672">+</span> value<span style="color:#f92672">)</span>
<span style="color:#f92672">}</span>

<span style="color:#66d9ef">val</span> x<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Try</span><span style="color:#f92672">[</span><span style="color:#66d9ef">String</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span> <span style="color:#f92672">{</span>
  <span style="color:#66d9ef">import</span> cats.instances.try_._
  sayHello<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Fares&#34;</span><span style="color:#f92672">)</span>  <span style="color:#75715e">// Success(Hello Fares)
</span><span style="color:#75715e"></span><span style="color:#f92672">}</span>
println<span style="color:#f92672">(</span>x<span style="color:#f92672">)</span>

<span style="color:#66d9ef">val</span> y<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Either</span><span style="color:#f92672">[</span><span style="color:#66d9ef">Throwable</span>, <span style="color:#66d9ef">String</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span> <span style="color:#f92672">{</span>
  <span style="color:#66d9ef">import</span> cats.instances.either._
  sayHello<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Emily&#34;</span><span style="color:#f92672">)</span>
<span style="color:#f92672">}</span>
println<span style="color:#f92672">(</span>y<span style="color:#f92672">)</span>  <span style="color:#75715e">// Right(Hello Emily)
</span></code></pre></div><p>In each case, the function <code>sayHello</code> is returning the result in a different <code>F</code> context. This is because whe specified that the return type is an <code>F[_]</code> and not a specific Monad.</p>
<h4 id="why-does-it-work">Why does it work</h4>
<p>MonadError has the following definition:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#66d9ef">trait</span> <span style="color:#a6e22e">MonadError</span><span style="color:#f92672">[</span><span style="color:#66d9ef">F</span><span style="color:#f92672">[</span><span style="color:#66d9ef">_</span><span style="color:#f92672">]</span>, <span style="color:#66d9ef">E</span><span style="color:#f92672">]</span> <span style="color:#a6e22e">extends</span> <span style="color:#a6e22e">ApplicativeError</span><span style="color:#f92672">[</span><span style="color:#66d9ef">F</span>, <span style="color:#66d9ef">E</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">with</span> <span style="color:#a6e22e">Monad</span><span style="color:#f92672">[</span><span style="color:#66d9ef">F</span><span style="color:#f92672">]</span> <span style="color:#f92672">{</span>

  <span style="color:#66d9ef">def</span> ensure<span style="color:#f92672">[</span><span style="color:#66d9ef">A</span><span style="color:#f92672">](</span>fa<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">F</span><span style="color:#f92672">[</span><span style="color:#66d9ef">A</span><span style="color:#f92672">])(</span>error<span style="color:#66d9ef">:</span> <span style="color:#f92672">=&gt;</span> E<span style="color:#f92672">)(</span>predicate<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">A</span> <span style="color:#f92672">=&gt;</span> <span style="color:#a6e22e">Boolean</span><span style="color:#f92672">)</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">F</span><span style="color:#f92672">[</span><span style="color:#66d9ef">A</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span>
    flatMap<span style="color:#f92672">(</span>fa<span style="color:#f92672">)(</span>a <span style="color:#66d9ef">=&gt;</span> <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>predicate<span style="color:#f92672">(</span>a<span style="color:#f92672">))</span> pure<span style="color:#f92672">(</span>a<span style="color:#f92672">)</span> <span style="color:#66d9ef">else</span> raiseError<span style="color:#f92672">(</span>error<span style="color:#f92672">))</span>

<span style="color:#f92672">}</span>
</code></pre></div><p>This also depends of the version of cats you&rsquo;re using. More recent versions also include: <code>ensureOr</code>, <code>adaptError</code>, <code>rethrow</code> as well as everything coming from <code>ApplicativeError[F[_], E]</code> and <code>Applicative[F]</code>.
MonadError takes two type parameters:</p>
<ul>
<li><code>F</code>: The type of the Monad</li>
<li><code>E</code>: The error that will be within the <code>F</code> i.e: <code>Throwable</code></li>
</ul>
<p>So when we say: <code>Either[Throwable, String]</code>, the <code>F</code> is the <code>Either</code> context and the <code>E</code> is the <code>Throwable</code>.</p>
<h5 id="what-are-the-helper-functions-useful-for">What are the helper functions useful for</h5>
<p>I won&rsquo;t go through all of them, but here are some examples of the functions defined in the <code>MonadError</code> trait:</p>
<ul>
<li><code>Ensure</code>: Ensure allows us to turn a successful value into an error if it does not satisfy the predicate.</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">  <span style="color:#66d9ef">import</span> cats.syntax.either._

  <span style="color:#66d9ef">val</span> fares<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Either</span><span style="color:#f92672">[</span><span style="color:#66d9ef">Throwable</span>, <span style="color:#66d9ef">String</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">Right</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Fares&#34;</span><span style="color:#f92672">)</span>
  <span style="color:#66d9ef">val</span> emily<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Either</span><span style="color:#f92672">[</span><span style="color:#66d9ef">Throwable</span>, <span style="color:#66d9ef">String</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">Right</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Emily&#34;</span><span style="color:#f92672">)</span>

  <span style="color:#66d9ef">def</span> isFares<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">String</span> <span style="color:#f92672">=&gt;</span> <span style="color:#a6e22e">Boolean</span> <span style="color:#66d9ef">=</span> <span style="color:#66d9ef">_</span> <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;Fares&#34;</span>

  <span style="color:#66d9ef">val</span> res1 <span style="color:#66d9ef">=</span> fares<span style="color:#f92672">.</span>ensure<span style="color:#f92672">(</span><span style="color:#66d9ef">new</span> <span style="color:#a6e22e">Exception</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Not Fares&#34;</span><span style="color:#f92672">))(</span>isFares<span style="color:#f92672">)</span>
  <span style="color:#66d9ef">val</span> res2<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Either</span><span style="color:#f92672">[</span><span style="color:#66d9ef">Throwable</span>, <span style="color:#66d9ef">String</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span> emily<span style="color:#f92672">.</span>ensure<span style="color:#f92672">(</span><span style="color:#66d9ef">new</span> <span style="color:#a6e22e">Exception</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Not Fares&#34;</span><span style="color:#f92672">))(</span>isFares<span style="color:#f92672">)</span>

  println<span style="color:#f92672">(</span>res1<span style="color:#f92672">)</span> <span style="color:#75715e">// Right(Fares)
</span><span style="color:#75715e"></span>  println<span style="color:#f92672">(</span>res2<span style="color:#f92672">)</span> <span style="color:#75715e">// Left(java.lang.Exception: Not Fares)
</span></code></pre></div><ul>
<li><code>ensureOr</code>: Definition:</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"> <span style="color:#66d9ef">def</span> ensureOr<span style="color:#f92672">[</span><span style="color:#66d9ef">A</span><span style="color:#f92672">](</span>fa<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">F</span><span style="color:#f92672">[</span><span style="color:#66d9ef">A</span><span style="color:#f92672">])(</span>error<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">A</span> <span style="color:#f92672">=&gt;</span> E<span style="color:#f92672">)(</span>predicate<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">A</span> <span style="color:#f92672">=&gt;</span> <span style="color:#a6e22e">Boolean</span><span style="color:#f92672">)</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">F</span><span style="color:#f92672">[</span><span style="color:#66d9ef">A</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span>
    flatMap<span style="color:#f92672">(</span>fa<span style="color:#f92672">)(</span>a <span style="color:#66d9ef">=&gt;</span> <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>predicate<span style="color:#f92672">(</span>a<span style="color:#f92672">))</span> pure<span style="color:#f92672">(</span>a<span style="color:#f92672">)</span> <span style="color:#66d9ef">else</span> raiseError<span style="color:#f92672">(</span>error<span style="color:#f92672">(</span>a<span style="color:#f92672">)))</span>
</code></pre></div><p>Pretty similar to <code>ensure</code> but instead of error being <code>error: =&gt; E</code> it&rsquo;s: <code>error: A =&gt; B</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">  <span style="color:#66d9ef">def</span> toError<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">String</span> <span style="color:#f92672">=&gt;</span> <span style="color:#a6e22e">Throwable</span> <span style="color:#66d9ef">=</span> str <span style="color:#66d9ef">=&gt;</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">Exception</span><span style="color:#f92672">(</span><span style="color:#e6db74">s&#34;</span><span style="color:#e6db74">$str</span><span style="color:#e6db74"> is not Fares&#34;</span><span style="color:#f92672">)</span>
  <span style="color:#66d9ef">val</span> res1 <span style="color:#66d9ef">=</span> fares<span style="color:#f92672">.</span>ensureOr<span style="color:#f92672">(</span>toError<span style="color:#f92672">)(</span>isFares<span style="color:#f92672">)</span>
  <span style="color:#66d9ef">val</span> res2 <span style="color:#66d9ef">=</span> emily<span style="color:#f92672">.</span>ensureOr<span style="color:#f92672">(</span>toError<span style="color:#f92672">)(</span>isFares<span style="color:#f92672">)</span>

  println<span style="color:#f92672">(</span>res1<span style="color:#f92672">)</span> <span style="color:#75715e">// Right(Fares)
</span><span style="color:#75715e"></span>  println<span style="color:#f92672">(</span>res2<span style="color:#f92672">)</span> <span style="color:#75715e">// Left(java.lang.Exception: Emily is not Fares)
</span></code></pre></div><ul>
<li><code>adaptError</code>: Transforms the error into something else and then rethrow it.</li>
</ul>
<p>Definition:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">  <span style="color:#66d9ef">def</span> adaptError<span style="color:#f92672">[</span><span style="color:#66d9ef">A</span><span style="color:#f92672">](</span>fa<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">F</span><span style="color:#f92672">[</span><span style="color:#66d9ef">A</span><span style="color:#f92672">])(</span>pf<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">PartialFunction</span><span style="color:#f92672">[</span><span style="color:#66d9ef">E</span>, <span style="color:#66d9ef">E</span><span style="color:#f92672">])</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">F</span><span style="color:#f92672">[</span><span style="color:#66d9ef">A</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span>
    recoverWith<span style="color:#f92672">(</span>fa<span style="color:#f92672">)(</span>pf<span style="color:#f92672">.</span>andThen<span style="color:#f92672">(</span>raiseError<span style="color:#f92672">[</span><span style="color:#66d9ef">A</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">_</span><span style="color:#f92672">))</span>
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">  <span style="color:#66d9ef">def</span> partialFunction<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">PartialFunction</span><span style="color:#f92672">[</span><span style="color:#66d9ef">Exception</span>, <span style="color:#66d9ef">Exception</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span> <span style="color:#f92672">{</span>
    <span style="color:#66d9ef">case</span> a<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Exception</span> <span style="color:#f92672">=&gt;</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">RuntimeException</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Encountered An Error&#34;</span><span style="color:#f92672">)</span>
  <span style="color:#f92672">}</span>

  <span style="color:#66d9ef">val</span> x<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Either</span><span style="color:#f92672">[</span><span style="color:#66d9ef">Exception</span>, <span style="color:#66d9ef">String</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span> <span style="color:#e6db74">&#34;Fares&#34;</span><span style="color:#f92672">.</span>asRight<span style="color:#f92672">[</span><span style="color:#66d9ef">Exception</span><span style="color:#f92672">].</span>adaptError<span style="color:#f92672">(</span>partialFunction<span style="color:#f92672">)</span>
  <span style="color:#66d9ef">val</span> y<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Either</span><span style="color:#f92672">[</span><span style="color:#66d9ef">Exception</span>, <span style="color:#66d9ef">String</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">Exception</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Not Fares&#34;</span><span style="color:#f92672">).</span>asLeft<span style="color:#f92672">[</span><span style="color:#66d9ef">String</span><span style="color:#f92672">].</span>adaptError<span style="color:#f92672">(</span>partialFunction<span style="color:#f92672">)</span>
  <span style="color:#66d9ef">val</span> z<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Either</span><span style="color:#f92672">[</span><span style="color:#66d9ef">Exception</span>, <span style="color:#66d9ef">String</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">Exception</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Some error&#34;</span><span style="color:#f92672">).</span>asLeft<span style="color:#f92672">[</span><span style="color:#66d9ef">String</span><span style="color:#f92672">].</span>adaptError<span style="color:#f92672">(</span>partialFunction<span style="color:#f92672">)</span>

  println<span style="color:#f92672">(</span>x<span style="color:#f92672">)</span>    <span style="color:#75715e">// Right(Fares)
</span><span style="color:#75715e"></span>  println<span style="color:#f92672">(</span>y<span style="color:#f92672">)</span>    <span style="color:#75715e">// Left(java.lang.RuntimeException: Encountered An Error)
</span><span style="color:#75715e"></span>  println<span style="color:#f92672">(</span>z<span style="color:#f92672">)</span>    <span style="color:#75715e">// Left(java.lang.RuntimeException: Encountered An Error)
</span></code></pre></div><p>Not the most ingenious example, but does the trick.</p>
<p>One limiting thing: the definition of adaptError states <code>[E,E]</code> which means that we can not freely adapt the errors to a different type!</p>
<ul>
<li><code>rethrow</code>: Handles values by potentially turning them into Errors. Takes a <code>F[Either[EE, A]]</code> if the outer value is an Error like, the result is an error. If its a Success like value then we check in Either, if it&rsquo;s a left, the result is an error otherwise its a success.</li>
</ul>
<p>Definition:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#66d9ef">def</span> rethrow<span style="color:#f92672">[</span><span style="color:#66d9ef">A</span>, <span style="color:#66d9ef">EE</span> <span style="color:#66d9ef">&lt;:</span> <span style="color:#66d9ef">E</span><span style="color:#f92672">](</span>fa<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">F</span><span style="color:#f92672">[</span><span style="color:#66d9ef">Either</span><span style="color:#f92672">[</span><span style="color:#66d9ef">EE</span>, <span style="color:#66d9ef">A</span><span style="color:#f92672">]])</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">F</span><span style="color:#f92672">[</span><span style="color:#66d9ef">A</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span>
    flatMap<span style="color:#f92672">(</span>fa<span style="color:#f92672">)(</span><span style="color:#66d9ef">_</span><span style="color:#f92672">.</span>fold<span style="color:#f92672">(</span>raiseError<span style="color:#f92672">,</span> pure<span style="color:#f92672">))</span>
</code></pre></div><p>Examples:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">  <span style="color:#66d9ef">val</span> a<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Try</span><span style="color:#f92672">[</span><span style="color:#66d9ef">Either</span><span style="color:#f92672">[</span><span style="color:#66d9ef">Throwable</span>, <span style="color:#66d9ef">String</span><span style="color:#f92672">]]</span> <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">Success</span><span style="color:#f92672">(</span><span style="color:#a6e22e">Left</span><span style="color:#f92672">(</span><span style="color:#66d9ef">new</span> java<span style="color:#f92672">.</span>lang<span style="color:#f92672">.</span><span style="color:#a6e22e">Exception</span><span style="color:#f92672">))</span>
  a<span style="color:#f92672">.</span>rethrow <span style="color:#75715e">// Failure(java.lang.Exception)
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">val</span> b<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Try</span><span style="color:#f92672">[</span><span style="color:#66d9ef">Either</span><span style="color:#f92672">[</span><span style="color:#66d9ef">Throwable</span>, <span style="color:#66d9ef">String</span><span style="color:#f92672">]]</span> <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">Success</span><span style="color:#f92672">(</span><span style="color:#a6e22e">Right</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Fares&#34;</span><span style="color:#f92672">))</span>
  b<span style="color:#f92672">.</span>rethrow <span style="color:#75715e">// Success(Fares)
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">val</span> c<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Try</span><span style="color:#f92672">[</span><span style="color:#66d9ef">Either</span><span style="color:#f92672">[</span><span style="color:#66d9ef">Throwable</span>, <span style="color:#66d9ef">String</span><span style="color:#f92672">]]</span> <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">Failure</span><span style="color:#f92672">(</span><span style="color:#66d9ef">new</span> java<span style="color:#f92672">.</span>lang<span style="color:#f92672">.</span><span style="color:#a6e22e">Exception</span><span style="color:#f92672">)</span>
  c<span style="color:#f92672">.</span>rethrow <span style="color:#75715e">// Failure(java.lang.Exception)
</span></code></pre></div><h3 id="what-are-some-instances-of-monaderror">What are some Instances of MonadError</h3>
<p>Cats provides instances for <code>MonadError</code> for multiple data types like: <code>Either</code>, <code>Future</code>, <code>Try</code></p>
<p>Either can be used with any error on the left, but Future and Try have to have a Throwable on the Left.</p>
]]></content>
        </item>
        
        <item>
            <title>Monkey Patching in Python</title>
            <link>https://fares.codes/posts/monkey-patching-in-python/</link>
            <pubDate>Mon, 21 Sep 2020 06:20:00 +0200</pubDate>
            
            <guid>https://fares.codes/posts/monkey-patching-in-python/</guid>
            <description>Asides from giving you the ability to say the words &amp;ldquo;Monkey Patch&amp;rdquo; out loud in your office, monkey patching can be a useful tool when working with external libraries. It can also be the reason why all the developers who will work on the product after you will come loath you&amp;hellip; More on that in a bit.
For some additional clarifications, the concept is something I recently learned from someone I work with and the examples closely resemble his own&amp;hellip; The reason I&amp;rsquo;m recopying them can be summarized in the following french quote: &amp;ldquo;Le savant reste ignorant de ce qu‚Äôil a appris tant qu‚Äôil ne l‚Äôa pas mis en pratique&amp;rdquo; - Unknown.</description>
            <content type="html"><![CDATA[<p>Asides from giving you the ability to say the words &ldquo;Monkey Patch&rdquo; out loud in your office, monkey patching can be a useful tool when working with external libraries. It can also be the reason why all the developers who will work on the product after you will come loath you&hellip; More on that in a bit.</p>
<p>For some additional clarifications, the concept is something I recently learned from someone I work with and the examples closely resemble his own&hellip; The reason I&rsquo;m recopying them can be summarized in the following french quote: &ldquo;Le savant reste ignorant de ce qu‚Äôil a appris tant qu‚Äôil ne l‚Äôa pas mis en pratique&rdquo; - Unknown. (though in no way shape or form do I think of myself as a savant üôÑ)</p>
<h2 id="what-is-monkey-patching">What is Monkey Patching</h2>
<p>Monkey patching is Python&rsquo;s ability to dynamically apply a modification (at runtime) to a class or even a module.</p>
<p>What does that mean and how is it useful?</p>
<p>Let us look at a simple example:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Cat</span>:
    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">say_hi</span>(self):
        <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;Meow&#34;</span>)


Cat()<span style="color:#f92672">.</span>say_hi()   <span style="color:#75715e">## Meow</span>
</code></pre></div><p>The above code behaves as expected&hellip; But what if we wanted to change the behavior of the class <code>Cat</code> by modifying the greeting function?</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">
<span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Cat</span>:
    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">say_hi</span>(self):
        <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;Meow&#34;</span>)

Cat()<span style="color:#f92672">.</span>say_hi()          <span style="color:#75715e">## Meow</span>

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">say_hello</span>(self):
    <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;Woof&#34;</span>)

Cat<span style="color:#f92672">.</span>say_hi <span style="color:#f92672">=</span> say_hello
Cat()<span style="color:#f92672">.</span>say_hi()          <span style="color:#75715e">## Woof</span>

</code></pre></div><p>From now on, any cat will say <code>Woof</code> instead of <code>Meow</code></p>
<h3 id="when-is-it-useful">When Is It Useful</h3>
<p>Monkey Patching can be useful when working with a third party library and where we do not have control over the source code. Possible situation: in my python module, I import the library: <code>my_lib</code> who has a <code>say_hello</code> function that I wish to modify. Except the library and therefore the function are not directly accessible and I do not have control over the implementation.</p>
<h2 id="different-scopes-of-monkey-patching">Different scopes of Monkey Patching</h2>
<p>FARES: TODO talk about local affecting one instance and global, affecting all Cat (unless previously patched at instance level).</p>
<p>There are different types of Monkey Patching, each affecting a different scope.</p>
<ul>
<li>Instance level monkey patch:</li>
</ul>
<p>In instance level patching, only the instance will behave differently, the rest of the instances will remain the same.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Cat</span>:
    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">say_hi</span>(self):
        <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;Meow&#34;</span>)

cat1 <span style="color:#f92672">=</span> Cat()
cat1<span style="color:#f92672">.</span>say_hi()               <span style="color:#75715e"># Meow</span>

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">say_hello</span>():
    <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;Modified Meow&#34;</span>)

cat1<span style="color:#f92672">.</span>say_hi <span style="color:#f92672">=</span> say_hello

cat1<span style="color:#f92672">.</span>say_hi()               <span style="color:#75715e"># Modified Meow</span>
cat2 <span style="color:#f92672">=</span> Cat()
cat2<span style="color:#f92672">.</span>say_hi()               <span style="color:#75715e"># Meow</span>

</code></pre></div><ul>
<li>Global Patching:</li>
</ul>
<p>Global patching is the same as the first example we&rsquo;ve seen. In that case all the instances of <code>Cat</code> will be modified, <strong>except those that have been patched at an instance level.</strong></p>
<h2 id="to-monkey-patch-or-not-to-monkey-patch">To Monkey Patch or Not to Monkey Patch</h2>
<p>Beware when monkey patching, if any other piece of code calls the function you&rsquo;re patching, it will (depending on the patching scope) also receive a piece of the modified code.</p>
<p>In my opinion, monkey patching is an evil hack and should be avoided when possible. It makes the code a lot harder to read and for large projects, almost impossible to debug multiple years down the road&hellip;</p>
<p>I can imagine a scenario where the documentation of the library says one thing but the reality is completely unrelated&hellip; I would also imagine that the debugging process will not be fun.</p>
<p>Some additional issues: If two modules monkey patch the same function, one of them will get canceled out (the one that ran first). It can also lead to upgrade problems.</p>
<p>But to play the devils advocate, this evil might be necessary in some cases to fix existing bugs in the external library without having to fork the entire library and adding another deps to your own project.</p>
<p>Monkey Patching could also be very handy when it comes to testing. Where for example we might bypass a connection to some database etc&hellip;</p>
<h2 id="if-you-must-remember-three-things">If You Must Remember Three Things</h2>
<ol>
<li>Monkey Patching is modifying a variable or a functions&rsquo; behavior at runtime.</li>
<li>We can either monkey patch an instance or the entire Class and all its instances.</li>
<li>It is an evil hack that if used without caution can lead to confusion and additional bugs.</li>
</ol>
]]></content>
        </item>
        
        <item>
            <title>Resolving Circular Dependencies Due to Type Hinting</title>
            <link>https://fares.codes/posts/resolving-circular-dependencies-due-to-type-hinting/</link>
            <pubDate>Sun, 13 Sep 2020 14:08:00 +0200</pubDate>
            
            <guid>https://fares.codes/posts/resolving-circular-dependencies-due-to-type-hinting/</guid>
            <description>In a previous article, I&amp;rsquo;ve talked about type hinting and its usefulness. However I recently realized that while using typing and defining custom types, one can easily find oneself in a circular dependency loop.
Here&amp;rsquo;s a case scenario:
root | custom_types.py my_function.py custom_types is the module in which we define all custom types used in my_function.py
my_function is the module in which we define all functions.
So it&amp;rsquo;s clear that my_function will depend on our custom_types.</description>
            <content type="html"><![CDATA[<p>In a previous article, I&rsquo;ve talked about type hinting and its usefulness. However I recently realized that while using typing and defining custom types, one can easily find oneself in a circular dependency loop.</p>
<p>Here&rsquo;s a case scenario:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">root
  |
  custom_types.py
  my_function.py

</code></pre></div><p>custom_types is the module in which we define all custom types used in my_function.py</p>
<p>my_function is the module in which we define all functions.</p>
<p>So it&rsquo;s clear that my_function will depend on our custom_types. But what if, in our custom_types, the value of a field is the result of a function call. A function defined in my_function.</p>
<p>Then we&rsquo;d run into a circular dependency problem since custom_types imports my_function and my_function imports custom_types.</p>
<p>In general, there are no simple ways to deal with circular dependency problems and in most cases the solution is to re-write the function itself, or even re-organize the code. In our case, we could move that function to the custom_types module as a private function.</p>
<p>But for circular dep problems due to type hints, the typing library offers a simpler solution: a flag.</p>
<p>the flag <code>TYPE_CHECKING</code> is by default set to false, and static type checkers set this value to true.</p>
<p>With this we could reorganize our imports in python to avoid a circular dependency since type hints are only on compile type and not in runtime. So in runtime, we do not need to have a dependency on our custom type classes.</p>
<p>example:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">
<span style="color:#f92672">from</span> module_a <span style="color:#f92672">import</span> a
<span style="color:#f92672">from</span> module_b <span style="color:#f92672">import</span> b

<span style="color:#66d9ef">if</span>(TYPE_CHECKING):
    <span style="color:#f92672">from</span> my_function <span style="color:#f92672">import</span> x
    <span style="color:#f92672">from</span> my_function <span style="color:#f92672">import</span> y
    <span style="color:#f92672">from</span> my_function <span style="color:#f92672">import</span> z

</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Keyword and Positional Only Arguments in Python</title>
            <link>https://fares.codes/posts/keyword-and-positional-only-arguments-in-python/</link>
            <pubDate>Fri, 17 Jul 2020 06:20:00 +0200</pubDate>
            
            <guid>https://fares.codes/posts/keyword-and-positional-only-arguments-in-python/</guid>
            <description>My flights are now synonymous with new articles&amp;hellip; It is a welcomed distraction from the subtle armrest war, the crammed chairs with barely any leg room and the crying babies&amp;hellip;
Here&amp;rsquo;s a small feature I recently learned about that might significantly impact your code readability: Forcing functions to take Keyword-Only Arguments or Positional Only Arguments!.
The Keyword-Only argument feature was not so recently introduced in PEP 3102. But as with most things, I&amp;rsquo;m discovering this a little bit too late ü§¶‚Äç‚ôÇ</description>
            <content type="html"><![CDATA[<p>My flights are now synonymous with new articles&hellip; It is a welcomed distraction from the subtle armrest war, the crammed chairs with barely any leg room and the crying babies&hellip;</p>
<p>Here&rsquo;s a small feature I recently learned about that might significantly impact your code readability: Forcing functions to take Keyword-Only Arguments or Positional Only Arguments!.</p>
<p>The Keyword-Only argument feature was not so recently introduced in <a href="https://www.python.org/dev/peps/pep-3102/">PEP 3102</a>. But as with most things, I&rsquo;m discovering this a little bit too late ü§¶‚Äç‚ôÇ</p>
<p>What this allows us to do is force a bunch of arguments to be passed by keyword only as opposed to positional arguments.</p>
<h2 id="quick-recap">Quick Recap</h2>
<p>In python, there are two ways to pass arguments to a function. Either by explicitly naming them, or by arranging arguments in a specific position.</p>
<p>We will be using the following function for our example:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">
<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">show_person</span>(name: str, age: int, hobbies: List[str]):
    <span style="color:#66d9ef">return</span> f<span style="color:#e6db74">&#34;&#34;&#34;The Person is {name}, he is {age} years old and has the following hobbies: {hobbies}&#34;&#34;&#34;</span>

</code></pre></div><h3 id="keyword-argument">Keyword Argument</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">show_person(name<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Fares&#34;</span>, age<span style="color:#f92672">=</span><span style="color:#ae81ff">24</span>, hobbies<span style="color:#f92672">=</span>[<span style="color:#e6db74">&#34;Skiing&#34;</span>,<span style="color:#e6db74">&#34;Drinking&#34;</span>])
</code></pre></div><h3 id="positional-argument">Positional Argument</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">show_person(<span style="color:#e6db74">&#34;Fares&#34;</span>, <span style="color:#ae81ff">24</span>, [<span style="color:#e6db74">&#34;Skiing&#34;</span>,<span style="color:#e6db74">&#34;Drinking&#34;</span>])
</code></pre></div><h3 id="mix-of-both">Mix of Both</h3>
<p>We can also start with positional arguments and end with keyword arguments:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">show_person(<span style="color:#e6db74">&#34;Fares&#34;</span>, <span style="color:#ae81ff">24</span>, hobbies<span style="color:#f92672">=</span>[<span style="color:#e6db74">&#34;Skiing&#34;</span>,<span style="color:#e6db74">&#34;Drinking&#34;</span>])

</code></pre></div><p>By default, the flavor of function calling is left to the discretion of the person calling the function.</p>
<h2 id="forcing-behaviors">Forcing Behaviors</h2>
<p>There is however a way to force callers to pass some/all arguments as keyword only (or as of python 3.8, as positional arguments only).</p>
<h3 id="forcing-keyword-only">Forcing Keyword Only</h3>
<p>To force users to use keyword only arguments for either all or some of the arguments, simply add a <code>*</code> before the arguments. Anything after the <code>*</code> will be keyword only.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">show_person</span>(<span style="color:#f92672">*</span>, name: str, age: int, hobbies: List[str]):
    <span style="color:#66d9ef">return</span> f<span style="color:#e6db74">&#34;&#34;&#34;The Person is {name}, he is {age} years old and has the following hobbies: {hobbies}&#34;&#34;&#34;</span>

show_person(name<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Fares&#34;</span>, age<span style="color:#f92672">=</span><span style="color:#ae81ff">24</span>, hobbies<span style="color:#f92672">=</span>[<span style="color:#e6db74">&#34;Skiing&#34;</span>])
<span style="color:#75715e">## &#34;The Person is Fares, he is 24 years old and has the following hobbies: [&#39;Skiing&#39;]&#34;</span>
</code></pre></div><p>And what happens if we pass positional arguments?</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">show_person(<span style="color:#e6db74">&#34;Fares&#34;</span>, <span style="color:#ae81ff">24</span>, [<span style="color:#e6db74">&#34;Skiing&#34;</span>])

<span style="color:#75715e">## Traceback (most recent call last):</span>
<span style="color:#75715e">##   File &#34;&lt;stdin&gt;&#34;, line 1, in &lt;module&gt;</span>
<span style="color:#75715e">## TypeError: show_person() takes 0 positional arguments but 3 were given</span>
</code></pre></div><p>Another example of keyword only function is:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">show_person</span>(name: str, age: int, <span style="color:#f92672">*</span>, hobbies: List[str]):
    <span style="color:#66d9ef">return</span> f<span style="color:#e6db74">&#34;&#34;&#34;The Person is {name}, he is {age} years old and has the following hobbies: {hobbies}&#34;&#34;&#34;</span>
</code></pre></div><p>In the above example, both name and age are allowed to be passed by either keyword or positional arguments, but hobbies is required to be a keyword argument.</p>
<h3 id="forcing-positional-only-as-of-python-38">Forcing Positional Only (as of Python 3.8)</h3>
<p>This functionality is relatively new and was introduced in Python 3.8.</p>
<p>The same way we can force users to call a function by only passing keyword arguments, we can also force users to call a function by only passing positional arguments.</p>
<p>This is done through the <code>/</code> sign in the function. Anything before that sign is required to be passed as a positional only argument. Here&rsquo;s an example:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">show_person</span>(name: str, age: int, <span style="color:#f92672">/</span>, hobbies: List[str]):
    <span style="color:#66d9ef">return</span> f<span style="color:#e6db74">&#34;&#34;&#34;The Person is {name}, he is {age} years old and has the following hobbies: {hobbies}&#34;&#34;&#34;</span>
</code></pre></div><p>In that case, when calling the function, <code>name</code> and <code>age</code> have to be passed in positional argument only otherwise an error is returned:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">show_person(<span style="color:#e6db74">&#34;Fares&#34;</span>, <span style="color:#ae81ff">24</span>, hobbies<span style="color:#f92672">=</span>[<span style="color:#e6db74">&#34;Skiing&#34;</span>])
</code></pre></div><h3 id="forcing-both">Forcing Both</h3>
<p>We could also require that users call a function with specific arguments in positional and the rest in keyword.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">show_person</span>(name: str, <span style="color:#f92672">/</span>, <span style="color:#f92672">*</span>, age: int, <span style="color:#f92672">/</span>, hobbies: List[str]):
    <span style="color:#66d9ef">return</span> f<span style="color:#e6db74">&#34;&#34;&#34;The Person is {name}, he is {age} years old and has the following hobbies: {hobbies}&#34;&#34;&#34;</span>
</code></pre></div><p>In this case, <code>name</code> can only be passed as positional while <code>age</code> and <code>hobbies</code> can only be passed in keyword arguments.</p>
<h2 id="my-two-cents">My Two Cents</h2>
<p>While I see an immense benefit to using keyword only argument to improve readability, I cannot say the same thing about positional only arguments.</p>
<p>The only usage I see is when a function takes an obvious value and a clear name for the parameter is not so easy to come up with. But then again, some might say this is an indication that you&rsquo;ve done something wrong in the design of your function üòõ.</p>
<h2 id="if-you-must-remember-two-things">If You Must Remember Two Things</h2>
<ul>
<li>To require users to call a function with <code>keyword-only</code> arguments, add a <code>*</code> before those arguments.</li>
<li>To require users to call a function with <code>positional-only</code> arguments, add a <code>/</code> after those arguments.</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Named Tuples In Python</title>
            <link>https://fares.codes/posts/named-tuples-in-python/</link>
            <pubDate>Sun, 12 Jul 2020 09:15:00 +0200</pubDate>
            
            <guid>https://fares.codes/posts/named-tuples-in-python/</guid>
            <description>This cool little feature has been out since Python 2.6 but I&amp;rsquo;m only discovering this now ü§¶‚Äç‚ôÇ
Before we begin, let us take a quick look at tuples in python and how they work:
def _get_person_from_db(user_id): person_name = ... ## Something person_age = ... ## Something return (person_name, person_age) res = _get_person_from_db(0) print(f&amp;#34;&amp;#34;&amp;#34;Person {res[0]} is {res[1]} years old!&amp;#34;&amp;#34;&amp;#34;) Above, the function returns a tuple consisting of a name and the persons age.</description>
            <content type="html"><![CDATA[<p>This cool little feature has been out since Python 2.6 but I&rsquo;m only discovering this now ü§¶‚Äç‚ôÇ</p>
<p>Before we begin, let us take a quick look at tuples in python and how they work:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">
<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">_get_person_from_db</span>(user_id):

    person_name <span style="color:#f92672">=</span> <span style="color:#f92672">...</span> <span style="color:#75715e">## Something</span>
    person_age <span style="color:#f92672">=</span> <span style="color:#f92672">...</span>  <span style="color:#75715e">## Something</span>

    <span style="color:#66d9ef">return</span> (person_name, person_age)

res <span style="color:#f92672">=</span> _get_person_from_db(<span style="color:#ae81ff">0</span>)

<span style="color:#66d9ef">print</span>(f<span style="color:#e6db74">&#34;&#34;&#34;Person {res[0]} is {res[1]} years old!&#34;&#34;&#34;</span>)

</code></pre></div><p>Above, the function returns a tuple consisting of a name and the persons age. This result is stored in <code>res</code> and we access it like a list.</p>
<p>Another syntax would be to unapply the returned value into two other values:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">(name, age) <span style="color:#f92672">=</span> _get_person_from_db(<span style="color:#ae81ff">0</span>)

<span style="color:#66d9ef">print</span>(f<span style="color:#e6db74">&#34;&#34;&#34;Person {name} is {age} years old!&#34;&#34;&#34;</span>)
</code></pre></div><p>But this can lead to some errors where while tuples consisting of multiple values, we might forget one or two making the returned values sometimes incoherent and potentially causing bugs.</p>
<p>In such cases, <code>NamedTuples</code> can improve readability of the code by explicitly defining names to each tuple value.</p>
<p>NamedTuples is part of the Collections module and was introduced in Python 2.6</p>
<p>Here is a quick example on how it works:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">_get_person_from_db</span>():
    Person <span style="color:#f92672">=</span> namedtuple(<span style="color:#e6db74">&#34;Person&#34;</span>, [<span style="color:#e6db74">&#34;name&#34;</span>, <span style="color:#e6db74">&#34;age&#34;</span>])
    p <span style="color:#f92672">=</span> Person(name<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Fares&#34;</span>, age<span style="color:#f92672">=</span><span style="color:#ae81ff">24</span>)
    <span style="color:#66d9ef">return</span> p

person <span style="color:#f92672">=</span> _get_person_from_db()
<span style="color:#66d9ef">print</span>(person<span style="color:#f92672">.</span>name) <span style="color:#75715e"># Fares</span>
<span style="color:#66d9ef">print</span>(person<span style="color:#f92672">.</span>age) <span style="color:#75715e"># 24</span>
</code></pre></div><p>Essentially namedtuples add the possibility to access fields by name instead of by index and therefore create a more readable and self documenting code.</p>
<p>Additionally, namedtuple defines a default <code>repr</code> function for us where the fields are shown next to field name. For the previous example, the result would look like this:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># Tuples:</span>
(<span style="color:#e6db74">&#39;Fares&#39;</span>, <span style="color:#ae81ff">24</span>)

<span style="color:#75715e"># NamedTuples:</span>
Person(name<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Fares&#39;</span>, age<span style="color:#f92672">=</span><span style="color:#ae81ff">24</span>)
</code></pre></div><p>Clearly using namedtuples is a lot more readable. But it gets better, where you can use a tuple, you can also use a namedtuple. NamedTuples are also accessible by index so this might spare you the need to refactor your existing code:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">_get_person_from_db</span>():

    Person <span style="color:#f92672">=</span> namedtuple(<span style="color:#e6db74">&#34;Person&#34;</span>, [<span style="color:#e6db74">&#34;name&#34;</span>, <span style="color:#e6db74">&#34;age&#34;</span>])
    p <span style="color:#f92672">=</span> Person(name<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Fares&#34;</span>, age<span style="color:#f92672">=</span><span style="color:#ae81ff">24</span>)
    <span style="color:#66d9ef">return</span> p

person <span style="color:#f92672">=</span> _get_person_from_db()

<span style="color:#66d9ef">print</span>(f<span style="color:#e6db74">&#34;&#34;&#34;Person {person[0]} is {person[1]} years old!&#34;&#34;&#34;</span>)
<span style="color:#75715e"># Person Fares is 24 years old!</span>
</code></pre></div><p>What if while instantiating the namedtuple, we passed it the wrong keyword argument?</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">_get_person_from_db</span>():

    Person <span style="color:#f92672">=</span> namedtuple(<span style="color:#e6db74">&#34;Person&#34;</span>, [<span style="color:#e6db74">&#34;name&#34;</span>, <span style="color:#e6db74">&#34;age&#34;</span>])
    p <span style="color:#f92672">=</span> Person(name<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Fares&#34;</span>, age<span style="color:#f92672">=</span><span style="color:#ae81ff">24</span>, unknown_keyword<span style="color:#f92672">=</span><span style="color:#ae81ff">2</span>)
    <span style="color:#66d9ef">return</span> p
<span style="color:#75715e">## TypeError: __new__() got an unexpected keyword argument &#39;unknown_keyword&#39;</span>
</code></pre></div><p>So we are restricted to the field_names we define when creating the namedtuple.</p>
<p>Another interesting thing to know: Instead of passing field names as a list of strings, we could pass a space separated string of field names and it&rsquo;ll break it up into separate field names:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">_get_person_from_db</span>():

    Person <span style="color:#f92672">=</span> namedtuple(<span style="color:#e6db74">&#34;Person&#34;</span>, <span style="color:#e6db74">&#34;name age&#34;</span>)
    p <span style="color:#f92672">=</span> Person(<span style="color:#e6db74">&#34;Fares&#34;</span>, <span style="color:#ae81ff">24</span>)
    <span style="color:#66d9ef">return</span> p

person <span style="color:#f92672">=</span> _get_person_from_db()

<span style="color:#66d9ef">print</span>(person)
<span style="color:#75715e"># Person(name=&#39;Fares&#39;, age=24)</span>
</code></pre></div><p>We can also pass a dictionary as field_names:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">_get_person_from_db</span>():

    Person <span style="color:#f92672">=</span> namedtuple(<span style="color:#e6db74">&#34;Person&#34;</span>, {<span style="color:#e6db74">&#34;name&#34;</span>: <span style="color:#e6db74">&#34;Emily&#34;</span>, <span style="color:#e6db74">&#34;age&#34;</span>: <span style="color:#ae81ff">24</span>})
    p <span style="color:#f92672">=</span> Person(<span style="color:#e6db74">&#34;Fares&#34;</span>, <span style="color:#ae81ff">24</span>)
    <span style="color:#66d9ef">return</span> p

person <span style="color:#f92672">=</span> _get_person_from_db()

<span style="color:#66d9ef">print</span>(person)
</code></pre></div><p>It only takes the dict keys and ignores the values.</p>
<p>In addition, NamedTuples can easily be converted to dictionaries through the <code>._asdict()</code> function:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">print</span>(person<span style="color:#f92672">.</span>_asdict())
<span style="color:#75715e"># OrderedDict([(&#39;name&#39;, &#39;Fares&#39;), (&#39;age&#39;, 24)])</span>
</code></pre></div><p>We can access all the fields with <code>._fields</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">print</span>(person<span style="color:#f92672">.</span>_fields)
<span style="color:#75715e"># (&#39;name&#39;, &#39;age&#39;) : Tuple with fields in it</span>
</code></pre></div><p>We can replace a field value with <code>._replace(...)</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">print</span>(person<span style="color:#f92672">.</span>_replace(age <span style="color:#f92672">=</span> <span style="color:#ae81ff">23</span>))
<span style="color:#75715e"># Person(name=&#39;Fares&#39;, age=23)</span>
</code></pre></div><p><strong>Note</strong>: The replace is not capable of changing the actual tuple object. Instead it returns a new instance with the updated value. to benefit from this, we need to assign the result to another value:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">person<span style="color:#f92672">.</span>_replace(age<span style="color:#f92672">=</span><span style="color:#ae81ff">23</span>)
<span style="color:#75715e"># Person(name=&#39;Fares&#39;, age=24)</span>

person <span style="color:#f92672">=</span> person<span style="color:#f92672">.</span>_replace(age<span style="color:#f92672">=</span><span style="color:#ae81ff">23</span>)
<span style="color:#75715e"># Person(name=&#39;Fares&#39;, age=23)</span>
</code></pre></div><h2 id="if-you-must-remember-2-things">If You Must Remember 2 Things</h2>
<ul>
<li>NameTuples improve readability of your code</li>
<li>NameTuples can be used wherever Tuples can be used</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>DataClasses in Python</title>
            <link>https://fares.codes/posts/dataclasses-in-python/</link>
            <pubDate>Sat, 11 Jul 2020 19:15:00 +0200</pubDate>
            
            <guid>https://fares.codes/posts/dataclasses-in-python/</guid>
            <description>This is one of those cool features you&amp;rsquo;d probably wished you&amp;rsquo;d have known about a while back. Unless I&amp;rsquo;m the only person to not have known this from the start üôä
DataClasses is a module that was introduced in python 3.7 and described in PEP 557. This module simplifies the creation of new classes by defining boilerplate code for you.
Dataclasses are classes designed to store data objects (think case classes in Scala).</description>
            <content type="html"><![CDATA[<p>This is one of those cool features you&rsquo;d probably wished you&rsquo;d have known about a while back. Unless I&rsquo;m the only person to not have known this from the start üôä</p>
<p>DataClasses is a module that was introduced in python 3.7 and described in <a href="https://www.python.org/dev/peps/pep-0557/">PEP 557</a>. This module simplifies the creation of new classes by defining boilerplate code for you.</p>
<p>Dataclasses are classes designed to store data objects (think case classes in Scala).</p>
<p>Python 3.7 also provides a decorator that transforms a class into a dataclass. Simply wrap it with <code>@dataclass</code>.</p>
<p>To understand the usefulness of dataclasses lets look at what we normally have to do when constructing a class in python:</p>
<h2 id="the-init">The Init</h2>
<p>Classes in python define an <code>__init__</code> method. This method is the constructor of the class. It is called when an instance of that class is to be created.</p>
<p>Here&rsquo;s an example:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Person</span>:
  <span style="color:#66d9ef">def</span> __init__(self, name, age, hobbies, currently_reading <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;The Divine Comedy&#39;</span>):
    self<span style="color:#f92672">.</span>name <span style="color:#f92672">=</span> name
    self<span style="color:#f92672">.</span>age <span style="color:#f92672">=</span> age
    self<span style="color:#f92672">.</span>hobbies <span style="color:#f92672">=</span> hobbies
    self<span style="color:#f92672">.</span>currently_reading <span style="color:#f92672">=</span> currently_reading
</code></pre></div><p>Here we are defining a Person with a name, age, hobbies a currently_reading that is set to The Divine Comedy by default. In the init method, we take those values and we set them in the self which is supposed to represent the instance of the class.</p>
<p>But all this is a bit verbose and it gets quite repetitive&hellip;</p>
<h3 id="init-using-dataclass">Init Using DataClass</h3>
<p>DataClass handles all this for us. Here is the same example using DataClass:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">from</span> dataclasses <span style="color:#f92672">import</span> dataclass

<span style="color:#a6e22e">@dataclass</span>
<span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Person</span>:
  name: str
  age: int
  hobbies: List[str]
  currently_reading: str <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;The Divine Comedy&#34;</span>
</code></pre></div><p>With this simple decorator, the init (as well as a bunch of other methods) are defined for us!</p>
<p>Lets take a look at some of those other methods</p>
<h2 id="the-repr">The repr</h2>
<p>Lets forget about dataclass for a moment and go back to our initial Person class. What happens if we create an instance of Person and print it?</p>
<p>example:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">p  <span style="color:#f92672">=</span> Person(<span style="color:#e6db74">&#34;Fares&#34;</span>, <span style="color:#ae81ff">24</span>, [<span style="color:#e6db74">&#34;Skiing&#34;</span>, <span style="color:#e6db74">&#34;Reading&#34;</span>])
<span style="color:#66d9ef">print</span>(p)
</code></pre></div><p>The output would be:</p>
<p><code>&lt;__main__.Person object at 0x109c7a2b0&gt;</code> Clearly neither useful nor readable&hellip;</p>
<p>To output something useful, we&rsquo;d need to define a <code>__repr__</code> method for that class:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">
<span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Person</span>:
  <span style="color:#66d9ef">def</span> __init__(self, name, age, hobbies, currently_reading <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;The Divine Comedy&#39;</span>):
    self<span style="color:#f92672">.</span>name <span style="color:#f92672">=</span> name
    self<span style="color:#f92672">.</span>age <span style="color:#f92672">=</span> age
    self<span style="color:#f92672">.</span>hobbies <span style="color:#f92672">=</span> hobbies
    self<span style="color:#f92672">.</span>currently_reading <span style="color:#f92672">=</span> currently_reading

  <span style="color:#66d9ef">def</span> __repr__(self):
    <span style="color:#66d9ef">return</span> (f<span style="color:#e6db74">&#34;Person(name = {self.name}, age = {self.age},&#34;</span><span style="color:#f92672">+</span>
      f<span style="color:#e6db74">&#34;hobbies = {self.hobbies}, currently_reading = {self.currently_reading})&#34;</span>)

p  <span style="color:#f92672">=</span> Person(<span style="color:#e6db74">&#34;Fares&#34;</span>, <span style="color:#ae81ff">24</span>, [<span style="color:#e6db74">&#34;Skiing&#34;</span>, <span style="color:#e6db74">&#34;Reading&#34;</span>])
<span style="color:#66d9ef">print</span>(p)

<span style="color:#75715e">## Person(name = Fares, age = 24, hobbies = [&#39;Skiing&#39;, &#39;Reading&#39;],</span>
<span style="color:#75715e">#    currently_reading = The Divine Comedy)</span>
</code></pre></div><h3 id="repr-using-dataclass">Repr Using DataClass</h3>
<p>This is even more tedious and boring&hellip; Buuut with dataclasses it comes out of the box by simply adding the decorator:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">
<span style="color:#a6e22e">@dataclass</span>
<span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Person</span>:
  name: str
  age: int
  hobbies: List[str]
  currently_reading: str <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;The Divine Comedy&#34;</span>

p  <span style="color:#f92672">=</span> Person(<span style="color:#e6db74">&#34;Fares&#34;</span>, <span style="color:#ae81ff">24</span>, [<span style="color:#e6db74">&#34;Skiing&#34;</span>, <span style="color:#e6db74">&#34;Reading&#34;</span>])
<span style="color:#66d9ef">print</span>(p)
<span style="color:#75715e">## Person(name=&#39;Fares&#39;, age=24, hobbies=[&#39;Skiing&#39;, &#39;Reading&#39;],</span>
<span style="color:#75715e">#    currently_reading=&#39;The Divine Comedy&#39;)</span>
</code></pre></div><h2 id="eq-lt-and-other-ordering-stuff">eq, lt And Other Ordering Stuff</h2>
<p>But it&rsquo;s not all&hellip; What if we wanted to compare two instances of the class Person? Normally we&rsquo;d have to define a function: <code>__eq__</code> like this:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">
  <span style="color:#66d9ef">def</span> __eq__(self, value):
    <span style="color:#66d9ef">return</span> (
        (self<span style="color:#f92672">.</span>name, self<span style="color:#f92672">.</span>age, self<span style="color:#f92672">.</span>hobbies, self<span style="color:#f92672">.</span>currently_reading) <span style="color:#f92672">==</span>
        ((value<span style="color:#f92672">.</span>name, value<span style="color:#f92672">.</span>age, value<span style="color:#f92672">.</span>hobbies, value<span style="color:#f92672">.</span>currently_reading))
        )

old  <span style="color:#f92672">=</span> Person(<span style="color:#e6db74">&#34;Fares&#34;</span>, <span style="color:#ae81ff">23</span>, [<span style="color:#e6db74">&#34;Skiing&#34;</span>, <span style="color:#e6db74">&#34;Reading&#34;</span>])
current  <span style="color:#f92672">=</span> Person(<span style="color:#e6db74">&#34;Fares&#34;</span>, <span style="color:#ae81ff">24</span>, [<span style="color:#e6db74">&#34;Skiing&#34;</span>, <span style="color:#e6db74">&#34;Reading&#34;</span>])

<span style="color:#66d9ef">print</span>(old <span style="color:#f92672">==</span> current)
<span style="color:#75715e">## False</span>
</code></pre></div><h3 id="eq-using-dataclass">Eq Using DataClass</h3>
<p>But again with DataClass this is already done for us so no need to create the eq function.</p>
<p>How does eq work? Same as the eq definition we declared for out Person Class: a tuple of every attribute should be equal to a tuple of other attributes. (order is the same as the one defined in the class definition)</p>
<h3 id="what-about-lt-gt-and-other-ordering-stuff">What about lt, gt and Other Ordering Stuff</h3>
<p>Those are not defined by default for us but they can be!</p>
<p>Simply pass <code>order = True</code> to the decorator like this:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#a6e22e">@dataclass</span>(order <span style="color:#f92672">=</span> True)
<span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Person</span>:
    <span style="color:#f92672">...</span>
</code></pre></div><h2 id="dataclass-decorator-as-a-callable">DataClass Decorator as a Callable</h2>
<p>We&rsquo;ve seen that by default we have an <code>init</code> and a <code>repr</code> and well as an <code>eq</code> but no <code>le</code> or <code>lt</code> etc&hellip; What are out options? Here is the dataclass decorator with the full list of default arguments:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#a6e22e">@dataclass</span>(init<span style="color:#f92672">=</span>True, repr<span style="color:#f92672">=</span>True, eq<span style="color:#f92672">=</span>True, order<span style="color:#f92672">=</span>False, unsafe_hash<span style="color:#f92672">=</span>False, frozen<span style="color:#f92672">=</span>False)
</code></pre></div><ul>
<li>
<p><code>init</code>: defines the <code>__init__()</code> method</p>
</li>
<li>
<p><code>repr</code>: defines the <code>__repr__()</code> method</p>
</li>
<li>
<p><code>eq</code>: defines the <code>__eq__()</code> method</p>
</li>
<li>
<p><code>order</code>: defines <code>__lt__()</code>, <code>__le__()</code>, <code>__gt__()</code>, <code>__ge__()</code> methods. If this is set to true, eq has to be defined.</p>
</li>
<li>
<p><code>unsafe_hash</code>: if False, a <code>__hash__()</code> method may be generated if it is safe to do so (It can also set hash = None if frozen = False). Setting this to True will force dataclass to create the method. It is not recommended to set it to True if you do not know what you&rsquo;re doing üôÑ</p>
</li>
<li>
<p><code>frozen</code>: Passing frozen=True, we can emulate immutability in Python. Assigning values to the fields will raise an exception. In other words this emulates a read-only frozen instance of the class.</p>
<p>There is a performance penalty when using frozen since the init will have to use <code>object.__setattr__()</code>.</p>
</li>
</ul>
<p>Note that if any of the mentioned methods above (<code>init</code>, <code>repr</code>, <code>eq</code>) are already present in the class, the dataclass parameter will be ignored.
If the class defines one of the order function while order is set to True, a <code>TypeError</code> is raised.</p>
<h2 id="post-init">Post Init</h2>
<p>Sometimes in the init function, we&rsquo;d like to make some extra computation. For example, assume that in our Person class, the moment where we instantiate it, we&rsquo;d like to retrieve the extra details we have on that person from our database&hellip;</p>
<p>Normally we&rsquo;d have to do something like this:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> __init__(self):
    <span style="color:#f92672">...</span>,
    self<span style="color:#f92672">.</span>extra_details <span style="color:#f92672">=</span> _get_extra_details(self<span style="color:#f92672">.</span>person_id)
</code></pre></div><p>But with dataclasses this possibility disappears. It&rsquo;s been replaced by a <code>__post_init__()</code> function. Post Init is a special function that allows extra processing after the init function has been called.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">
<span style="color:#f92672">from</span> dataclasses <span style="color:#f92672">import</span> dataclass

<span style="color:#a6e22e">@dataclass</span>
<span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Person</span>:
  name: str
  age: int
  hobbies: List[str]
  currently_reading: str <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;The Divine Comedy&#34;</span>

  <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">__post_init__</span>(self):
      self<span style="color:#f92672">.</span>extra_details <span style="color:#f92672">=</span> _get_extra_details(self<span style="color:#f92672">.</span>person_id)
</code></pre></div><h2 id="customizing-specific-dataclass-fields">Customizing Specific DataClass Fields</h2>
<p>Dataclass allows us to customize each field. For example we could chose not to include it in the init or to not include it in the repr etc&hellip;</p>
<p>We can do this using the specifier <code>field()</code>. Field supports multiple parameters:</p>
<ul>
<li>default: Default value of the field</li>
<li>default_factory: Function that returns the initial value of the field</li>
<li>init: Whether or not to include this field in the <code>__init__</code> function. Set to True by default.</li>
<li>repr: Whether or not to include this field in the <code>repr</code> function. Set to True by default.</li>
<li>compare: Whether or not to include this field in comparisons. Set to True by default.</li>
<li>hash: Whether or not to include this field in the hash computation. (Default is to use the same as for compare.)</li>
<li>metadata: A mapping with information about the field. Can also be None.</li>
</ul>
<p>Example:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">from</span> dataclasses <span style="color:#f92672">import</span> dataclass

<span style="color:#a6e22e">@dataclass</span>
<span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Person</span>:
  name: str
  age: int <span style="color:#f92672">=</span> field(repr<span style="color:#f92672">=</span> False) <span style="color:#75715e">## For people sensitive about their age ü§∑‚Äç‚ôÇ</span>
  hobbies: List[str]
  currently_reading: str <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;The Divine Comedy&#34;</span>
</code></pre></div><h2 id="using-slot-instead-of-dict-access">Using Slot Instead Of Dict Access</h2>
<p>By default, the dataclass attributes are stored in dictionaries. But if you wish to optimize data access and use less memory for certain fields, you could use <code>slots</code>.</p>
<p>Although slots is an entire topic on its own, ill try to recap it here as quickly/simply as I can.</p>
<p>The attributes of a dataclass are stored in a dictionary and can be accessed through <code>__dict__</code>. This dict does not have any fixed number of attributes and we can add attributes dynamically.</p>
<p>Slots on the other hand has a static structure and prohibits the adding of attributes after the creation of the instance.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#a6e22e">@dataclass</span>
<span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Person</span>:
    __slots__ <span style="color:#f92672">=</span> (<span style="color:#e6db74">&#34;name&#34;</span>, <span style="color:#e6db74">&#34;age&#34;</span>, <span style="color:#e6db74">&#34;hobbies&#34;</span>, <span style="color:#e6db74">&#34;currently_reading&#34;</span>)
    name: str
    age: int
    hobbies: list
    currently_reading: str

p <span style="color:#f92672">=</span> Person(<span style="color:#e6db74">&#34;Fares&#34;</span>, <span style="color:#ae81ff">24</span>, [<span style="color:#e6db74">&#34;Skiing&#34;</span>, <span style="color:#e6db74">&#34;Reading&#34;</span>], <span style="color:#e6db74">&#34;The Divine Comedy&#34;</span>)

p<span style="color:#f92672">.</span>profession <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Data Engineer&#34;</span>
<span style="color:#66d9ef">print</span>(p<span style="color:#f92672">.</span>profession)
<span style="color:#75715e">## AttributeError: &#39;Person&#39; object has no attribute &#39;profession&#39;</span>
</code></pre></div><p>And if we were not using slots:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Person</span>:
    <span style="color:#66d9ef">def</span> __init__(self, name, age, hobbies, currently_reading <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;The Divine Comedy&#39;</span>):
        self<span style="color:#f92672">.</span>name <span style="color:#f92672">=</span> name
        self<span style="color:#f92672">.</span>age <span style="color:#f92672">=</span> age
        self<span style="color:#f92672">.</span>hobbies <span style="color:#f92672">=</span> hobbies
        self<span style="color:#f92672">.</span>currently_reading <span style="color:#f92672">=</span> currently_reading

p <span style="color:#f92672">=</span> Person(<span style="color:#e6db74">&#34;Fares&#34;</span>, <span style="color:#ae81ff">24</span>, [<span style="color:#e6db74">&#34;Skiing&#34;</span>, <span style="color:#e6db74">&#34;Reading&#34;</span>], <span style="color:#e6db74">&#34;The Divine Comedy&#34;</span>)

p<span style="color:#f92672">.</span>profession <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Data Engineer&#34;</span>
<span style="color:#66d9ef">print</span>(p<span style="color:#f92672">.</span>profession) <span style="color:#75715e">## Data Engineer</span>
</code></pre></div><p>So we can see that with <code>__slots__</code> we can no longer create attributes dynamically but the access becomes faster and uses less memory.</p>
<h2 id="inheritance">Inheritance</h2>
<p>Dataclasses can be inherited like normal classes in Python.</p>
<p>Example:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#a6e22e">@dataclass</span>
<span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Developer</span>(Person):
    salary: float
</code></pre></div><p>Developer will have all the attributes of the class <code>Person</code> in addition to a salary attribute.</p>
<h2 id="if-you-must-remember-3-things">If you Must Remember 3 Things</h2>
<ol>
<li>DataClasses are special classes meant to hold data objects. They define a bunch of methods for us.</li>
<li>We have the possibility to tweak each field of the data class.</li>
<li>They are available as of Python 3.7 and immensely simplify the creation of new classes.</li>
</ol>
]]></content>
        </item>
        
        <item>
            <title>Everything You Probably Need to Know About Airflow</title>
            <link>https://fares.codes/posts/everything-you-probably-need-to-know-about-airflow/</link>
            <pubDate>Sat, 04 Jul 2020 12:20:00 +0200</pubDate>
            
            <guid>https://fares.codes/posts/everything-you-probably-need-to-know-about-airflow/</guid>
            <description>Taking a small break from scala to look into Airflow.
Also, I&amp;rsquo;m making a habit of writing those things during flights and trains ü§∑‚Äç‚ôÇÔ∏è&amp;hellip; Probably the only thing keeping me from starting a travel blog.
Table of Content  Intro to Airflow Task Dependencies The Dag File Intervals BackFilling Best Practice For Airflow Tasks Templating Passing Arguments to Python Operator Triggering WorkFlows Triggering Rules XCOM Sensors Random TILs If You Must Remember 3 Things   Intro to Airflow Airflow is a platform to programmatically author, schedule and monitor workflows.</description>
            <content type="html"><![CDATA[<p>Taking a small break from scala to look into Airflow.</p>
<p>Also, I&rsquo;m making a habit of writing those things during flights and trains ü§∑‚Äç‚ôÇÔ∏è&hellip; Probably the only thing keeping me from starting a travel blog.</p>
<h2 id="table-of-content">Table of Content</h2>
<ul>
<li><a href="#intro-to-airflow">Intro to Airflow</a></li>
<li><a href="#task-dependencies">Task Dependencies</a></li>
<li><a href="#the-dag-file">The Dag File</a></li>
<li><a href="#intervals-in-airflow">Intervals</a></li>
<li><a href="#backfilling">BackFilling</a></li>
<li><a href="#best-practice-for-airflow-tasks">Best Practice For Airflow Tasks</a></li>
<li><a href="#Templating">Templating</a></li>
<li><a href="#passing-arguments-to-python-operator">Passing Arguments to Python Operator</a></li>
<li><a href="#triggering-workflows">Triggering WorkFlows</a></li>
<li><a href="#triggering-rules">Triggering Rules</a></li>
<li><a href="#xcom">XCOM</a></li>
<li><a href="#sensors">Sensors</a></li>
<li><a href="#random-til">Random TILs</a></li>
<li><a href="#if-you-must-remember-3-things">If You Must Remember 3 Things</a></li>
</ul>
<hr>
<h2 id="intro-to-airflow">Intro to Airflow</h2>
<p>Airflow is a platform to programmatically author, schedule and monitor workflows. It does so through DAGs (directed acyclic graph) consisting of one or multiple Tasks.</p>
<p>A task consists of an Operator that executes a command for a job.</p>
<p>It is worth noting that some competitors to Airflow are: Oozie (but it is specific to hadoop job ie: spark, hive&hellip;) and <a href="https://metaflow.org/">MetaFlow</a> but MetaFlow is more data science oriented.</p>
<p>So how does it work?</p>
<p>Airflow has a central process called the scheduler. Its job is to push tasks to be executed by different workers. The scheduler will read dag files from the dag folder and will access the database. Users on the other hand will only interact with the <code>Webserver</code> a graphical user interface that will represent a global view of all dags available along with their execution details both current and past. To do this, the Webserver accesses both the dag file and the database.</p>
<p>Additionally, Airflow can scale out on multiple machines. But for the time being, only the <code>Celery</code> and <code>Kubernetes</code> workers support Airflow in cluster mode. (More on that later).</p>
<p>We&rsquo;ve mentioned Dags representing the bunch of tasks we&rsquo;d like executed.</p>
<p>A DAG might look something like this:</p>
<p><img src="/images/airflow/example-dag1.png" alt="Example Dag"></p>
<p>Every task is an operator, and airflow comes with a bunch of prebuilt Operators such as:</p>
<ul>
<li>BashOperator: An operator to run a bash command.</li>
<li>PythonOperator: An operator that will execute a python function</li>
</ul>
<p>The tasks in the dag define clear dependencies. In the previous example, task1 will be executed and its success will trigger the execution of task2. Its failure will halt the execution of all tasks that depend on task1 and in our case, this represents all the other tasks.</p>
<h2 id="task-dependencies">Task Dependencies</h2>
<p>The Dag file is written in python. and there are two ways to define dependencies between dags:</p>
<p>assume we&rsquo;ve already created the tasks <code>task1</code>, <code>task2</code>, <code>task3a</code>, <code>task3b</code> (more on that in a bit), we can then declare the dependencies in the following way:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">task1 <span style="color:#f92672">&gt;&gt;</span> task2 <span style="color:#f92672">&gt;&gt;</span> [task3a, task3b]
</code></pre></div><p>This is in my opinion the clearest way to showcase that task2 depends on task 1 and that both task 3a and 3b depends on task2. Notice that we can group tasks in between brackets.</p>
<p>Another way to define dependencies between tasks in to explicitly use the keywords <code>set_upstream</code> or <code>set_downstream</code>. To better understand it, I found it helpful to think of the ensemble of tasks as a stream and have data flow in that stream.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">    task1<span style="color:#f92672">.</span>set_downstream(task2)
    task2<span style="color:#f92672">.</span>set_downstream([task3a, task3b])
</code></pre></div><p>or the other way around:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">    task3a<span style="color:#f92672">.</span>set_upstream(task2)
    task3b<span style="color:#f92672">.</span>set_upstream(task2)
    task2<span style="color:#f92672">.</span>set_upstream(task1)
</code></pre></div><p>You&rsquo;d be correct in questioning the usefulness of the <code>set_upstream</code>. In this case it is much more verbose (since one task is branching out to many), but if the case was reversed and multiple tasks were converging into one, then it&rsquo;d have been easier to use <code>set_upstream</code></p>
<h2 id="the-dag-file">The Dag File</h2>
<p>As mentioned earlier, tasks and dependencies are defined using python in a Dag file. The following example is fairly self explanatory but I&rsquo;ll still comment on some points:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">with</span> DAG(
    dag_id<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;my_dag&#39;</span>,
    schedule_interval<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;@daily&#39;</span>,
    start_date<span style="color:#f92672">=</span>dt<span style="color:#f92672">.</span>datetime(<span style="color:#ae81ff">2019</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">28</span>)
) <span style="color:#66d9ef">as</span> dag:
    task1 <span style="color:#f92672">=</span> DummyOperator(<span style="color:#e6db74">&#39;task1&#39;</span>)
    task2 <span style="color:#f92672">=</span> DummyOperator(<span style="color:#e6db74">&#39;task2&#39;</span>)
    task3a <span style="color:#f92672">=</span> DummyOperator(<span style="color:#e6db74">&#39;task3a&#39;</span>)
    task3b <span style="color:#f92672">=</span> DummyOperator(<span style="color:#e6db74">&#39;task3b&#39;</span>)

    task1 <span style="color:#f92672">&gt;&gt;</span> task2 <span style="color:#f92672">&gt;&gt;</span> [task3a, task3b]
</code></pre></div><p>This type of dag definition uses the context manager, so that all the tasks defined here will belong to the same dag. Another possible declaration though more verbose:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">dag <span style="color:#f92672">=</span> DAG(
    dag_id<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;branch_without_trigger&#39;</span>,
    schedule_interval<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;@once&#39;</span>,
    start_date<span style="color:#f92672">=</span>dt<span style="color:#f92672">.</span>datetime(<span style="color:#ae81ff">2019</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">28</span>)
)

task1 <span style="color:#f92672">=</span> DummyOperator(<span style="color:#e6db74">&#39;task1&#39;</span>, dag<span style="color:#f92672">=</span> dag)
task2 <span style="color:#f92672">=</span> DummyOperator(<span style="color:#e6db74">&#39;task2&#39;</span>, dag<span style="color:#f92672">=</span> dag)
task3a <span style="color:#f92672">=</span> DummyOperator(<span style="color:#e6db74">&#39;task3a&#39;</span>, dag<span style="color:#f92672">=</span> dag)
task3b <span style="color:#f92672">=</span> DummyOperator(<span style="color:#e6db74">&#39;task3b&#39;</span>, dag<span style="color:#f92672">=</span> dag)
</code></pre></div><p>you can see why in most cases option one is preferred.</p>
<h2 id="intervals-in-airflow">Intervals in Airflow</h2>
<p>In the previous section, we&rsquo;ve seen that in the definition of the dag, we provide a start_date.</p>
<p>We also have the possibility to define a <code>schedule_interval</code>. This way, airflow will automatically trigger the dag at regular intervals. So how does this work?</p>
<p>using the start_date and the interval value, airflow splits the dag into interval.</p>
<p>At the <strong>end</strong> of each interval, airflow will trigger the dag. Let us go through an example:</p>
<p><img src="/images/airflow/example-interval1.jpg" alt="Airflow Interval Example"></p>
<p>In this example, our intervals are one hour long, and at the end of each interval  the dag will be triggered.</p>
<h3 id="schedule_intervals">Schedule_Intervals</h3>
<p>We&rsquo;ve just mentioned the <code>schedule_interval</code> that allows us to schedule a dag run at specific time periods.</p>
<p>This parameter accepts different types of input:</p>
<ul>
<li>A Preset: <code>@once</code>, <code>@hourly</code>, <code>@daily</code>, <code>@weekly</code> (while simple to read and understand, it is quite limited).</li>
<li>A Cron: <code>0****</code>, <code>00***</code>, <code>0011*</code> where each asterisk from left to right mean: every minute of every hour of every day of every month and every day of the week</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text"> * * * * *  command to execute
 ‚î¨ ‚î¨ ‚î¨ ‚î¨ ‚î¨
 ‚îÇ ‚îÇ ‚îÇ ‚îÇ ‚îÇ
 ‚îÇ ‚îÇ ‚îÇ ‚îÇ ‚îÇ
 ‚îÇ ‚îÇ ‚îÇ ‚îÇ ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ day of week (0 - 7) (0 to 6 are Sunday to Saturday, or use names; 7 is Sunday, the same as 0)
 ‚îÇ ‚îÇ ‚îÇ ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ month (1 - 12)
 ‚îÇ ‚îÇ ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ day of month (1 - 31)
 ‚îÇ ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ hour (0 - 23)
 ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ min (0 - 59)
</code></pre></div><ul>
<li>datetime.timedelta: <code>timedelta(minutes = 10)</code> or <code>timedelta(hours = 2)</code></li>
</ul>
<p>We can also reference time dynamically, we have access to variables like <code>execution_date</code>, <code>next_execution_date</code>, <code>previous...</code>.</p>
<h2 id="backfilling">BackFilling</h2>
<p>If the startdate of a dag is in the past, then airflow will start by re-running all previous runs of this dag. To disable this, set the parameter <code>catchup</code> to False.</p>
<h2 id="best-practice-for-airflow-tasks">Best Practice For Airflow Tasks</h2>
<p>As a rule of thumb and as a best practice, Airflow tasks should be Atomic and Idempotent.</p>
<h3 id="atomic">Atomic</h3>
<p>Either a task succeeds fully and produces an end result, or it fails and does so with no side effect to the system.</p>
<p>The reasoning behind this is that Airflow can re-launch failed tasks multiple times and if the first failed launch does not leave the system intact, it could end up producing erroneous data in the output of the second run, or simply polluting the system.</p>
<h3 id="idempotent">Idempotent</h3>
<p>Since Airflow tasks can be re-run or retried, it becomes important to generate the same output for the same input.</p>
<h2 id="templating">Templating</h2>
<p>One feature of airflow is that it supports jinja templating.</p>
<p>And every operator in Airflow keeps a list of attributes that can be templated through the variable: <code>templated_fields</code>.</p>
<p>For example:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">
BashOperator(
    task_id <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;say_hello&#34;</span>,
    bash_command <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;echo Hello {{name}}&#34;</span>,
    dag <span style="color:#f92672">=</span> dag
)

</code></pre></div><p>The above example will output: <code>Hello Fares</code> assuming name is fares. This is because the BashOperator declares the bash_command as a templated_field. If it weren&rsquo;t, the output would have been: <code>Hello {{name}}</code></p>
<h3 id="how-to-implement-that-in-custom-operators-and-sensors">How to Implement that in Custom Operators and Sensors</h3>
<p>As mentioned above, to implement this in a custom operator, we would need to declare the attribute in the list of templated_fields. Airflow will take care of the rest.</p>
<h2 id="passing-arguments-to-python-operator">Passing Arguments to Python Operator</h2>
<p>A PythonOperator takes a function callable and executes it within the DAG. Pretty simple&hellip; But what happens if we&rsquo;d like to pass an argument to that function? There are two ways to do so, either through the args variable or the kwargs.</p>
<h3 id="using-op_args">Using op_args</h3>
<p>Assume we had a function</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">_print_hello</span>(name):
   <span style="color:#66d9ef">print</span>(f<span style="color:#e6db74">&#34;Hello {name}!&#34;</span>)
</code></pre></div><p>In the PythonOperator we can provide name in the following manner:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">print_context <span style="color:#f92672">=</span> PythonOperator(
    task_id<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;print_hello&#34;</span>,
    python_callable<span style="color:#f92672">=</span>_print_hello,
    op_args<span style="color:#f92672">=</span>[<span style="color:#e6db74">&#34;Fares&#34;</span>]
    dag<span style="color:#f92672">=</span>dag,
)
</code></pre></div><p>This would be the same as calling <code>_print_hello(&quot;Fares&quot;)</code>.</p>
<h3 id="using-op_kwargs">Using op_kwargs</h3>
<p>Another way of passing arguments is through the kwargs:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">print_context <span style="color:#f92672">=</span> PythonOperator(
    task_id<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;print_hello&#34;</span>,
    python_callable<span style="color:#f92672">=</span>_print_hello,
    op_kwargs<span style="color:#f92672">=</span>{<span style="color:#e6db74">&#34;name&#34;</span>:<span style="color:#e6db74">&#34;Fares&#34;</span>}
    dag<span style="color:#f92672">=</span>dag,
)
</code></pre></div><p>Which would be equivalent to calling <code>_print_hello(name=&quot;Fares&quot;)</code></p>
<h3 id="passing-the-airflow-context-to-the-function">Passing the Airflow Context to the Function</h3>
<p>To pass the context to the python function simply set the <code>provide_context</code> to True in the Operator.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">_print_context</span>(<span style="color:#f92672">**</span>context):
   <span style="color:#66d9ef">print</span>(context)

print_context <span style="color:#f92672">=</span> PythonOperator(
    task_id<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;print_context&#34;</span>,
    python_callable<span style="color:#f92672">=</span>_print_context,
    provide_context<span style="color:#f92672">=</span>True,
    dag<span style="color:#f92672">=</span>dag,
)
</code></pre></div><h2 id="triggering-workflows">Triggering WorkFlows</h2>
<p>We&rsquo;ve seen that Dags can be triggered on a specific time or timedelta using the scheduled parameter. But there are other ways to trigger dags.</p>
<p>One of the is using the experimental REST api for airflow (In airflow 2.0 the API no longer becomes experimental).</p>
<p>Here is an example:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">
curl -X POST <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>  http://localhost:8080/api/experimental/dags/&lt;DAG_ID&gt;/dag_runs <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>  -H <span style="color:#e6db74">&#39;Cache-Control: no-cache&#39;</span> <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>  -H <span style="color:#e6db74">&#39;Content-Type: application/json&#39;</span> <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>  -d <span style="color:#e6db74">&#39;{&#34;conf&#34;:&#34;{\&#34;key\&#34;:\&#34;value\&#34;}&#34;}&#39;</span>

</code></pre></div><p>For more options and the full API see <a href="https://airflow.apache.org/docs/stable/rest-api-ref.html">Documentation</a></p>
<p>Another way to trigger a workflow is through sensors.</p>
<p>Sensors will continuously poll a system or a certain state until a condition is met, or a timeout is reached.</p>
<p>Airflow provides a bunch of sensors out of the box as well as the possibility to create custom sensors by extending <code>BaseSensor</code> or any other sensor. Example of existing sensors: <code>WebHDFSSensor</code>, <code>TimeSensor</code>, <code>TimeDeltaSensor</code>&hellip; <a href="https://airflow.apache.org/docs/stable/_api/airflow/sensors/index.html">Full List Here</a></p>
<p>We will discuss sensors in a later section.</p>
<h2 id="triggering-rules">Triggering Rules</h2>
<p>By default, when a dag is triggered, the only way a task can be executed is by having all its upstream tasks in success. But this behavior can be altered depending on the version of airflow and using the parameter: <code>trigger_rule</code></p>
<p>In airflow 1.10.1:</p>
<ul>
<li><code>all_success</code>: (Default Value) all parents are in success</li>
<li><code>all_failed</code>: All parents are in a failed or upstream_failed state</li>
<li><code>all_done</code>: All parents are done executing. This can be skipped, failed, success etc&hellip;</li>
<li><code>one_failed</code>: The task will execute as soon as one parent is in a failed state. It will not wait for all parents to finish executing.</li>
<li><code>one_success</code>: The task will execute as soon as one parent is in a success state. It will not wait for other parents to finish execution.</li>
<li><code>dummy</code>: Dependencies are not really existent, it will trigger at will</li>
</ul>
<p>In Airflow 1.10.10:</p>
<p>We still have all the trigger rules defined in the earlier version, but to those we add:</p>
<ul>
<li><code>none_failed</code>: Will trigger a task when all the parents have finished executing AND none of them are in a failed state. Parents can however be in a skipped state.</li>
<li><code>none_failed_or_skipped</code>: Will trigger a task when all parents have finished execution AND none of them are in a failed or skipped state. This is similar to the <code>one_success</code> but the difference is that it waits for all its parents to finish execution.</li>
</ul>
<h2 id="xcom">XCOM</h2>
<p>XCOM stands for <code>cross communication</code>. It is the way different tasks in Airflow communicate with one another. It works by defining a key and value, and pushing those into the Airflow Database. Other tasks can later on pull the value from the Database by using the key. One requirement for a value to be pushed into xcom is that it needs to be &ldquo;picklable&rdquo; (not sure if picklable is a real word but airflow should be able to <code>pickle</code> the value).</p>
<p>For additional information, pickling is the process by which python converts data into a byte stream (by serializing it) and unpickling is the deserializing process. Those are also sometimes referred to as: <code>serialization</code>, <code>marshalling</code> or <code>flattening</code>.</p>
<p><a href="https://docs.python.org/2.4/lib/node66.html">Here is a list of things that can be pickled and unpickled</a></p>
<p>Data sent in XCOM are stored in the <code>Apache Airflow Backend Database</code>.</p>
<p>There are two way to push data into xcom: either by pushing it explicitly through xcom_push or implicitly by simply returning a value.</p>
<h3 id="pushing-to-xcom-explicitly">Pushing to XCOM explicitly</h3>
<p>Here is an example on how an Operator or a PythonOperator&rsquo;s callable function can push a value into xcom:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">
context[<span style="color:#e6db74">&#39;task_instance&#39;</span>]<span style="color:#f92672">.</span>xcom_push(context[<span style="color:#e6db74">&#39;task&#39;</span>]<span style="color:#f92672">.</span>task_id, some_value_to_push)

</code></pre></div><p>Alright, so what is happening here? first we are retrieving the <code>task_instance</code> object from the context and then calling the xcom_push function, passing the key and the value to it. In this case we chose the key to be the task_id so we are also retrieving that value from the context.</p>
<p>Under the hood, we&rsquo;d be calling the following function:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">XCom<span style="color:#f92672">.</span>set(
            key<span style="color:#f92672">=</span>key,
            value<span style="color:#f92672">=</span>value,
            task_id<span style="color:#f92672">=</span>self<span style="color:#f92672">.</span>task_id,
            dag_id<span style="color:#f92672">=</span>self<span style="color:#f92672">.</span>dag_id,
            execution_date<span style="color:#f92672">=</span>execution_date <span style="color:#f92672">or</span> self<span style="color:#f92672">.</span>execution_date)
</code></pre></div><p><a href="https://github.com/apache/airflow/blob/v1-10-stable/airflow/models/taskinstance.py#L1483">Source Code</a></p>
<h3 id="pushing-to-xcom-by-returning-a-value">Pushing to XCOM by returning a value</h3>
<p>Operators can push a value in their <code>execute</code> function, and a PythonOperator can push a value to xcom by returning it in its <code>python_callable</code> function.</p>
<p>Example:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">
<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">push_function</span>(<span style="color:#f92672">**</span>context):
    <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#39;xyz&#39;</span>

</code></pre></div><p>the value &ldquo;xyz&rdquo; will be pushed to xcom with the key being the task_id of the function pushing this value.</p>
<h3 id="pulling-data-from-xcom">Pulling data from XCOM</h3>
<p>Data can be pulled from xcom and additionally, we can filter based on key, task_ids, dag_id etc&hellip;</p>
<p>Pulling data from xcom is done through the <code>xcom_pull()</code> function. One important thing to note is that this function takes in a key argument and by default, this key argument is set to <code>XCOM_RETURN_KEY</code>. This limits the search to values that were pushed using the <code>return</code> key word and ignores those pushed manually.</p>
<p>To change this, pass <code>None</code> to the <code>key</code> param.</p>
<p>Here is an example on how to retrieve data from xcom:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">task_instance <span style="color:#f92672">=</span> context[<span style="color:#e6db74">&#39;task_instance&#39;</span>] <span style="color:#75715e">## We can also use ti instead of task_instance. They&#39;re aliases.</span>
task_instance<span style="color:#f92672">.</span>xcom_pull(key <span style="color:#f92672">=</span> None, task_ids <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;the_task_id_used_while_pushing_the_data&#34;</span>)

</code></pre></div><p>We can also pass None to <code>task_ids</code> to retrieve all values pushed to xcom.</p>
<p>The full signature of the task instance pull is:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">xcom_pull</span>(
            self,
            task_ids<span style="color:#f92672">=</span>None,
            dag_id<span style="color:#f92672">=</span>None,
            key<span style="color:#f92672">=</span>XCOM_RETURN_KEY,
            include_prior_dates<span style="color:#f92672">=</span>False)
</code></pre></div><p>If we pass a value to <code>dag_id</code>, xcom will only pull values from this dag.</p>
<p><code>include_prior_dates=False</code> will only pull data from current <code>execution_date</code>. Otherwise it will also include all history.</p>
<p><a href="https://github.com/apache/airflow/blob/v1-10-stable/airflow/models/taskinstance.py#L1515">Link to Source Code</a></p>
<h2 id="sensors">Sensors</h2>
<p>As we&rsquo;ve mentioned above, sensors are special type of operators that will continuously poll a certain system/state&hellip; until a success criteria is met or a timeout is reached.</p>
<p>Sensors extend the <code>BaseSensorOperator</code> and define a <code>poke</code> function. That is all we need to create a custom sensor: an <code>init</code> for the class and a <code>poke</code> function.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">MyCustomSensor</span>(BaseSensorOperator):

    <span style="color:#66d9ef">def</span> __init__(self):
        <span style="color:#f92672">...</span>
    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">poke</span>(self, context):
        <span style="color:#f92672">...</span>
</code></pre></div><p>Poke is expected to return a boolean that indicates if a success criteria is met or not. If it is met, the sensor will set the tasks&rsquo; state to <code>Success</code> and will end the execution. If the return of the poke is <code>False</code>, the sensor will continue polling based on one of two modes defined later on.</p>
<p>From the <code>BaseSensorOperator</code> we inherit a couple behaviors:</p>
<ul>
<li><code>poke_interval</code>: Amount of time to wait in between two checks</li>
<li><code>timeout</code>: time before the Sensors stops checking the condition and sets the state to failed. By default it is set to one week: <code>60*60*24*7</code></li>
<li><code>soft_fail</code>: In the case where the timeout is reached and this is set to True, instead of failing, the sensors will simply be set to <code>Skipped</code></li>
<li><code>mode</code>: set to either <code>poke</code> or <code>rescheduled</code> Those two will be explained in the next section.</li>
</ul>
<p>It is worth noting that <code>BaseSensorOperator</code> also extends from <code>BaseOperator</code> so in addition to the above attributes, we also have those defined in <code>BaseOperator</code>.</p>
<h3 id="poke-mode">Poke Mode</h3>
<p>To understand the advantages/disadvantages of the poke vs rescheduled mode one needs to understand how Airflow schedules and launches jobs&hellip;</p>
<p>Airflow&rsquo;s configuration file will contain a couple variables that dictate the amounts of tasks that can be run at the same time both in total and within the same dag. In some cases by the same executor (If we&rsquo;re in Celery or Kubernetese)</p>
<p>At the heart of Airflow is the <code>Scheduler</code> who will interact with both the dag file and the database to submit the work to workers. There are a maximum of x slots that can be running at the same time and each running task will occupy one slot. If a task is scheduled to be run while there are no slots available, that task will be queued up until a slot becomes available.</p>
<p>One Airflow best practice is to use pools to regulate the available slots based on type etc&hellip; But more on that later.</p>
<p>In poke mode, the Sensor will occupy one slot and will not release it until a success criteria is met or a timeout reached.</p>
<p>In that mode we can have a guarantee that the condition will continuously be checked at regular intervals, but at the same time we would be occupying a slot for the time of execution and potentially preventing other tasks from running.</p>
<h3 id="rescheduled-mode">Rescheduled Mode</h3>
<p>In rescheduled mode; once the sensor finishes its check and returns a <code>False</code>, it will rescheduled itself for a later time (depending on poke_interval) and will release the slot it uses.</p>
<p>After the poke_interval, the sensor will re-check for the condition.</p>
<p>The advantage in this case is that once the sensor finishes its check, it releases the slot and so another task can use it to run.</p>
<p>The disadvantage is that if multiple tasks are running at the same time, the sensor can be queued while waiting for a slot to become available.</p>
<p>This can be managed by having a specific pool for scheduled tasks and coordinating long running tasks at different times during the day/night.</p>
<h3 id="sensor-deadlock">Sensor Deadlock</h3>
<p>Since sensors have a default timeout period of one week, we could easily end up with a deadlock scenario.</p>
<p>Assume a sensor checks if a file is present on HDFS before resuming the rest of the workflow. Also assume that this sensor is in a DAG that is scheduled to run once per day.</p>
<p>If the file never arrives, the sensor will continue running for one week occupying one slot. But on day two another instance of the DAG will run and another sensor will then continue running for a week occupying another slot. The same thing will happen on day three and four and so on and so forth. Eventually we will have consumed seven slots that will continue running and occupying slots, preventing other tasks from being executed.</p>
<p>So it is important to pay special attention to timeout, even more so when using the poke mode instead of the rescheduled mode.</p>
<hr>
<h2 id="random-til">Random til</h2>
<p>Here is a list of random stuff I recently learned on airflow and find cool. I&rsquo;m cramming them here because I&rsquo;m too lazy to re-think the structure of this article to fit them where they should fit.</p>
<h3 id="sla">SLA</h3>
<p>SLA stands for service level agreement.</p>
<p>In Airflow, we have the possibility to define a max time for either dags or tasks that should not be exceeded during a run. If that time is exceeded, an email could be sent as an alert and it will be logged in a monitoring page called SLA Misses.</p>
<p>SLA is typed as an <code>Optional[timedelta]</code> so it can either be set to None if we do not want to alert on task taking too much time, or set to a timedelta representing the max time a task execution can take.</p>
<h4 id="configuring-sla-miss-emails">Configuring SLA Miss Emails</h4>
<p>To configure the SLA email define the following in your <code>airflow.cfg</code> file:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-toml" data-lang="toml">[<span style="color:#a6e22e">smtp</span>]
<span style="color:#a6e22e">smtp_host</span> = <span style="color:#a6e22e">smtp</span>.<span style="color:#a6e22e">gmail</span>.<span style="color:#a6e22e">com</span>
<span style="color:#a6e22e">smtp_starttls</span> = <span style="color:#a6e22e">True</span>
<span style="color:#a6e22e">smtp_ssl</span> = <span style="color:#a6e22e">False</span>
<span style="color:#a6e22e">smtp_user</span> = <span style="color:#a6e22e">YOUR_EMAIL_ADDRESS</span>
<span style="color:#a6e22e">smtp_password</span> = <span style="color:#ae81ff">16</span><span style="color:#a6e22e">_DIGIT_APP_PASSWORD</span>
<span style="color:#a6e22e">smtp_port</span> = <span style="color:#ae81ff">587</span>
<span style="color:#a6e22e">smtp_mail_from</span> = <span style="color:#a6e22e">YOUR_EMAIL_ADDRESS</span>
</code></pre></div><p>and pass a specific <code>email</code> parameter to the operator.</p>
<h4 id="dag-level-sla">DAG Level SLA</h4>
<p>SLA can be set on a DAG level by passing it in the default_args:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">default_args <span style="color:#f92672">=</span> {
    <span style="color:#e6db74">&#39;owner&#39;</span>: <span style="color:#e6db74">&#39;airflow&#39;</span>,
    <span style="color:#e6db74">&#39;depends_on_past&#39;</span>: False,
    <span style="color:#e6db74">&#39;sla&#39;</span>: timedelta(hours<span style="color:#f92672">=</span><span style="color:#ae81ff">2</span>) <span style="color:#75715e">## HERE</span>
}
</code></pre></div><p>Then at the end of each task Airflow tests whether or not the tasks&rsquo; execution time exceeded the SLA. If it did, an email is sent to the set of emails defined in <code>default_args</code> and the next task continues its execution.</p>
<p>If the task did not exceed the SLA, the next task is executed normally and no email is sent.</p>
<p>So to recap: the check is made AFTER the task is executed and a violation of SLA has no impact on the execution of the DAG.</p>
<h4 id="task-level-sla">Task Level SLA</h4>
<p>We have the possibility to define an SLA for a single task by passing the <code>sla</code> param. This parameter is inherited from BaseOperator so all operators/sensors should have it.</p>
<p>It checks for a miss at the start of the task and at the end. If a violation occurs during the tasks&rsquo; execution, an email is only sent after it finishes its execution.</p>
<p><strong>NOTE</strong> The SLA specified at the task level is the time from the DAGs execution NOT that of the task.</p>
<h4 id="sla-misses">SLA Misses</h4>
<p>Airflow give us a view of all SLA misses across all DAGs in: Browse &raquo; SLA Misses</p>
<p>This can be a useful monitoring tool asides the emails that are sent.</p>
<p>In that view, we can see:</p>
<ul>
<li>Dag id</li>
<li>Task id</li>
<li>Execution date: The execution date of the DAG with the SLA miss</li>
<li>Email sent: If an email was sent or not.</li>
<li>Timestamp: Time when the SLA miss was detected</li>
</ul>
<p>Note that all SLA that share the same timeout will be grouped in one email.</p>
<h4 id="sla-miss-callback">SLA Miss Callback</h4>
<p>In addition to the email that is sent on an SLA Miss and the monitoring view, Airflow allows developers to execute a callable when an SLA Miss is detected. This can be done by passing a function to the: <code>sla_miss_callback</code> parameter.</p>
<h4 id="important-note">Important Note</h4>
<p>SLA works with scheduled DAG runs only.</p>
<h3 id="deferred-dag-assignment">Deferred Dag Assignment</h3>
<p>Sometimes we would like to dynamically create a DAG based on some conditions or state. In that case, deferred dag assignment can be very useful:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">if</span>(some_check()):
    task_1<span style="color:#f92672">.</span>dag <span style="color:#f92672">=</span> dag
    start_task <span style="color:#f92672">&gt;&gt;</span> task_1

<span style="color:#66d9ef">else</span>:
    task_2<span style="color:#f92672">.</span>dag<span style="color:#f92672">=</span>dag
    start_task <span style="color:#f92672">&gt;&gt;</span> task_2
</code></pre></div><p>That way, based on the function <code>some_check</code> our dag is constructed and if evaluates to True, task_2 will not be in that dag.</p>
<p>This can be quite helpful when we generate tasks dynamically.</p>
<h3 id="priority-weights">Priority Weights</h3>
<p>We have previously talked about how airflow functions and mentioned that the scheduler decides which tasks to push to executors.</p>
<p>But how does it do that?</p>
<p>Each task will have a weight associated to it. The weight can go from one to int max value. The higher the weight, the more priority it has.</p>
<p>This weight can be set using the <code>priority_weight</code> parameter.</p>
<h3 id="weight-rules">Weight Rules</h3>
<p>Weight rules are different methods used to calculate the effective weight of a given task. By default this parameter is set to Downstream but other rules exist:</p>
<ul>
<li>
<p><code>Absolute</code>: In absolute mode, the weight of a task is the weight assigned in <code>priority_weight</code>. Seems straightforward and simple. This rule has the benefit of speeding up the dag creation since no extra computation is required to figure out the effective weight of each task. Additionally, it allows developers to have a better understanding of the execution priority and order.</p>
</li>
<li>
<p><code>Downstream</code>: In Downstream mode, the weight of a task is the sum of weights of this task and all its downstream tasks.</p>
<p>When in Downstream mode, the upstream tasks will have higher priority and those will go down as soon as more tasks finish executing.</p>
</li>
<li>
<p><code>Upstream</code>: In Upstream mode the weight of a task is the sum of weights of all its upstream tasks. It is the opposite of the downstream rule. This is useful when we have multiple dag run instances and want the current dag run to finish executing before the other instances start.</p>
</li>
</ul>
<h3 id="add-docs-to-tasks">Add Docs to Tasks</h3>
<p>Though in most cases the DAGs should be self explanatory, we sometimes might want to provide a context or an explanation to a specific task.</p>
<p>In those cases Airflow allows us to document tasks and dags with comments in different formats.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">
another  <span style="color:#f92672">=</span> BashOperator(task_id<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;one&#34;</span>, bash_command<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;echo another&#34;</span>, dag<span style="color:#f92672">=</span>dag)

another<span style="color:#f92672">.</span>doc_md <span style="color:#f92672">=</span><span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74"># Hello World
</span><span style="color:#e6db74">
</span><span style="color:#e6db74">## Context
</span><span style="color:#e6db74">
</span><span style="color:#e6db74">This is where context can go
</span><span style="color:#e6db74">
</span><span style="color:#e6db74">## Usefulness
</span><span style="color:#e6db74">
</span><span style="color:#e6db74">Here is where I can explain why this task is useful
</span><span style="color:#e6db74">
</span><span style="color:#e6db74">### Note
</span><span style="color:#e6db74">
</span><span style="color:#e6db74">Over here I can give more details
</span><span style="color:#e6db74">
</span><span style="color:#e6db74">&#34;&#34;&#34;</span>

</code></pre></div><p>In the task instance details of this task, we will be able to see the following:</p>
<p><img src="/images/airflow/DocumentedTask.png" alt="Example Of a Documented Task"></p>
<p>If we do not want to write in markdown, we still have the possibility to write a regular string, in rst format, yaml and json. The last two are especially useful for printing out configuration.</p>
<p>This is done through the following attributes:</p>
<p><code>doc</code>, <code>doc_md</code>, <code>doc_rst</code>, <code>doc_json</code>, and <code>doc_yaml</code>.</p>
<h3 id="add-docs-to-dags">Add Docs to Dags</h3>
<p>In addition to adding documentation to tasks, we can also add documentations to DAGs themselves:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">
dag<span style="color:#f92672">=</span> DAG(dag_id<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;fares-test&#34;</span>, default_args<span style="color:#f92672">=</span>DEFAULT_ARGS, user_defined_macros<span style="color:#f92672">=</span>USER_DEFINED_MACROS, schedule_interval<span style="color:#f92672">=</span>None)


dag<span style="color:#f92672">.</span>doc_md <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74"># fares-test DAG
</span><span style="color:#e6db74">
</span><span style="color:#e6db74">## Actions
</span><span style="color:#e6db74">
</span><span style="color:#e6db74">1. Reads Files from HDFS
</span><span style="color:#e6db74">2. Computes something
</span><span style="color:#e6db74">3. Writes files to HDFS
</span><span style="color:#e6db74">
</span><span style="color:#e6db74">## Trigger Time
</span><span style="color:#e6db74">
</span><span style="color:#e6db74">This DAG is scheduled everyday at 3 am.
</span><span style="color:#e6db74">&#34;&#34;&#34;</span>

</code></pre></div><p><img src="/images/airflow/Documented-DAG.png" alt="Documented DAG"></p>
<h3 id="airflow-variables">Airflow Variables</h3>
<p>Airflow Variables are used to store and fetch data at runtime without having to hard code it into a DAG file.</p>
<p>Variables are comprised of a Key and a Value and are stored in the metadata database in a table called Variables. They are also accessible to the user through the webserver in Admin &raquo; Variables.</p>
<p>To create them, either do so from the Webserver by accessing Webserver &raquo; Variables &raquo; Create</p>
<p>or through the command line:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">
airflow variables -s my_key my_value

</code></pre></div><p>We can also pass a json configuration file through the <code>-e</code> instead of <code>-s</code></p>
<p>Or through code:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">from</span> airflow.models <span style="color:#f92672">import</span> Variable
my_var <span style="color:#f92672">=</span> Variable<span style="color:#f92672">.</span>set(<span style="color:#e6db74">&#34;my_key&#34;</span>, <span style="color:#e6db74">&#34;my_value&#34;</span>)
</code></pre></div><p>But remember not to put the variables sets/gets outside of tasks or they will be executed multiple times. See Best Practices section for more information.</p>
<h4 id="where-does-airflow-look-for-variables">Where does Airflow Look for Variables</h4>
<p>Airflow will look for the variable in the following places and in this order:</p>
<ol>
<li>Airflow Backend Secrets</li>
<li>AIRFLOW_ENV</li>
<li>Meta store</li>
</ol>
<p>If it finds it in one of the first two places, it will not create the expensive connection to the meta store.</p>
<h4 id="how-to-hide-variable-values">How to Hide Variable Values</h4>
<p>To hide the value of some sensitive information that we wish to store in Airflow Variables we need to add one of the following keywords to the key:</p>
<ul>
<li><code>password</code></li>
<li><code>secret</code></li>
<li><code>passwd</code></li>
<li><code>authorization</code></li>
<li><code>api_key</code></li>
<li><code>apikey</code></li>
<li><code>access_token</code></li>
</ul>
<p>The result would look like this:</p>
<p><img src="/images/airflow/secret_variable.png" alt="Secret Variable"></p>
<p>Note however that anyone who has access to the DAGs or the CLI can still see the underlying value. So we shouldn&rsquo;t rely on this method to store sensitive values.</p>
<h4 id="storing-sensitive-variables-in-environment-variables">Storing Sensitive Variables in Environment Variables</h4>
<p>This functionality is available as of Airflow 1.10.10. To make use of it, simply follow this naming convention: <code>AIRFLOW_VAR_&lt;KEY_OF_THE_VAR&gt;</code></p>
<h3 id="best-practices">Best Practices</h3>
<p>Asides the idempotent and deterministic characteristics we previously talked about here are a bunch of additional best practices:</p>
<h4 id="avoid-doing-any-computation-in-your-dag-definition">Avoid doing any computation in your DAG definition</h4>
<p>Airflow needs to execute your Python DAG file to derive the corresponding DAG. Moreover, to pick up any changes you may have made to your DAG, Airflow has to re-read your DAG file at regular intervals and sync any changes to its internal state.</p>
<p>If your DAG definition contains a computation, this computation will be executed every time the Dag Bag is refreshed. Which I believe is by default once every 30 seconds (configured through <code>process_poll_interval</code> in <code>airflow.cfg</code>).</p>
<p>Not knowing this lead me to write over 100 test messages in my kafka topic ü§∑‚Äç‚ôÇü§¶‚Äç‚ôÇ</p>
<h4 id="using-pools">Using Pools</h4>
<p>Airflow Pools are used to limit the parallelism is specific type of operators. Example: Limit database accesses to 5 tasks at any given time.</p>
<p>Pools can be created in the webserver through Menu &raquo; Admin &raquo; Pools by giving a pool name and assigning a number of slots to the pool. Then in the Task definition, we can pass the pool name in the <code>pool</code> parameter.</p>
<p>By doing this, we&rsquo;d be allocating those slots to tasks that are part of this pool only. They will not be accessed by other tasks no matter their priority weight.</p>
<h3 id="different-types-of-executors">Different Types of Executors</h3>
<p>In the intro, we&rsquo;ve talked about the Celery and Kubernetes executors as the only ones being able to scale out, but we haven&rsquo;t delved into the details of each executor and the pros and cons.</p>
<p>We&rsquo;ve mentioned that the scheduler interacts with the dag files on regular bases to decide which tasks to push to the executor next.</p>
<p>There are different types of executors: <code>LocalExecutor</code>, <code>CeleryExecutor</code>, <code>KubernetesExecutor</code>, <code>SequentialExecutor</code>.</p>
<h4 id="localexecutor">LocalExecutor</h4>
<p>Pretty simple, everything runs on the same machine, including the scheduler. So no need for additional resources outside that machine.</p>
<p>Even though it runs on one machine it still supports parallelism, but it is a single point of failure and is not scalable.</p>
<p>Its useful for testing, but as soon as you find yourself with multiple DAGs in production needing a lot of resources, consider moving to <code>CeleryExecutor</code></p>
<h4 id="celeryexecutor">CeleryExecutor</h4>
<p>Celery is built for horizontal scaling.</p>
<p>The Scheduler adds a message to a queue and the <code>CeleryBroker</code> delivers it to the executor or executors. If a worker goes down, the executor will re-assign this task to another worker increasing the fault tolerance.</p>
<h4 id="kubernetesexecutor">KubernetesExecutor</h4>
<p>from <a href="https://www.astronomer.io/guides/airflow-executors-explained/">Astronomer IO</a> &ldquo;the Kubernetes Executor relies on a fixed single Pod that dynamically delegates work and resources. For each and every task that needs to run, the Executor talks to the Kubernetes API to dynamically launch an additional Pod, each with its own Scheduler and Webserver, which it terminates when that task is completed. The fixed single Pod has a Webserver and Scheduler just the same, but it&rsquo;ll act as the middle-man with connection to Redis and all other workers.&rdquo;</p>
<h4 id="sequentialexecutor">SequentialExecutor</h4>
<p>A much more primitive executor, it runs a single tasks instance and does not have any parallelism. It is also a single point of failure.</p>
<h2 id="if-you-must-remember-3-things">If you Must Remember 3 Things</h2>
<ol>
<li>Airflow is a platform to programmatically author, schedule and monitor workflows</li>
<li>Do not execute computation in the Dag file outside of tasks</li>
<li>I do not have a travel blog (yet).</li>
</ol>
]]></content>
        </item>
        
        <item>
            <title>Type Hinting in Python</title>
            <link>https://fares.codes/posts/type-hinting-in-python/</link>
            <pubDate>Mon, 29 Jun 2020 00:05:00 +0200</pubDate>
            
            <guid>https://fares.codes/posts/type-hinting-in-python/</guid>
            <description>As I turn 24, my blog is about to turn 1 year old!! üéä
This article will mostly be a summary of the official python documentation. I have found it useful to read a documentation and then re-summarize it in my own words. (Examples are mostly theirs though)
Typing is a new module starting python 3.5 and introduced by PEP 484. Its goal is to introduce static types to Python.</description>
            <content type="html"><![CDATA[<p>As I turn 24, my blog is about to turn 1 year old!! üéä</p>
<p>This article will mostly be a summary of the official python documentation. I have found it useful to read a documentation and then re-summarize it in my own words. (Examples are mostly theirs though)</p>
<p>Typing is a new module starting python 3.5 and introduced by <a href="https://www.python.org/dev/peps/pep-0484/">PEP 484</a>. Its goal is to introduce static types to Python.</p>
<h2 id="table-of-content">Table of Content</h2>
<ol>
<li><a href="#to-clarify-one-thing">To Clarify One Thing</a></li>
<li><a href="#hello-world-example">Hello World Example</a></li>
<li><a href="#custom-types-with-newtype">Custom Types with NewType</a>
<ul>
<li><a href="#one-thing-to-pay-attention-for">One thing to pay attention for</a></li>
</ul>
</li>
<li><a href="#callable-type">Callable Type</a></li>
<li><a href="#generic-types">Generic Types</a>
<ul>
<li><a href="#typevars">TypeVars</a></li>
</ul>
</li>
<li><a href="#types">Types</a></li>
<li><a href="#union-types">Union Types</a></li>
<li><a href="#optional">Optional</a></li>
<li><a href="#if-you-must-remember-3-things">If You Must Remember 3 Things</a></li>
</ol>
<hr>
<h2 id="to-clarify-one-thing">To Clarify One Thing</h2>
<p>To clarify something from the start:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">Python will remain a dynamically typed language,
and the authors have no desire to ever make type
hints mandatory, even by convention.
</code></pre></div><p>This is taken from the PEP&rsquo;s Non Goal section.</p>
<p>So even if type hints are available, they are not checked at runtime (even though there is a support for that through <code>get_type_hints()</code>). Instead, type hints are meant to be checked by offline type checkers or linters.</p>
<h2 id="hello-world-example">Hello World Example</h2>
<p>Here is how type hinting might work:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">
<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">hello_human</span>(name: str) <span style="color:#f92672">-&gt;</span> str:
    <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#39;Hello &#39;</span> <span style="color:#f92672">+</span> name

</code></pre></div><p>without type hints, the function would look like this:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">hello_human</span>(name):
    <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;Hello &#34;</span> <span style="color:#f92672">+</span> name
</code></pre></div><p>You might be saying to yourself that it isn&rsquo;t much difference&hellip; But after a year of experience with Scala I can confirm that types can really make a code more readable.</p>
<h2 id="custom-types-with-newtype">Custom Types with NewType</h2>
<p>If the built-in types are not enough, NewType allows us to create custom types:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">from</span> typing <span style="color:#f92672">import</span> NewType

Url <span style="color:#f92672">=</span> NewType(<span style="color:#e6db74">&#34;Url&#34;</span>, str)

website <span style="color:#f92672">=</span> Url(<span style="color:#e6db74">&#34;fares.codes&#34;</span>)
</code></pre></div><h3 id="one-thing-to-pay-attention-for">One thing to pay attention for</h3>
<p>Operations on newtypes will be treated as operations on the underlying type and the result is the underlying type.</p>
<p>Here&rsquo;s an example:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">
UserId <span style="color:#f92672">=</span> NewType(<span style="color:#e6db74">&#34;UserId&#34;</span>, int)

fares <span style="color:#f92672">=</span> UserId(<span style="color:#ae81ff">1</span>)
emily <span style="color:#f92672">=</span> UserId(<span style="color:#ae81ff">3</span>)

total <span style="color:#f92672">=</span> fares <span style="color:#f92672">+</span> emily  <span style="color:#75715e">## Will output 4</span>

</code></pre></div><p>So what is the point? It allows its users to pass any int when a UserId is expected, but at the same time doesn&rsquo;t allow them to create a UserId in an invalid way.</p>
<p>At runtime, the NewType expression is transformed to a regular function call and therefore no additional overhead is introduced.</p>
<blockquote>
<p>Warning: Since NewTypes do not exist at runtime, it is impossible to create subtypes of NewTypes.</p>
</blockquote>
<p>example:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">
UserId <span style="color:#f92672">=</span> NewType(<span style="color:#e6db74">&#39;UserId&#39;</span>, int)

<span style="color:#75715e"># Fails at runtime and does not typecheck</span>
<span style="color:#66d9ef">class</span> <span style="color:#a6e22e">AdminUserId</span>(UserId): <span style="color:#66d9ef">pass</span>

</code></pre></div><p>However, it is possible to create a NewType based on another NewType:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">
UserId <span style="color:#f92672">=</span> NewType(<span style="color:#e6db74">&#39;UserId&#39;</span>, int)

ProUserId <span style="color:#f92672">=</span> NewType(<span style="color:#e6db74">&#39;ProUserId&#39;</span>, UserId)

</code></pre></div><h2 id="callable-type">Callable Type</h2>
<p>Return type can also be a <code>Callable</code>. It follows this signature:</p>
<p><code>Callable[[Arg1Type, Arg2Type], ReturnType]</code></p>
<p>Example:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">from</span> typing <span style="color:#f92672">import</span> Callable

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">feeder</span>(get_next_item: Callable[[], str]) <span style="color:#f92672">-&gt;</span> None:
    <span style="color:#75715e"># Body</span>

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">async_query</span>(on_success: Callable[[int], None],
                on_error: Callable[[int, <span style="color:#a6e22e">Exception</span>], None]) <span style="color:#f92672">-&gt;</span> None:
    <span style="color:#75715e"># Body</span>

</code></pre></div><p>If we don&rsquo;t want to declare the types of the arguments, we can use the following syntax:</p>
<p><code>Callable[..., ReturnType]</code></p>
<h2 id="generic-types">Generic Types</h2>
<p>A normal example of a sequence of UserIds would look like this:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">
UserId <span style="color:#f92672">=</span> NewType(<span style="color:#e6db74">&#39;UserId&#39;</span>, int)

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">do_something</span>(sequence: Sequence[UserId]) <span style="color:#f92672">-&gt;</span> None: <span style="color:#f92672">...</span>

</code></pre></div><p>But what if we wanted the input to the function to be generic?</p>
<p>In comes <code>TypeVars</code></p>
<h3 id="typevars">TypeVars</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">from</span> typing <span style="color:#f92672">import</span> Sequence, TypeVar

T <span style="color:#f92672">=</span> TypeVar(<span style="color:#e6db74">&#39;T&#39;</span>)

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">do_something</span>(sequence: Sequence[T]) <span style="color:#f92672">-&gt;</span> None: <span style="color:#f92672">...</span>
</code></pre></div><p>Classes in python can also be generic:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">
<span style="color:#f92672">from</span> typing <span style="color:#f92672">import</span> TypeVar, Generic

T <span style="color:#f92672">=</span> TypeVar(<span style="color:#e6db74">&#39;T&#39;</span>)

<span style="color:#66d9ef">class</span> <span style="color:#a6e22e">MyClass</span>(Generic[T]):
    <span style="color:#66d9ef">def</span> __init__(self, value: T, name: str) <span style="color:#f92672">-&gt;</span> None:
        self<span style="color:#f92672">.</span>name <span style="color:#f92672">=</span> name
        self<span style="color:#f92672">.</span>value <span style="color:#f92672">=</span> value

</code></pre></div><p>Type variables can also be constrained to specific types:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">S <span style="color:#f92672">=</span> TypeVar(<span style="color:#e6db74">&#39;S&#39;</span>, int, str)
</code></pre></div><p>In that case, the type S can either be a str or an int.</p>
<p>Note: by default type variables are invariant, but they can be marked as covariant or contravariant by passing: <code>covariant=True</code> or <code>contravariant=True</code>. Additionally, an upper bound can be specified using: <code>bound=&lt;type&gt;</code>.</p>
<h2 id="types">Types</h2>
<p>What is the difference between the following two declarations:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">UserId <span style="color:#f92672">=</span> NewType(<span style="color:#e6db74">&#39;UserId&#39;</span>, int)
</code></pre></div><p>and</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">from</span> typing <span style="color:#f92672">import</span> Type
UserId <span style="color:#f92672">=</span> NewType(<span style="color:#e6db74">&#39;UserId&#39;</span>, Type[int])
</code></pre></div><p>or even</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">
T_int <span style="color:#f92672">=</span> int
UserId <span style="color:#f92672">=</span> NewType(<span style="color:#e6db74">&#39;UserId&#39;</span>, T_int)
</code></pre></div><p><code>T_int = int</code> and <code>Type[int]</code> are the same thing. They allow the variable to accept a type int but to also accept <code>class object of int</code>.</p>
<p>While the first example, only allows the variable to be of type int.</p>
<p>Example from the doc:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">User</span>: <span style="color:#f92672">...</span>
<span style="color:#66d9ef">class</span> <span style="color:#a6e22e">BasicUser</span>(User): <span style="color:#f92672">...</span>
<span style="color:#66d9ef">class</span> <span style="color:#a6e22e">ProUser</span>(User): <span style="color:#f92672">...</span>
<span style="color:#66d9ef">class</span> <span style="color:#a6e22e">TeamUser</span>(User): <span style="color:#f92672">...</span>

<span style="color:#75715e"># Accepts User, BasicUser, ProUser, TeamUser, ...</span>
<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">make_new_user</span>(user_class: Type[User]) <span style="color:#f92672">-&gt;</span> User:
    <span style="color:#75715e"># ...</span>
    <span style="color:#66d9ef">return</span> user_class()
</code></pre></div><p>When using types, we can only pass classes, Any, type variables or a Union of those.</p>
<h2 id="union-types">Union Types</h2>
<p>Union types are used to indicate an one of multiple types. It is used as <code>Union[X, Y]</code>. Example:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">Union[int, str, float]
Union[str, int]
</code></pre></div><h2 id="optional">Optional</h2>
<p>Optional allows us to define a type that can also be None. Example:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">
<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">foo</span>(arg: Optional[int] <span style="color:#f92672">=</span> None) <span style="color:#f92672">-&gt;</span> None:
    <span style="color:#f92672">...</span>

</code></pre></div><p>Note that <code>Optional[X]</code> is also equivalent to: <code>Union[X, None]</code></p>
<h2 id="if-you-must-remember-3-things">If you must remember 3 things</h2>
<ol>
<li>Type hints make your code more readable so you should try to use them as often as you can</li>
<li>Type hints are only checked by static type checkers or linters and not during runtime</li>
<li>I just turned 24 üòÑ</li>
</ol>
]]></content>
        </item>
        
        <item>
            <title>Cats Kleisli</title>
            <link>https://fares.codes/posts/cats-kleisli/</link>
            <pubDate>Sun, 17 May 2020 10:00:00 +0200</pubDate>
            
            <guid>https://fares.codes/posts/cats-kleisli/</guid>
            <description>I wont lie&amp;hellip; The main reason I&amp;rsquo;m looking into Kleisli is because I think the name is cool.
Kleisli allows the composition of functions where the return type is a monadic value while the input to the next function is not.
Function Composition Function Composition allows us to chain function calls together.
Here is a dummy example:
val getValueFromDB: Unit =&amp;gt; String = _ =&amp;gt; &amp;#34;Fares&amp;#34; val transformValue: String =&amp;gt; String = _.</description>
            <content type="html"><![CDATA[<p>I wont lie&hellip; The main reason I&rsquo;m looking into <code>Kleisli</code> is because I think the name is cool.</p>
<p>Kleisli allows the composition of functions where the return type is a monadic value while the input to the next function is not.</p>
<h2 id="function-composition">Function Composition</h2>
<p>Function Composition allows us to chain function calls together.</p>
<p>Here is a dummy example:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">  <span style="color:#66d9ef">val</span> getValueFromDB<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Unit</span> <span style="color:#f92672">=&gt;</span> <span style="color:#a6e22e">String</span> <span style="color:#66d9ef">=</span> <span style="color:#66d9ef">_</span> <span style="color:#66d9ef">=&gt;</span> <span style="color:#e6db74">&#34;Fares&#34;</span>
  <span style="color:#66d9ef">val</span> transformValue<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">String</span> <span style="color:#f92672">=&gt;</span> <span style="color:#a6e22e">String</span> <span style="color:#66d9ef">=</span> <span style="color:#66d9ef">_</span><span style="color:#f92672">.</span>toUpperCase
  <span style="color:#66d9ef">val</span> saveValueToDB<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">String</span> <span style="color:#f92672">=&gt;</span> <span style="color:#a6e22e">Unit</span> <span style="color:#66d9ef">=</span> <span style="color:#66d9ef">_</span> <span style="color:#66d9ef">=&gt;</span> <span style="color:#f92672">()</span>
</code></pre></div><p>The following are 3 dummy functions that load a value from a database, transforms it (to uppercase) and finally saves it back to the database.</p>
<p>Here&rsquo;s how it would look like:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">  saveValueToDB<span style="color:#f92672">(</span>transformValue<span style="color:#f92672">(</span>getValueFromDB<span style="color:#f92672">()))</span>
</code></pre></div><p>Except it&rsquo;s quite ugly to look at and to read.</p>
<p>But luckily there is another way:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">  <span style="color:#66d9ef">val</span> result <span style="color:#66d9ef">=</span> saveValueToDB compose transformValue compose getValueFromDB
  result<span style="color:#f92672">()</span>
</code></pre></div><p>or</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">  <span style="color:#66d9ef">val</span> result <span style="color:#66d9ef">=</span> getValueFromDB andThen transformValue andThen saveValueToDB
  result<span style="color:#f92672">()</span>
</code></pre></div><p>I&rsquo;ll admit I think using <code>andThen</code> is the better option since it is the most readable and since we have a tendency to read left to right and not the other way around.</p>
<h2 id="issue-when-it-returns-a-monadic-value">Issue (When it returns a monadic value)</h2>
<p>Alright so thats cool&hellip; But the problem becomes if those functions return a monadic value. Example:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">  <span style="color:#66d9ef">val</span> getValueFromDB<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Unit</span> <span style="color:#f92672">=&gt;</span> <span style="color:#a6e22e">Either</span><span style="color:#f92672">[</span><span style="color:#66d9ef">Throwable</span>, <span style="color:#66d9ef">String</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span> <span style="color:#66d9ef">_</span> <span style="color:#66d9ef">=&gt;</span> <span style="color:#a6e22e">Right</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Fares&#34;</span><span style="color:#f92672">)</span>
  <span style="color:#66d9ef">val</span> transformValue<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">String</span> <span style="color:#f92672">=&gt;</span> <span style="color:#a6e22e">Either</span><span style="color:#f92672">[</span><span style="color:#66d9ef">Throwable</span>, <span style="color:#66d9ef">String</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span> x <span style="color:#66d9ef">=&gt;</span>  <span style="color:#a6e22e">Right</span><span style="color:#f92672">(</span>x<span style="color:#f92672">.</span>toUpperCase<span style="color:#f92672">)</span>
  <span style="color:#66d9ef">val</span> saveValueToDB<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">String</span> <span style="color:#f92672">=&gt;</span> <span style="color:#a6e22e">Either</span><span style="color:#f92672">[</span><span style="color:#66d9ef">Throwable</span>, <span style="color:#66d9ef">Unit</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span> x <span style="color:#66d9ef">=&gt;</span> <span style="color:#a6e22e">Right</span><span style="color:#f92672">(</span>println<span style="color:#f92672">(</span>x<span style="color:#f92672">))</span>
</code></pre></div><p>Sure in this context, the return type doesn&rsquo;t make much sense, but just imagine a real world scenario üòõ</p>
<p>In that case, we would no longer be able to use function composition because the return types no longer match with the input parameter of the next function.</p>
<p>One solution that normally comes to mind:</p>
<h3 id="for-comprehension">For Comprehension</h3>
<p>The following works well:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">  <span style="color:#66d9ef">for</span> <span style="color:#f92672">{</span>
    value          <span style="color:#66d9ef">&lt;-</span> getValueFromDB<span style="color:#f92672">()</span>
    transformedVal <span style="color:#66d9ef">&lt;-</span> transformValue<span style="color:#f92672">(</span>value<span style="color:#f92672">)</span>
    <span style="color:#66d9ef">_</span>              <span style="color:#66d9ef">&lt;-</span> saveValueToDB<span style="color:#f92672">(</span>transformedVal<span style="color:#f92672">)</span>
  <span style="color:#f92672">}</span> <span style="color:#66d9ef">yield</span> <span style="color:#f92672">()</span>
</code></pre></div><p>But there is another way, using <code>Kleisli</code>.</p>
<h2 id="using-kleisli">Using Kleisli</h2>
<p>Effectively, Kleisli is a  MonadTransformer but for functions. It allows us to abstractly ignore the context when performing composition of functions.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">  <span style="color:#66d9ef">val</span> res <span style="color:#66d9ef">=</span>
  <span style="color:#a6e22e">Kleisli</span><span style="color:#f92672">(</span>getValueFromDB<span style="color:#f92672">)</span> andThen
  <span style="color:#a6e22e">Kleisli</span><span style="color:#f92672">(</span>transformValue<span style="color:#f92672">)</span> andThen
  <span style="color:#a6e22e">Kleisli</span><span style="color:#f92672">(</span>saveValueToDB<span style="color:#f92672">)</span>

  res<span style="color:#f92672">.</span>run<span style="color:#f92672">()</span>
</code></pre></div><p>We need to call run in the end because the end result of res is <code>Kleisli[Either, Unit, Unit]</code></p>
<p>So thats about it for Kleisli&hellip; But if you ask me, for this particular usage, using a for-comprehension to me is a lot more straightforward.</p>
]]></content>
        </item>
        
        <item>
            <title>Scala Sealed Trait vs Sealed Abstract Class</title>
            <link>https://fares.codes/posts/scala-sealed-trait-vs-sealed-abstract-class/</link>
            <pubDate>Sun, 03 May 2020 20:00:00 +0200</pubDate>
            
            <guid>https://fares.codes/posts/scala-sealed-trait-vs-sealed-abstract-class/</guid>
            <description>From my previous articles, you&amp;rsquo;ve seen me create ADTs in two different ways:
sealed abstract class Animal object Animal { final case object Dog extends Animal final case object Cat extends Animal } or
sealed trait Animal object Animal { final case object Dog extends Animal final case object Cat extends Animal } This article will outline the difference between those two implementations.
Sealed Trait If a behavior is to be re-used, traits are very handy since they can be mixed in.</description>
            <content type="html"><![CDATA[<p>From my previous articles, you&rsquo;ve seen me create ADTs in two different ways:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#66d9ef">sealed</span> <span style="color:#66d9ef">abstract</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Animal</span>

<span style="color:#66d9ef">object</span> <span style="color:#a6e22e">Animal</span> <span style="color:#f92672">{</span>

  <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">case</span> <span style="color:#66d9ef">object</span> <span style="color:#a6e22e">Dog</span> <span style="color:#66d9ef">extends</span> <span style="color:#a6e22e">Animal</span>
  <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">case</span> <span style="color:#66d9ef">object</span> <span style="color:#a6e22e">Cat</span> <span style="color:#66d9ef">extends</span> <span style="color:#a6e22e">Animal</span>
<span style="color:#f92672">}</span>
</code></pre></div><p>or</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#66d9ef">sealed</span> <span style="color:#66d9ef">trait</span> <span style="color:#a6e22e">Animal</span>

<span style="color:#66d9ef">object</span> <span style="color:#a6e22e">Animal</span> <span style="color:#f92672">{</span>

  <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">case</span> <span style="color:#66d9ef">object</span> <span style="color:#a6e22e">Dog</span> <span style="color:#66d9ef">extends</span> <span style="color:#a6e22e">Animal</span>
  <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">case</span> <span style="color:#66d9ef">object</span> <span style="color:#a6e22e">Cat</span> <span style="color:#66d9ef">extends</span> <span style="color:#a6e22e">Animal</span>
<span style="color:#f92672">}</span>
</code></pre></div><p>This article will outline the difference between those two implementations.</p>
<h2 id="sealed-trait">Sealed Trait</h2>
<p>If a behavior is to be re-used, traits are very handy since they can be mixed in. We can also mix in multiple traits, as opposed to abstract classes where we can only extend one.</p>
<p>A disadvantage for traits (and a huge advantage for abstract classes) is that traits can&rsquo;t take constructor arguments.</p>
<p>example:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#66d9ef">sealed</span> <span style="color:#66d9ef">trait</span> <span style="color:#a6e22e">Person</span><span style="color:#f92672">(</span>name<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">String</span><span style="color:#f92672">)</span>
<span style="color:#75715e">// Will not compile
</span></code></pre></div><p>In other words, if our base behavior takes constructor arguments, use an abstract class.</p>
<p>Its worth also nothing that in traits we can do the following</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#66d9ef">sealed</span> <span style="color:#66d9ef">trait</span> <span style="color:#a6e22e">Person</span><span style="color:#f92672">{</span>
    <span style="color:#66d9ef">def</span> name<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">String</span>
<span style="color:#f92672">}</span>
</code></pre></div><p>Which ultimately is the same thing&hellip; except its a def so can be implemented as a <code>val</code> or a <code>def</code> ==&gt; more flexible</p>
<h2 id="sealed-abstract-class">Sealed Abstract Class</h2>
<p>The primary advantage of abstract classes over traits is that they have a direct mapping to a structure in java, as opposed to trait which do not.</p>
<p>So if you intend on calling your code will be accessed in java, think about defining abstract classes.</p>
<p>Another worthy note, mentioned above for traits:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#66d9ef">sealed</span> <span style="color:#66d9ef">abstract</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Person</span><span style="color:#f92672">(</span>name<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">String</span><span style="color:#f92672">)</span>
</code></pre></div><p>name is a <code>val</code>. So it wouldnt be possible for a case class to implement name as a def (which could have been possible with a trait) ==&gt; Less flexible.</p>
<h2 id="if-you-must-remember-2-things">If you must remember 2 things</h2>
<p>A class can only extend one abstract class, as opposed to traits where we can mix in multiple traits</p>
<p>If you want to call your code from java, use abstract classes since Scala traits with implemented methods can‚Äôt be called from Java code.</p>
<h2 id="general-advice">General advice</h2>
<p>If you&rsquo;re not sure, you can start by creating a trait and move to an abstract class later on if you need it. Keep in mind that traits are more flexible.</p>
]]></content>
        </item>
        
        <item>
            <title>Smart Constructors in Scala</title>
            <link>https://fares.codes/posts/smart-constructors-in-scala/</link>
            <pubDate>Sun, 03 May 2020 10:00:00 +0200</pubDate>
            
            <guid>https://fares.codes/posts/smart-constructors-in-scala/</guid>
            <description>Assume we have the following ADT:
sealed trait Person { def name: String def age: Int } object Person { final case class Adult(name: String, age: Int, fieldOfWork: String) extends Person final case class Child(name: String,age: Int, favAnimal: String) extends Person } Probably a very naive way to see humanity but for our example, it&amp;rsquo;ll do.
So a Person can either be an Adult with a field of work or a Child with a favorite animal.</description>
            <content type="html"><![CDATA[<p>Assume we have the following ADT:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">
<span style="color:#66d9ef">sealed</span> <span style="color:#66d9ef">trait</span> <span style="color:#a6e22e">Person</span> <span style="color:#f92672">{</span>
  <span style="color:#66d9ef">def</span> name<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">String</span>
  <span style="color:#66d9ef">def</span> age<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Int</span>
<span style="color:#f92672">}</span>

<span style="color:#66d9ef">object</span> <span style="color:#a6e22e">Person</span> <span style="color:#f92672">{</span>

  <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">case</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Adult</span><span style="color:#f92672">(</span>name<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">String</span><span style="color:#f92672">,</span> age<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Int</span><span style="color:#f92672">,</span> fieldOfWork<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">String</span><span style="color:#f92672">)</span>
      <span style="color:#66d9ef">extends</span> <span style="color:#a6e22e">Person</span>
  <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">case</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Child</span><span style="color:#f92672">(</span>name<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">String</span><span style="color:#f92672">,</span>age<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Int</span><span style="color:#f92672">,</span> favAnimal<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">String</span><span style="color:#f92672">)</span>
      <span style="color:#66d9ef">extends</span> <span style="color:#a6e22e">Person</span>
<span style="color:#f92672">}</span>

</code></pre></div><p>Probably a very naive way to see humanity but for our example, it&rsquo;ll do.</p>
<p>So a Person can either be an <code>Adult</code> with a field of work or a <code>Child</code> with a favorite animal.</p>
<p>And logically, the line of demarcation between and adult and a child is 18 years old.</p>
<p>The problem with our implementation is that nothing stops us from doing the following:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#66d9ef">val</span> kid <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">Adult</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Daniel&#34;</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">12</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;President&#34;</span><span style="color:#f92672">)</span>
<span style="color:#75715e">//kid: Adult = Adult(Daniel,12,President)
</span></code></pre></div><p>Not exactly what we want&hellip;</p>
<p>And yes, we could add a validation later on in our code to enforce certain laws but it&rsquo;ll just be extra boiler plate.</p>
<p>Another very valid solution is the use of <code>Refined Types</code>. But in case you do not/ cannot add that dependency to your project, you can still get away with using <code>Smart Constructors</code></p>
<h2 id="smart-constructor">Smart Constructor</h2>
<p>For our class <code>Adult</code> a smart constructor will look like this:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#66d9ef">final</span> <span style="color:#66d9ef">case</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Adult</span> <span style="color:#66d9ef">private</span> <span style="color:#f92672">(</span>name<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">String</span><span style="color:#f92672">,</span> age<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Int</span><span style="color:#f92672">,</span> fieldOfWork<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">String</span><span style="color:#f92672">)</span>
    <span style="color:#66d9ef">extends</span> <span style="color:#a6e22e">Person</span>
<span style="color:#66d9ef">object</span> <span style="color:#a6e22e">Adult</span> <span style="color:#f92672">{</span>
  <span style="color:#66d9ef">def</span> apply<span style="color:#f92672">(</span>name<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">String</span><span style="color:#f92672">,</span> age<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Int</span><span style="color:#f92672">,</span> fieldOfWork<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">String</span><span style="color:#f92672">)</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Option</span><span style="color:#f92672">[</span><span style="color:#66d9ef">Adult</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span>
    <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>age <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">18</span><span style="color:#f92672">)</span> <span style="color:#a6e22e">Some</span><span style="color:#f92672">(</span><span style="color:#66d9ef">new</span> <span style="color:#a6e22e">Adult</span><span style="color:#f92672">(</span>name<span style="color:#f92672">,</span> age<span style="color:#f92672">,</span> fieldOfWork<span style="color:#f92672">))</span> <span style="color:#66d9ef">else</span> <span style="color:#a6e22e">None</span>
<span style="color:#f92672">}</span>
</code></pre></div><p><strong><strong>Note</strong> that I&rsquo;ve tested the above code in scala 2.11.11 and it does not work. Only starting version 2.12.11</strong></p>
<p>What happened there? One we made the constructor of Adult private so that we could no longer do:</p>
<p><code>new Adult(&quot;Daniel&quot;, 12, &quot;prez&quot;)</code> from somewhere outside the companion object.
Second thing, we defined our own apply method that returns an <code>Option[Adult]</code> that is either Some if the input is valid or None otherwise.</p>
<p>Example:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#66d9ef">val</span> kid <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">Adult</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Daniel&#34;</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">12</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;prez&#34;</span><span style="color:#f92672">)</span>
<span style="color:#75715e">// None
</span><span style="color:#75715e"></span><span style="color:#66d9ef">val</span> adult <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">Adult</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Fares&#34;</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">23</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;Data Engineer&#34;</span><span style="color:#f92672">)</span>
<span style="color:#75715e">//Some(Adult(Fares,23,Data Engineer))
</span></code></pre></div><p>The same should also be done for the Child case class.</p>
]]></content>
        </item>
        
        <item>
            <title>PureConfig From A to F</title>
            <link>https://fares.codes/posts/pureconfig-from-a-to-f/</link>
            <pubDate>Mon, 13 Apr 2020 10:00:00 +0000</pubDate>
            
            <guid>https://fares.codes/posts/pureconfig-from-a-to-f/</guid>
            <description>If you&amp;rsquo;re saying to yourself: &amp;ldquo;Surely theres a typo here&amp;hellip; Its normally From A to Z&amp;rdquo;, yes&amp;hellip; but since I have much left to learn in pureconfig, well stop at F üòâ
Sometimes I write useless articles (cond or cats show) and in other times, I write something slightly more interesting and useful üòÉ
PureConfig allows us to quickly and easily load configurations from config files in a type safe and boiler plate free manner.</description>
            <content type="html"><![CDATA[<p>If you&rsquo;re saying to yourself: &ldquo;Surely theres a typo here&hellip; Its normally <code>From A to Z</code>&rdquo;, yes&hellip; but since I have much left to learn in pureconfig, well stop at F üòâ</p>
<p>Sometimes I write useless articles (<code>cond</code> or <code>cats show</code>) and in other times, I write something slightly more interesting and useful üòÉ</p>
<p>PureConfig allows us to quickly and easily load configurations from config files in a type safe and boiler plate free manner.</p>
<h2 id="how-does-it-work">How Does It Work</h2>
<p>For this simple demo, ill be using the following version of pureconfig:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#e6db74">&#34;com.github.pureconfig&#34;</span> <span style="color:#f92672">%%</span> <span style="color:#e6db74">&#34;pureconfig&#34;</span> <span style="color:#f92672">%</span> <span style="color:#e6db74">&#34;0.12.3&#34;</span>
</code></pre></div><p>This is for the time being the latest version.</p>
<p>On to our loading of configurations:</p>
<p>create a <code>reference.conf</code> or an <code>application.conf</code> and store in it your config files.</p>
<p>For example:</p>
<pre><code class="language-conf" data-lang="conf">person {
  name: &quot;Fares&quot;
  age: 23
  field-of-work: &quot;DataEngineer&quot;
  hobbies: [&quot;Biking&quot;, &quot;Hiking&quot;]
}
</code></pre><p>and to load the above?</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#66d9ef">import</span> pureconfig._
<span style="color:#66d9ef">import</span> pureconfig.generic.auto._

<span style="color:#66d9ef">final</span> <span style="color:#66d9ef">case</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Person</span><span style="color:#f92672">(</span>name<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">String</span><span style="color:#f92672">,</span>
                        age<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Int</span><span style="color:#f92672">,</span>
                        fieldOfWork<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">String</span><span style="color:#f92672">,</span>
                        hobbies<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">List</span><span style="color:#f92672">[</span><span style="color:#66d9ef">String</span><span style="color:#f92672">])</span>
<span style="color:#66d9ef">val</span> person <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">ConfigSource</span><span style="color:#f92672">.</span>default<span style="color:#f92672">.</span>at<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;person&#34;</span><span style="color:#f92672">).</span>loadOrThrow<span style="color:#f92672">[</span><span style="color:#66d9ef">Person</span><span style="color:#f92672">]</span>

println<span style="color:#f92672">(</span>person<span style="color:#f92672">)</span>
</code></pre></div><p>would output:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">Person(Fares,23,DataEngineer,List(Biking, Hiking))
</code></pre></div><p>Awesome and simple üòõ</p>
<p>One note, even if IntelliJ says that <code>import pureconfig.generic.auto._</code> is an unused import, its actually used. Its just that IntelliJ is bad at dealing with <code>Macros</code>.</p>
<h3 id="but-lets-make-it-better">But Lets Make It Better</h3>
<p><code>fieldOfWork</code> doesn&rsquo;t have to be a <code>String</code>. We could instead represent it in an ADT:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#66d9ef">sealed</span> <span style="color:#66d9ef">abstract</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">FieldOfWork</span>
<span style="color:#66d9ef">object</span> <span style="color:#a6e22e">FieldOfWork</span> <span style="color:#f92672">{</span>
  <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">case</span> <span style="color:#66d9ef">object</span> <span style="color:#a6e22e">DataEngineer</span> <span style="color:#66d9ef">extends</span> <span style="color:#a6e22e">FieldOfWork</span>
  <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">case</span> <span style="color:#66d9ef">object</span> <span style="color:#a6e22e">Business</span> <span style="color:#66d9ef">extends</span> <span style="color:#a6e22e">FieldOfWork</span>
<span style="color:#f92672">}</span>
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#66d9ef">final</span> <span style="color:#66d9ef">case</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Person</span><span style="color:#f92672">(</span>name<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">String</span><span style="color:#f92672">,</span>
                        age<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Int</span><span style="color:#f92672">,</span>
                        fieldOfWork<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">FieldOfWork</span><span style="color:#f92672">,</span>
                        hobbies<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">List</span><span style="color:#f92672">[</span><span style="color:#66d9ef">String</span><span style="color:#f92672">])</span>
<span style="color:#66d9ef">val</span> person <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">ConfigSource</span><span style="color:#f92672">.</span>default<span style="color:#f92672">.</span>at<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;person&#34;</span><span style="color:#f92672">).</span>loadOrThrow<span style="color:#f92672">[</span><span style="color:#66d9ef">Person</span><span style="color:#f92672">]</span>
println<span style="color:#f92672">(</span>person<span style="color:#f92672">)</span>
</code></pre></div><p>with the following config file:</p>
<pre><code class="language-conf" data-lang="conf">person {
  name: &quot;Fares&quot;
  age: 23
  field-of-work {
    type: data-engineer
  }
  hobbies: [&quot;Biking&quot;, &quot;Hiking&quot;]
}
</code></pre><p>would yield:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">Person(Fares,23,DataEngineer,List(Biking, Hiking))
</code></pre></div><p>We had to specify the type of &ldquo;field-of-work&rdquo; in the additional fields. Because by default, pureconfig will not know.
As specified in the documentation: <a href="https://pureconfig.github.io/docs/overriding-behavior-for-sealed-families.html">Sealed Families</a></p>
<p>But there is a way to change this default behavior, and thats by defining an implicit <code>EnumCoproductHint[FieldOfWork]</code>.</p>
<p>Note that as of version 0.11, this is deprecated and instead we have are asked to use the following:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#66d9ef">import</span> pureconfig.generic.semiauto._

<span style="color:#66d9ef">implicit</span> <span style="color:#66d9ef">val</span> fieldOfWorkConvert<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">ConfigReader</span><span style="color:#f92672">[</span><span style="color:#66d9ef">FieldOfWork</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span>
    deriveEnumerationReader<span style="color:#f92672">[</span><span style="color:#66d9ef">FieldOfWork</span><span style="color:#f92672">]</span>
</code></pre></div><p>we could then write the conf in the following manner:</p>
<pre><code class="language-conf" data-lang="conf">person {
  name: &quot;Fares&quot;
  age: 23
  field-of-work: data-engineer
  hobbies: [&quot;Biking&quot;, &quot;Hiking&quot;]
}
</code></pre><p>Noticed how we have to write the config in Kebab Case? that is because by default in pureconfig, enumerations are encored as string with the <code>kebab-case</code> representation of the class name.</p>
<p>Quick recap:</p>
<h2 id="a-note-about-different-cases">A Note About Different Cases</h2>
<ul>
<li>Camel Case: Is how you would normally define variable in scala, example: <code>val myName: String = &quot;Fares&quot;</code>.</li>
<li>Pascal Case: Is how you would normally name your case classes and objects&hellip; <code>MyExample</code></li>
<li>Kebab/Spinal Case: Is how pureconfig encodes enumerations üòõ <code>my-example-is-self-explanatory</code></li>
<li>Snake/Underscore Case: Is how we often name our env variable <code>SOME_EXAMPLE_HERE</code></li>
<li>Alternating Caps: Is HoW yOu WoUlD wRiTe If YoU&rsquo;Re A <del>fUcKiNg</del> MoRrOn.</li>
</ul>
<p>For info <code>Alternating Caps</code> is not supported out of the box in pureconfig (I wonder why&hellip; üôÑ)</p>
<h2 id="going-back">Going Back</h2>
<p>If we wanted to change the default representation, we could do it in the implicit:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">  <span style="color:#66d9ef">implicit</span> <span style="color:#66d9ef">val</span> fieldOfWorkConvert<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">ConfigReader</span><span style="color:#f92672">[</span><span style="color:#66d9ef">FieldOfWork</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span>
    deriveEnumerationReader<span style="color:#f92672">[</span><span style="color:#66d9ef">FieldOfWork</span><span style="color:#f92672">](</span>
      <span style="color:#a6e22e">ConfigFieldMapping</span><span style="color:#f92672">(</span><span style="color:#a6e22e">PascalCase</span><span style="color:#f92672">,</span> <span style="color:#a6e22e">PascalCase</span><span style="color:#f92672">))</span>
</code></pre></div><p>First param to <code>ConfigFieldMapping</code>, is the naming convention used by the case class, second is how the representation in the conf file.</p>
<p>This would allow us to define data engineer in the conf file as: <code>DataEngineer</code></p>
<p>We can define our own instance of <code>NamingConvention</code> and pass it to the <code>ConfigFieldMapping</code></p>
<h2 id="overriding-behavior">Overriding Behavior</h2>
<p>The same way we overrode the behavior of Sealed Families, we can override the behavior when loading config from a case class by providing a <code>ProductHint[T]</code>.</p>
<p>Here is what we can override:</p>
<ol>
<li>FieldName Mapping to Case Classes (Default is <code>Kebab Case</code>)</li>
<li>Default Values (Default is to take value from cases class if they exist)</li>
<li>Unknown Keys (Default is to ignore)</li>
<li>Missing Keys (Ok if optional, otherwise return key not found)</li>
</ol>
<h3 id="mapping-fieldnames-to-case-classes">Mapping FieldNames to Case Classes</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#66d9ef">implicit</span> <span style="color:#66d9ef">val</span> productHint <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">ProductHint</span><span style="color:#f92672">[</span><span style="color:#66d9ef">SampleConf</span><span style="color:#f92672">](</span><span style="color:#66d9ef">new</span> <span style="color:#a6e22e">ConfigFieldMapping</span> <span style="color:#f92672">{</span>
  <span style="color:#66d9ef">def</span> apply<span style="color:#f92672">(</span>fieldName<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">String</span><span style="color:#f92672">)</span> <span style="color:#66d9ef">=</span> fieldName<span style="color:#f92672">.</span>toUpperCase
<span style="color:#f92672">})</span>
</code></pre></div><p>Would allow us to load conf where all the keys in the config file are in uppercase.</p>
<h3 id="default-values">Default Values</h3>
<p>To no longer use the default values defined in the case classes:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#66d9ef">implicit</span> <span style="color:#66d9ef">val</span> hint <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">ProductHint</span><span style="color:#f92672">[</span><span style="color:#66d9ef">SampleConf</span><span style="color:#f92672">](</span>useDefaultArgs <span style="color:#66d9ef">=</span> <span style="color:#66d9ef">false</span><span style="color:#f92672">)</span>
</code></pre></div><h3 id="unknown-keys">Unknown Keys</h3>
<p>To no longer ignore unknown keys:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#66d9ef">implicit</span> <span style="color:#66d9ef">val</span> hint <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">ProductHint</span><span style="color:#f92672">[</span><span style="color:#66d9ef">SampleConf</span><span style="color:#f92672">](</span>allowUnknownKeys <span style="color:#66d9ef">=</span> <span style="color:#66d9ef">false</span><span style="color:#f92672">)</span>
</code></pre></div><h3 id="missing-keys">Missing Keys</h3>
<p>If for some reason, we would like pureconfig to handle missing keys, we would have to extends ReadsMissingKeys and define a default behavior and return a config reader.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#66d9ef">implicit</span> <span style="color:#66d9ef">val</span> maybeIntReader <span style="color:#66d9ef">=</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">ConfigReader</span><span style="color:#f92672">[</span><span style="color:#66d9ef">Int</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">with</span> <span style="color:#a6e22e">ReadsMissingKeys</span> <span style="color:#f92672">{</span>
  <span style="color:#66d9ef">override</span> <span style="color:#66d9ef">def</span> from<span style="color:#f92672">(</span>cur<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">ConfigCursor</span><span style="color:#f92672">)</span> <span style="color:#66d9ef">=</span>
    <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>cur<span style="color:#f92672">.</span>isUndefined<span style="color:#f92672">)</span> <span style="color:#a6e22e">Right</span><span style="color:#f92672">(</span><span style="color:#ae81ff">42</span><span style="color:#f92672">)</span> <span style="color:#66d9ef">else</span> <span style="color:#a6e22e">ConfigReader</span><span style="color:#f92672">[</span><span style="color:#66d9ef">Int</span><span style="color:#f92672">].</span>from<span style="color:#f92672">(</span>cur<span style="color:#f92672">)</span>
<span style="color:#f92672">}</span>
</code></pre></div><h2 id="loading-classes">Loading Classes</h2>
<p>PureConfig is based on shapeless and shapeless does not support non case classes. So:</p>
<p>While case classes are supported by pureconfig out of the box, <code>class</code> is not. For those, we would need to provide an implicit instance of <code>ConfigReader[T]</code></p>
<p>To do that we can follow one of three options:</p>
<ol>
<li>
<p>Modify an existing ConfigReader</p>
</li>
<li>
<p>Use a ConfigReader Factory Method</p>
</li>
<li>
<p>Create an implementation of ConfigReader from scratch</p>
</li>
</ol>
<h3 id="modifying-an-existing-configreader">Modifying an Existing ConfigReader</h3>
<p>Assume we have a MyInt that takes an int Value, we can modify the existing ConfigReader[Int] to work on MyInt class.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#66d9ef">implicit</span> <span style="color:#66d9ef">val</span> myIntReader <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">ConfigReader</span><span style="color:#f92672">[</span><span style="color:#66d9ef">Int</span><span style="color:#f92672">].</span>map<span style="color:#f92672">(</span>n <span style="color:#66d9ef">=&gt;</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">MyInt</span><span style="color:#f92672">(</span>n<span style="color:#f92672">))</span>
</code></pre></div><h3 id="using-a-factorymethod">Using a FactoryMethod</h3>
<p>If we were to use a factory method for the same example above:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#66d9ef">implicit</span> <span style="color:#66d9ef">val</span> myIntReader <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">ConfigReader</span><span style="color:#f92672">.</span>fromString<span style="color:#f92672">[</span><span style="color:#66d9ef">MyInt</span><span style="color:#f92672">](</span>
  <span style="color:#a6e22e">ConvertHelpers</span><span style="color:#f92672">.</span>catchReadError<span style="color:#f92672">(</span>s <span style="color:#66d9ef">=&gt;</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">MyInt</span><span style="color:#f92672">(</span>s<span style="color:#f92672">.</span>toInt<span style="color:#f92672">)))</span>
</code></pre></div><h3 id="implementing-configreader-from-scratch">Implementing ConfigReader from Scratch</h3>
<p>To implement a config reader from scratch we would need to define a from function that takes in the <code>ConfigCursor</code> and returns an Either of <code>T</code> or a list of errors:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#66d9ef">implicit</span> <span style="color:#66d9ef">val</span> myIntReader <span style="color:#66d9ef">=</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">ConfigReader</span><span style="color:#f92672">[</span><span style="color:#66d9ef">MyInt</span><span style="color:#f92672">]</span> <span style="color:#f92672">{</span>
  <span style="color:#66d9ef">def</span> from<span style="color:#f92672">(</span>cur<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">ConfigCursor</span><span style="color:#f92672">)</span> <span style="color:#66d9ef">=</span> cur<span style="color:#f92672">.</span>asString<span style="color:#f92672">.</span>map<span style="color:#f92672">(</span>s <span style="color:#66d9ef">=&gt;</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">MyInt</span><span style="color:#f92672">(</span>s<span style="color:#f92672">.</span>toInt<span style="color:#f92672">))</span>
<span style="color:#f92672">}</span>

<span style="color:#a6e22e">ConfigSource</span><span style="color:#f92672">.</span>string<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;{ n: 1 }&#34;</span><span style="color:#f92672">).</span>load<span style="color:#f92672">[</span><span style="color:#66d9ef">MyInt</span><span style="color:#f92672">]</span>

</code></pre></div><p>If it looks easy, its because the example Ive used is rather trivial. In most cases we&rsquo;d have a more complex class at hand so lets take a shallow dive into those cases.</p>
<h2 id="combinators">Combinators</h2>
<p>Combinators provide an easy way to transform existing ConfigReaders to support new types. We&rsquo;ve seen map in our first example.</p>
<h3 id="emap">emap</h3>
<p>Allows us to validate the input and provide detailed errors in the case of failure.</p>
<p>From the official doc:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#66d9ef">import</span> pureconfig.error._

<span style="color:#66d9ef">case</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Port</span><span style="color:#f92672">(</span>number<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Int</span><span style="color:#f92672">)</span>
<span style="color:#66d9ef">case</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">PortConf</span><span style="color:#f92672">(</span>port<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Port</span><span style="color:#f92672">)</span>

<span style="color:#75715e">// reads a TCP port, validating the number range
</span><span style="color:#75715e"></span><span style="color:#66d9ef">implicit</span> <span style="color:#66d9ef">val</span> portReader <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">ConfigReader</span><span style="color:#f92672">[</span><span style="color:#66d9ef">Int</span><span style="color:#f92672">].</span>emap <span style="color:#f92672">{</span>
  <span style="color:#66d9ef">case</span> n <span style="color:#66d9ef">if</span> n <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">&amp;&amp;</span> n <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">65536</span> <span style="color:#66d9ef">=&gt;</span> <span style="color:#a6e22e">Right</span><span style="color:#f92672">(</span><span style="color:#a6e22e">Port</span><span style="color:#f92672">(</span>n<span style="color:#f92672">))</span>
  <span style="color:#66d9ef">case</span> n <span style="color:#66d9ef">=&gt;</span> <span style="color:#a6e22e">Left</span><span style="color:#f92672">(</span><span style="color:#a6e22e">CannotConvert</span><span style="color:#f92672">(</span>n<span style="color:#f92672">.</span>toString<span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;Port&#34;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;Invalid port number&#34;</span><span style="color:#f92672">))</span>
<span style="color:#f92672">}</span>
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#a6e22e">ConfigSource</span><span style="color:#f92672">.</span>string<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;{ port = 8080 }&#34;</span><span style="color:#f92672">).</span>load<span style="color:#f92672">[</span><span style="color:#66d9ef">PortConf</span><span style="color:#f92672">]</span>
<span style="color:#75715e">// res1: ConfigReader.Result[PortConf] = Right(PortConf(Port(8080)))
</span><span style="color:#75715e"></span><span style="color:#a6e22e">ConfigSource</span><span style="color:#f92672">.</span>string<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;{ port = -1 }&#34;</span><span style="color:#f92672">).</span>load<span style="color:#f92672">[</span><span style="color:#66d9ef">PortConf</span><span style="color:#f92672">]</span>
<span style="color:#75715e">// res2: ConfigReader.Result[PortConf] = Left(
</span><span style="color:#75715e">//   ConfigReaderFailures(
</span><span style="color:#75715e">//     ConvertFailure(
</span><span style="color:#75715e">//       CannotConvert(&#34;-1&#34;, &#34;Port&#34;, &#34;Invalid port number&#34;),
</span><span style="color:#75715e">//       None,
</span><span style="color:#75715e">//       &#34;port&#34;
</span><span style="color:#75715e">//     ),
</span><span style="color:#75715e">//     List()
</span><span style="color:#75715e">//   )
</span><span style="color:#75715e">// )
</span></code></pre></div><h3 id="orelse">orElse</h3>
<p>orElse can be used to provide multiple ways to load a config</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#66d9ef">val</span> csvIntListReader <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">ConfigReader</span><span style="color:#f92672">[</span><span style="color:#66d9ef">String</span><span style="color:#f92672">].</span>map<span style="color:#f92672">(</span><span style="color:#66d9ef">_</span><span style="color:#f92672">.</span>split<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;,&#34;</span><span style="color:#f92672">).</span>map<span style="color:#f92672">(</span><span style="color:#66d9ef">_</span><span style="color:#f92672">.</span>toInt<span style="color:#f92672">).</span>toList<span style="color:#f92672">)</span>
<span style="color:#66d9ef">implicit</span> <span style="color:#66d9ef">val</span> intListReader <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">ConfigReader</span><span style="color:#f92672">[</span><span style="color:#66d9ef">List</span><span style="color:#f92672">[</span><span style="color:#66d9ef">Int</span><span style="color:#f92672">]].</span>orElse<span style="color:#f92672">(</span>csvIntListReader<span style="color:#f92672">)</span>

<span style="color:#66d9ef">case</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">IntListConf</span><span style="color:#f92672">(</span>list<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">List</span><span style="color:#f92672">[</span><span style="color:#66d9ef">Int</span><span style="color:#f92672">])</span>
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#a6e22e">ConfigSource</span><span style="color:#f92672">.</span>string<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;&#34;&#34;{ list = [1,2,3] }&#34;&#34;&#34;</span><span style="color:#f92672">).</span>load<span style="color:#f92672">[</span><span style="color:#66d9ef">IntListConf</span><span style="color:#f92672">]</span>
<span style="color:#75715e">// res3: ConfigReader.Result[IntListConf] = Right(IntListConf(List(1, 2, 3)))
</span><span style="color:#75715e"></span><span style="color:#a6e22e">ConfigSource</span><span style="color:#f92672">.</span>string<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;&#34;&#34;{ list = &#34;4,5,6&#34; }&#34;&#34;&#34;</span><span style="color:#f92672">).</span>load<span style="color:#f92672">[</span><span style="color:#66d9ef">IntListConf</span><span style="color:#f92672">]</span>
<span style="color:#75715e">// res4: ConfigReader.Result[IntListConf] = Right(IntListConf(List(4, 5, 6)))
</span></code></pre></div><h2 id="config-cursors">Config Cursors</h2>
<p>In the third method to create a configreader, we talked about defining a <code>from</code> method that takes a config cursor and returns a type <code>T</code>.</p>
<p>So what are config cursors?</p>
<p>Config Cursor is a wrapper of the class <code>ConfigValue</code> by Typesafe Config. The added value of using <code>ConfigCursor</code> is that most errors are handled automatically and enriched with information regarding the location of the error.</p>
<p>Let us turn our <code>Person</code> case class into a class and try to write our own ConfigReader[Person].</p>
<p>The result would look something like this:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">  <span style="color:#66d9ef">import</span> pureconfig._
  <span style="color:#66d9ef">import</span> pureconfig.generic.auto._
  <span style="color:#66d9ef">import</span> cats.syntax.either._ <span style="color:#75715e">// Because Im working with scala 2.11 (not yet right biased)
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">implicit</span> <span style="color:#66d9ef">val</span> fieldOfWorkConvert<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">ConfigReader</span><span style="color:#f92672">[</span><span style="color:#66d9ef">FieldOfWork</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span>
    deriveEnumerationReader<span style="color:#f92672">[</span><span style="color:#66d9ef">FieldOfWork</span><span style="color:#f92672">](</span>
      <span style="color:#a6e22e">ConfigFieldMapping</span><span style="color:#f92672">(</span><span style="color:#a6e22e">PascalCase</span><span style="color:#f92672">,</span> <span style="color:#a6e22e">PascalCase</span><span style="color:#f92672">))</span>
  <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Person</span><span style="color:#f92672">(</span>name<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">String</span><span style="color:#f92672">,</span>
               age<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Int</span><span style="color:#f92672">,</span>
               fieldOfWork<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">FieldOfWork</span><span style="color:#f92672">,</span>
               hobbies<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">List</span><span style="color:#f92672">[</span><span style="color:#66d9ef">String</span><span style="color:#f92672">])</span> <span style="color:#f92672">{</span>
    <span style="color:#66d9ef">override</span> <span style="color:#66d9ef">def</span> toString<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">String</span> <span style="color:#f92672">=</span>
      <span style="color:#e6db74">s&#34;&#34;&#34;Person(</span><span style="color:#e6db74">$name</span><span style="color:#e6db74">, </span><span style="color:#e6db74">$age</span><span style="color:#e6db74"> years old, works as a </span><span style="color:#e6db74">$fieldOfWork</span><span style="color:#e6db74"> and has the following hobbies: </span><span style="color:#e6db74">${</span>hobbies
        <span style="color:#f92672">.</span>mkString<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;,&#34;</span><span style="color:#f92672">)</span><span style="color:#e6db74">}</span><span style="color:#e6db74">)&#34;&#34;&#34;</span>
  <span style="color:#f92672">}</span>

  <span style="color:#66d9ef">implicit</span> <span style="color:#66d9ef">val</span> personReader <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">ConfigReader</span><span style="color:#f92672">.</span>fromCursor<span style="color:#f92672">[</span><span style="color:#66d9ef">Person</span><span style="color:#f92672">]</span> <span style="color:#f92672">{</span> cur <span style="color:#66d9ef">=&gt;</span>
    <span style="color:#66d9ef">for</span> <span style="color:#f92672">{</span>
      objCur <span style="color:#66d9ef">&lt;-</span> cur<span style="color:#f92672">.</span>asObjectCursor <span style="color:#75715e">// Right if it points to an object left is a list of errors
</span><span style="color:#75715e"></span>      nameCur <span style="color:#66d9ef">&lt;-</span> objCur<span style="color:#f92672">.</span>atKey<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;name&#34;</span><span style="color:#f92672">)</span>
      name <span style="color:#66d9ef">&lt;-</span> nameCur<span style="color:#f92672">.</span>asString

      ageCur <span style="color:#66d9ef">&lt;-</span> objCur<span style="color:#f92672">.</span>atKey<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;age&#34;</span><span style="color:#f92672">)</span>
      age <span style="color:#66d9ef">&lt;-</span> ageCur<span style="color:#f92672">.</span>asInt
      seasonCur <span style="color:#66d9ef">&lt;-</span> objCur<span style="color:#f92672">.</span>atKey<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;field-of-work&#34;</span><span style="color:#f92672">)</span>
      season <span style="color:#66d9ef">&lt;-</span> fieldOfWorkConvert<span style="color:#f92672">.</span>from<span style="color:#f92672">(</span>seasonCur<span style="color:#f92672">)</span>

      hobbiesCur <span style="color:#66d9ef">&lt;-</span> objCur<span style="color:#f92672">.</span>atKey<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;hobbies&#34;</span><span style="color:#f92672">)</span>
      hobbiesList <span style="color:#66d9ef">&lt;-</span> hobbiesCur<span style="color:#f92672">.</span>asList<span style="color:#f92672">.</span>map<span style="color:#f92672">(</span><span style="color:#66d9ef">_</span><span style="color:#f92672">.</span>map<span style="color:#f92672">(</span><span style="color:#66d9ef">_</span><span style="color:#f92672">.</span>asString<span style="color:#f92672">.</span>getOrElse<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;&#34;</span><span style="color:#f92672">)))</span>

    <span style="color:#f92672">}</span> <span style="color:#66d9ef">yield</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">Person</span><span style="color:#f92672">(</span>name<span style="color:#f92672">,</span> age<span style="color:#f92672">,</span> season<span style="color:#f92672">,</span> hobbiesList<span style="color:#f92672">)</span>
  <span style="color:#f92672">}</span>

  <span style="color:#66d9ef">val</span> person <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">ConfigSource</span><span style="color:#f92672">.</span>default<span style="color:#f92672">.</span>at<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;person2&#34;</span><span style="color:#f92672">).</span>loadOrThrow<span style="color:#f92672">[</span><span style="color:#66d9ef">Person</span><span style="color:#f92672">]</span>
  println<span style="color:#f92672">(</span>person<span style="color:#f92672">)</span>

</code></pre></div><p>with the following config file:</p>
<pre><code class="language-conf" data-lang="conf">person2 {
  name: &quot;Fares&quot;
  age: 23
  field-of-work: DataEngineer
  hobbies: [&quot;Biking&quot;, &quot;Hiking&quot;]
}
</code></pre><p>We would get:</p>
<p><code>Person(Fares, 23 years old, works as a DataEngineer and has the following hobbies: Biking,Hiking)</code></p>
<p>So it is doable, but&hellip; its a lot more effort.</p>
<h2 id="things-i-have-yet-to-understand">Things I have yet to understand</h2>
<ol>
<li>Materialized Derivations</li>
<li>Macros in Scala</li>
<li>TypeTags</li>
</ol>
]]></content>
        </item>
        
        <item>
            <title>Cats Chain</title>
            <link>https://fares.codes/posts/cats-chain/</link>
            <pubDate>Fri, 03 Apr 2020 10:00:00 +0000</pubDate>
            
            <guid>https://fares.codes/posts/cats-chain/</guid>
            <description>In previous articles, I&amp;rsquo;ve talked about accumulating errors with Validated, and for that we said that we needed a Semigroup on the left side that will be used to accumulate the errors (We used a NonEmptyList[A] as an example). Today well talk about Chain and NonEmptyChain[A] and how it&amp;rsquo;s different from a List.
Appending to a List requires iterating over the entire collection (linear time). So using ValidatedNel[A,B] will make us incur a heavy performance penalty specially if we traverse it.</description>
            <content type="html"><![CDATA[<p>In previous articles, I&rsquo;ve talked about accumulating errors with Validated, and for that we said that we needed a <code>Semigroup</code> on the left side that will be used to accumulate the errors (We used a <code>NonEmptyList[A]</code> as an example). Today well talk about <code>Chain</code> and <code>NonEmptyChain[A]</code> and how it&rsquo;s different from a List.</p>
<p>Appending to a <code>List</code> requires iterating over the entire collection (linear time). So using <code>ValidatedNel[A,B]</code> will make us incur a heavy performance penalty specially if we <code>traverse</code> it.</p>
<p>In comes <code>Chain</code>. Chain is very similar to List, but supports O(1) time append and prepend. This makes it a much better fit to use with <code>Validated</code>, <code>Ior</code> or <code>Writer</code> (article on this pretty soon).</p>
<p>Cats also offers type aliases like <code>ValidatedNec</code> or <code>IorNec</code> as well as helper functions like <code>groupByNec</code> or <code>Validated.invalidNec</code>.</p>
<p>Here are some benchmarks from the typelevel cats documentation <a href="https://typelevel.org/cats/datatypes/chain.html">https://typelevel.org/cats/datatypes/chain.html</a>:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">[info] Benchmark                                  Mode  Cnt   Score   Error  Units
[info] CollectionMonoidBench.accumulateChain     thrpt   20  51.911 ¬± 7.453  ops/s
[info] CollectionMonoidBench.accumulateList      thrpt   20   6.973 ¬± 0.781  ops/s
[info] CollectionMonoidBench.accumulateVector    thrpt   20   6.304 ¬± 0.129  ops/s
</code></pre></div><p>and some function calls:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">[info] Benchmark                           Mode  Cnt          Score         Error  Units
[info] ChainBench.foldLeftLargeChain      thrpt   20        117.267 ¬±       1.815  ops/s
[info] ChainBench.foldLeftLargeList       thrpt   20        135.954 ¬±       3.340  ops/s
[info] ChainBench.foldLeftLargeVector     thrpt   20         61.613 ¬±       1.326  ops/s
[info]
[info] ChainBench.mapLargeChain           thrpt   20         59.379 ¬±       0.866  ops/s
[info] ChainBench.mapLargeList            thrpt   20         66.729 ¬±       7.165  ops/s
[info] ChainBench.mapLargeVector          thrpt   20         61.374 ¬±       2.004  ops/s
</code></pre></div><h2 id="nonemptychain">NonEmptyChain</h2>
<p>Similarly to <code>NonEmptyList</code> NonEmptyChain has a semigroup but not a monoid (obviously üòõ).</p>
<p>Cats doc shows a couple examples on how to create them or transform NonEmptyList into a NonEmptyChain:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">
<span style="color:#66d9ef">import</span> cats.data._
<span style="color:#75715e">// import cats.data._
</span><span style="color:#75715e"></span>
<span style="color:#a6e22e">NonEmptyChain</span><span style="color:#f92672">(</span><span style="color:#ae81ff">1</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">2</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">3</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">4</span><span style="color:#f92672">)</span>
<span style="color:#75715e">// res0: cats.data.NonEmptyChain[Int] = Chain(1, 2, 3, 4)
</span><span style="color:#75715e"></span>
<span style="color:#a6e22e">NonEmptyChain</span><span style="color:#f92672">.</span>fromNonEmptyList<span style="color:#f92672">(</span><span style="color:#a6e22e">NonEmptyList</span><span style="color:#f92672">(</span><span style="color:#ae81ff">1</span><span style="color:#f92672">,</span> <span style="color:#a6e22e">List</span><span style="color:#f92672">(</span><span style="color:#ae81ff">2</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">3</span><span style="color:#f92672">)))</span>
<span style="color:#75715e">// res1: cats.data.NonEmptyChain[Int] = Chain(1, 2, 3)
</span><span style="color:#75715e"></span>
<span style="color:#a6e22e">NonEmptyChain</span><span style="color:#f92672">.</span>fromNonEmptyVector<span style="color:#f92672">(</span><span style="color:#a6e22e">NonEmptyVector</span><span style="color:#f92672">(</span><span style="color:#ae81ff">1</span><span style="color:#f92672">,</span> <span style="color:#a6e22e">Vector</span><span style="color:#f92672">(</span><span style="color:#ae81ff">2</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">3</span><span style="color:#f92672">)))</span>
<span style="color:#75715e">// res2: cats.data.NonEmptyChain[Int] = Chain(1, 2, 3)
</span><span style="color:#75715e"></span>
<span style="color:#a6e22e">NonEmptyChain</span><span style="color:#f92672">.</span>one<span style="color:#f92672">(</span><span style="color:#ae81ff">1</span><span style="color:#f92672">)</span>
<span style="color:#75715e">// res3: cats.data.NonEmptyChain[Int] = Chain(1)
</span><span style="color:#75715e"></span>
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Cond in Scala</title>
            <link>https://fares.codes/posts/cond-in-scala/</link>
            <pubDate>Tue, 31 Mar 2020 01:00:00 +0000</pubDate>
            
            <guid>https://fares.codes/posts/cond-in-scala/</guid>
            <description>This is probably one of the simplest articles I&amp;rsquo;ve written&amp;hellip; except for the About section of this site&amp;hellip;
The reason I&amp;rsquo;m writing it is because I recently discovered a simple yet very useful function that facilitates the construction of an Either monad or a Validated monad.
This function is called cond probably short for condition. Ans here is how it works:
import cats.data.Validated def someFunction: Boolean = ??? val either: Either[String, String] = Either.</description>
            <content type="html"><![CDATA[<p>This is probably one of the simplest articles I&rsquo;ve written&hellip; except for the About section of this site&hellip;</p>
<p>The reason I&rsquo;m writing it is because I recently discovered a simple yet very useful function that facilitates the construction of an <code>Either</code> monad or a <code>Validated</code> monad.</p>
<p>This function is called <code>cond</code> probably short for condition. Ans here is how it works:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">
  <span style="color:#66d9ef">import</span> cats.data.Validated

  <span style="color:#66d9ef">def</span> someFunction<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Boolean</span> <span style="color:#f92672">=</span> <span style="color:#f92672">???</span>

  <span style="color:#66d9ef">val</span> either<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Either</span><span style="color:#f92672">[</span><span style="color:#66d9ef">String</span>, <span style="color:#66d9ef">String</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">Either</span><span style="color:#f92672">.</span>cond<span style="color:#f92672">(</span>someFunction<span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;OK&#34;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;ERROR&#34;</span><span style="color:#f92672">)</span>

  <span style="color:#66d9ef">val</span> validated<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Validated</span><span style="color:#f92672">[</span><span style="color:#66d9ef">String</span>, <span style="color:#66d9ef">String</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span>
    <span style="color:#a6e22e">Validated</span><span style="color:#f92672">.</span>cond<span style="color:#f92672">(</span>someFunction<span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;OK&#34;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;ERROR&#34;</span><span style="color:#f92672">)</span>
</code></pre></div><p>So if a certain condition evaluates to true, a right side will be created with the given value. otherwise a left side will be created with the given left value.</p>
<p>It might not be useful all the time since in most cases, the right and left value are calculated from the function doing the validation, but they have their moments üòõ (hint: I could have used them in my previous article about validated!)</p>
]]></content>
        </item>
        
        <item>
            <title>Validated(Nel) for Validation</title>
            <link>https://fares.codes/posts/validatednel-for-validation/</link>
            <pubDate>Mon, 30 Mar 2020 01:00:00 +0000</pubDate>
            
            <guid>https://fares.codes/posts/validatednel-for-validation/</guid>
            <description>Week two of being stuck at home due to the Corona-virus confinement. I&amp;rsquo;m writing this article because I desperately need to feel like I&amp;rsquo;ve accomplished ONE productive thing this weekend. On a side note, I&amp;rsquo;ve recently taken up cooking and managed to completely botch a recipe that was considered kids friendly&amp;hellip; So yea those are my life updates&amp;hellip;
I will begin my explanation of Validated by explaining something else entirely&amp;hellip;</description>
            <content type="html"><![CDATA[<p>Week two of being stuck at home due to the Corona-virus confinement. I&rsquo;m writing this article because I desperately need to feel like I&rsquo;ve accomplished ONE productive thing this weekend.
On a side note, I&rsquo;ve recently taken up cooking and managed to completely botch a recipe that was considered kids friendly&hellip; So yea those are my life updates&hellip;</p>
<p>I will begin my explanation of Validated by explaining something else entirely&hellip;</p>
<h2 id="either-monad">Either Monad</h2>
<p><code>Either[A,B]</code> is pretty simple to understand. As its name and signature suggest: its Either a value of type A or its a value of type B.
Either also allows us to chain computations.</p>
<p>Assume we wanted to validate that the values for a type <code>Person</code> are indeed valid, our model would be something like this:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">
<span style="color:#66d9ef">import</span> cats.Show
<span style="color:#66d9ef">import</span> com.validatedPost.PersonError._

<span style="color:#66d9ef">final</span> <span style="color:#66d9ef">case</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Person</span><span style="color:#f92672">(</span><span style="color:#66d9ef">private</span> <span style="color:#66d9ef">val</span> firstName<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">String</span><span style="color:#f92672">,</span>
                        <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">val</span> lastName<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">String</span><span style="color:#f92672">,</span>
                        <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">val</span> age<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Int</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
  <span style="color:#66d9ef">def</span> validateFirstName<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Either</span><span style="color:#f92672">[</span><span style="color:#66d9ef">PersonError</span>, <span style="color:#66d9ef">String</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span>
    <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>firstName<span style="color:#f92672">.</span>nonEmpty<span style="color:#f92672">)</span> <span style="color:#a6e22e">Right</span><span style="color:#f92672">(</span>firstName<span style="color:#f92672">)</span> <span style="color:#66d9ef">else</span> <span style="color:#a6e22e">Left</span><span style="color:#f92672">(</span><span style="color:#a6e22e">FirstNameError</span><span style="color:#f92672">)</span>
  <span style="color:#66d9ef">def</span> validateLastName<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Either</span><span style="color:#f92672">[</span><span style="color:#66d9ef">PersonError</span>, <span style="color:#66d9ef">String</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span>
    <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>lastName<span style="color:#f92672">.</span>nonEmpty<span style="color:#f92672">)</span> <span style="color:#a6e22e">Right</span><span style="color:#f92672">(</span>lastName<span style="color:#f92672">)</span> <span style="color:#66d9ef">else</span> <span style="color:#a6e22e">Left</span><span style="color:#f92672">(</span><span style="color:#a6e22e">LastNameError</span><span style="color:#f92672">)</span>
  <span style="color:#66d9ef">def</span> validateAge<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Either</span><span style="color:#f92672">[</span><span style="color:#66d9ef">PersonError</span>, <span style="color:#66d9ef">Int</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span>
    <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>age <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">18</span><span style="color:#f92672">)</span> <span style="color:#a6e22e">Right</span><span style="color:#f92672">(</span>age<span style="color:#f92672">)</span> <span style="color:#66d9ef">else</span> <span style="color:#a6e22e">Left</span><span style="color:#f92672">(</span><span style="color:#a6e22e">AgeError</span><span style="color:#f92672">)</span>
<span style="color:#f92672">}</span>
<span style="color:#66d9ef">object</span> <span style="color:#a6e22e">Person</span> <span style="color:#f92672">{</span>
  <span style="color:#66d9ef">implicit</span> <span style="color:#66d9ef">val</span> showPersonError<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Show</span><span style="color:#f92672">[</span><span style="color:#66d9ef">Person</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">Show</span><span style="color:#f92672">.</span>show<span style="color:#f92672">(</span> person <span style="color:#66d9ef">=&gt;</span>
    <span style="color:#e6db74">s&#34;&#34;&#34;
</span><span style="color:#e6db74">      |First Name: </span><span style="color:#e6db74">${</span>person<span style="color:#f92672">.</span>firstName<span style="color:#e6db74">}</span><span style="color:#e6db74">
</span><span style="color:#e6db74">      |Last Name: </span><span style="color:#e6db74">${</span>person<span style="color:#f92672">.</span>lastName<span style="color:#e6db74">}</span><span style="color:#e6db74">
</span><span style="color:#e6db74">      |Age: </span><span style="color:#e6db74">${</span>person<span style="color:#f92672">.</span>age<span style="color:#e6db74">}</span><span style="color:#e6db74">
</span><span style="color:#e6db74">      |&#34;&#34;&#34;</span><span style="color:#f92672">.</span>stripMargin<span style="color:#f92672">)</span>
<span style="color:#f92672">}</span>

<span style="color:#66d9ef">sealed</span> <span style="color:#66d9ef">abstract</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">PersonError</span> <span style="color:#66d9ef">extends</span> <span style="color:#a6e22e">Product</span> <span style="color:#66d9ef">with</span> <span style="color:#a6e22e">Serializable</span>

<span style="color:#66d9ef">object</span> <span style="color:#a6e22e">PersonError</span> <span style="color:#f92672">{</span>

  <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">case</span> <span style="color:#66d9ef">object</span> <span style="color:#a6e22e">FirstNameError</span> <span style="color:#66d9ef">extends</span> <span style="color:#a6e22e">PersonError</span>
  <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">case</span> <span style="color:#66d9ef">object</span> <span style="color:#a6e22e">LastNameError</span> <span style="color:#66d9ef">extends</span> <span style="color:#a6e22e">PersonError</span>
  <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">case</span> <span style="color:#66d9ef">object</span> <span style="color:#a6e22e">AgeError</span> <span style="color:#66d9ef">extends</span> <span style="color:#a6e22e">PersonError</span>

  <span style="color:#66d9ef">implicit</span> <span style="color:#66d9ef">val</span> showPersonError<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Show</span><span style="color:#f92672">[</span><span style="color:#66d9ef">PersonError</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">Show</span><span style="color:#f92672">.</span>show <span style="color:#f92672">{</span>
    <span style="color:#66d9ef">case</span> <span style="color:#a6e22e">FirstNameError</span> <span style="color:#66d9ef">=&gt;</span> <span style="color:#e6db74">&#34;There was an issue with the given first name&#34;</span>
    <span style="color:#66d9ef">case</span> <span style="color:#a6e22e">LastNameError</span>  <span style="color:#66d9ef">=&gt;</span> <span style="color:#e6db74">&#34;There was an issue with the given last name&#34;</span>
    <span style="color:#66d9ef">case</span> <span style="color:#a6e22e">AgeError</span>       <span style="color:#66d9ef">=&gt;</span> <span style="color:#e6db74">&#34;Age is not 18 or above&#34;</span>
  <span style="color:#f92672">}</span>
<span style="color:#f92672">}</span>

</code></pre></div><p>And we&rsquo;d be able to chain all three validations with the helpful <code>For Comprehensions</code> or simple <code>maps + flatMaps</code>:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">
  <span style="color:#66d9ef">import</span> cats.syntax.either._
  <span style="color:#66d9ef">import</span> com.validatedPost.PersonError._

  <span style="color:#66d9ef">val</span> person1 <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">Person</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Fares&#34;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;Ismail&#34;</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">23</span><span style="color:#f92672">)</span>

  <span style="color:#66d9ef">def</span> validatePerson<span style="color:#f92672">(</span>person<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Person</span><span style="color:#f92672">)</span> <span style="color:#66d9ef">=</span> <span style="color:#f92672">{</span>
    <span style="color:#66d9ef">for</span> <span style="color:#f92672">{</span>
      vFirstName <span style="color:#66d9ef">&lt;-</span> person<span style="color:#f92672">.</span>validateFirstName
      vLastName <span style="color:#66d9ef">&lt;-</span> person<span style="color:#f92672">.</span>validateLastName
      vAge <span style="color:#66d9ef">&lt;-</span> person<span style="color:#f92672">.</span>validateAge
    <span style="color:#f92672">}</span> <span style="color:#66d9ef">yield</span> <span style="color:#a6e22e">Person</span><span style="color:#f92672">(</span>vFirstName<span style="color:#f92672">,</span> vLastName<span style="color:#f92672">,</span> vAge<span style="color:#f92672">)</span>
  <span style="color:#f92672">}</span>
  <span style="color:#66d9ef">val</span> res<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Either</span><span style="color:#f92672">[</span><span style="color:#66d9ef">PersonError</span>, <span style="color:#66d9ef">Person</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span> validatePerson<span style="color:#f92672">(</span>person1<span style="color:#f92672">)</span>

  println<span style="color:#f92672">(</span>res<span style="color:#f92672">.</span>show<span style="color:#f92672">)</span>

</code></pre></div><p>This will output:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">
Right(
First Name: Fares
Last Name: Ismail
Age: 23
)

</code></pre></div><p>But what if the person instance had a few errors?</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">  <span style="color:#66d9ef">val</span> person2 <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">Person</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Fares&#34;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;&#34;</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">23</span><span style="color:#f92672">)</span>
  println<span style="color:#f92672">(</span>validatePerson<span style="color:#f92672">(</span>person2<span style="color:#f92672">).</span>show<span style="color:#f92672">)</span> <span style="color:#75715e">// Left(There was an issue with the given last name)
</span><span style="color:#75715e"></span>
</code></pre></div><p>Ok&hellip; so far so good. But what if there were multiple errors?</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">
  <span style="color:#66d9ef">val</span> person3 <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">Person</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;&#34;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;&#34;</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">10</span><span style="color:#f92672">)</span>
  println<span style="color:#f92672">(</span>validatePerson<span style="color:#f92672">(</span>person3<span style="color:#f92672">).</span>show<span style="color:#f92672">)</span> <span style="color:#75715e">//Left(There was an issue with the given first name)
</span><span style="color:#75715e"></span>
</code></pre></div><p>It outputs the first error only. ideally we would have liked the errors to be accumulated.</p>
<p>The reason it does this is because <code>Either</code> is fail fast. It will exit the for comprehension at the first <code>Left</code> it encounters.</p>
<h2 id="validated-for-error-accumulation">Validated For Error Accumulation</h2>
<p>If I talked about Either in an article about validated, its clearly not by coincidence.</p>
<p>While either is fail fast, <code>Validated</code> will allow us to accumulate the errors on the left side. We&rsquo;ve touched on this briefly in previous articles (including <code>Cats Ior</code> which accumulated warnings), but lets go over it again with <code>Validated</code></p>
<p>For that, well need to change our validation functions to return a <code>Validated</code></p>
<p>Validate has the following signature:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">
<span style="color:#66d9ef">sealed</span> <span style="color:#66d9ef">abstract</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Validated</span><span style="color:#f92672">[</span><span style="color:#66d9ef">+E</span>, <span style="color:#66d9ef">+A</span><span style="color:#f92672">]</span> <span style="color:#a6e22e">extends</span> <span style="color:#a6e22e">Product</span> <span style="color:#66d9ef">with</span> <span style="color:#a6e22e">Serializable</span> <span style="color:#f92672">{</span>
  <span style="color:#75715e">// Implementation elided
</span><span style="color:#75715e"></span><span style="color:#f92672">}</span>

<span style="color:#66d9ef">final</span> <span style="color:#66d9ef">case</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Valid</span><span style="color:#f92672">[</span><span style="color:#66d9ef">+A</span><span style="color:#f92672">](</span>a<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">A</span><span style="color:#f92672">)</span> <span style="color:#66d9ef">extends</span> <span style="color:#a6e22e">Validated</span><span style="color:#f92672">[</span><span style="color:#66d9ef">Nothing</span>, <span style="color:#66d9ef">A</span><span style="color:#f92672">]</span>
<span style="color:#66d9ef">final</span> <span style="color:#66d9ef">case</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Invalid</span><span style="color:#f92672">[</span><span style="color:#66d9ef">+E</span><span style="color:#f92672">](</span>e<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">E</span><span style="color:#f92672">)</span> <span style="color:#66d9ef">extends</span> <span style="color:#a6e22e">Validated</span><span style="color:#f92672">[</span><span style="color:#66d9ef">E</span>, <span style="color:#66d9ef">Nothing</span><span style="color:#f92672">]</span>

</code></pre></div><p>In our case, its going to be a <code>Validated[NonEmptyList[PersonError], Person]</code></p>
<p>The <code>NonEmptyList</code> is used to accumulate the possible errors since we can have more than one.</p>
<p>Conveniently, we have a type alias called <code>ValidatedNel[A,B]</code> that is short for <code>Validated[NoneEmptyList[A], B]</code></p>
<p>Person will look like this:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">
<span style="color:#66d9ef">import</span> cats.Show
<span style="color:#66d9ef">import</span> cats.data.<span style="color:#f92672">{</span><span style="color:#a6e22e">Validated</span><span style="color:#f92672">,</span> <span style="color:#a6e22e">ValidatedNel</span><span style="color:#f92672">}</span>
<span style="color:#66d9ef">import</span> cats.syntax.validated._
<span style="color:#66d9ef">import</span> com.validatedPost.PersonError._

<span style="color:#66d9ef">final</span> <span style="color:#66d9ef">case</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Person</span><span style="color:#f92672">(</span><span style="color:#66d9ef">private</span> <span style="color:#66d9ef">val</span> firstName<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">String</span><span style="color:#f92672">,</span>
                        <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">val</span> lastName<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">String</span><span style="color:#f92672">,</span>
                        <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">val</span> age<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Int</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
  <span style="color:#66d9ef">def</span> validateFirstName<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">ValidatedNel</span><span style="color:#f92672">[</span><span style="color:#66d9ef">PersonError</span>, <span style="color:#66d9ef">String</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span>
    <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>firstName<span style="color:#f92672">.</span>nonEmpty<span style="color:#f92672">)</span> firstName<span style="color:#f92672">.</span>validNel <span style="color:#66d9ef">else</span> <span style="color:#a6e22e">FirstNameError</span><span style="color:#f92672">.</span>invalidNel
  <span style="color:#66d9ef">def</span> validateLastName<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">ValidatedNel</span><span style="color:#f92672">[</span><span style="color:#66d9ef">PersonError</span>, <span style="color:#66d9ef">String</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span>
    <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>lastName<span style="color:#f92672">.</span>nonEmpty<span style="color:#f92672">)</span> lastName<span style="color:#f92672">.</span>validNel <span style="color:#66d9ef">else</span> <span style="color:#a6e22e">LastNameError</span><span style="color:#f92672">.</span>invalidNel
  <span style="color:#66d9ef">def</span> validateAge<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">ValidatedNel</span><span style="color:#f92672">[</span><span style="color:#66d9ef">PersonError</span>, <span style="color:#66d9ef">Int</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span>
    <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>age <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">18</span><span style="color:#f92672">)</span> age<span style="color:#f92672">.</span>validNel <span style="color:#66d9ef">else</span> <span style="color:#a6e22e">AgeError</span><span style="color:#f92672">.</span>invalidNel
<span style="color:#f92672">}</span>
<span style="color:#66d9ef">object</span> <span style="color:#a6e22e">Person</span> <span style="color:#f92672">{</span>
  <span style="color:#66d9ef">implicit</span> <span style="color:#66d9ef">val</span> showPersonError<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Show</span><span style="color:#f92672">[</span><span style="color:#66d9ef">Person</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">Show</span><span style="color:#f92672">.</span>show<span style="color:#f92672">(</span>person <span style="color:#66d9ef">=&gt;</span> <span style="color:#e6db74">s&#34;&#34;&#34;
</span><span style="color:#e6db74">      |First Name: </span><span style="color:#e6db74">${</span>person<span style="color:#f92672">.</span>firstName<span style="color:#e6db74">}</span><span style="color:#e6db74">
</span><span style="color:#e6db74">      |Last Name: </span><span style="color:#e6db74">${</span>person<span style="color:#f92672">.</span>lastName<span style="color:#e6db74">}</span><span style="color:#e6db74">
</span><span style="color:#e6db74">      |Age: </span><span style="color:#e6db74">${</span>person<span style="color:#f92672">.</span>age<span style="color:#e6db74">}</span><span style="color:#e6db74">
</span><span style="color:#e6db74">      |&#34;&#34;&#34;</span><span style="color:#f92672">.</span>stripMargin<span style="color:#f92672">)</span>
<span style="color:#f92672">}</span>

</code></pre></div><p>and our function calls:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">
  <span style="color:#66d9ef">val</span> person3 <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">Person</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;&#34;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;&#34;</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">10</span><span style="color:#f92672">)</span>

  <span style="color:#66d9ef">import</span> cats.data.NonEmptyList._
  <span style="color:#66d9ef">import</span> cats.syntax.apply._
  <span style="color:#66d9ef">import</span> cats.data.ValidatedNel

  <span style="color:#66d9ef">val</span> res<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">ValidatedNel</span><span style="color:#f92672">[</span><span style="color:#66d9ef">PersonError</span>, <span style="color:#66d9ef">Person</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span>
    <span style="color:#f92672">(</span>person3<span style="color:#f92672">.</span>validateFirstName<span style="color:#f92672">,</span> person3<span style="color:#f92672">.</span>validateLastName<span style="color:#f92672">,</span> person3<span style="color:#f92672">.</span>validateAge<span style="color:#f92672">)</span>
      <span style="color:#f92672">.</span>mapN<span style="color:#f92672">((</span>first<span style="color:#f92672">,</span> last<span style="color:#f92672">,</span> age<span style="color:#f92672">)</span> <span style="color:#66d9ef">=&gt;</span> <span style="color:#a6e22e">Person</span><span style="color:#f92672">(</span>first<span style="color:#f92672">,</span> last<span style="color:#f92672">,</span> age<span style="color:#f92672">))</span>

  println<span style="color:#f92672">(</span>res<span style="color:#f92672">.</span>show<span style="color:#f92672">)</span> <span style="color:#75715e">//Invalid(NonEmptyList(There was an issue with the given first name, There was an issue with the given last name, Age is not 18 or above))
</span><span style="color:#75715e"></span>
</code></pre></div><p>Note that depending on your version of cats, this can either be a <code>.mapN</code> or <code>.map3</code> and so on (replace N by the appropriate number)</p>
<p>We notice that the return of the validation function is all the errors accumulated in the NonEmptyList.</p>
<p>Also note that for this to work we need an implicit Semigroup in the scope for the left side. This is because <code>Validated</code> will use it to combine the error on the left.</p>
<p>Finally, if we wanted to use <code>Validated</code> in a fail fast manner, we still can by calling <code>.andThen</code></p>
]]></content>
        </item>
        
        <item>
            <title>Cats Ior</title>
            <link>https://fares.codes/posts/cats-ior/</link>
            <pubDate>Sat, 21 Mar 2020 10:00:00 +0000</pubDate>
            
            <guid>https://fares.codes/posts/cats-ior/</guid>
            <description>If you&amp;rsquo;ve gotten this far reading my blog, you&amp;rsquo;re probably very familiar with Either. Of course Im also assuming someone is reading this blog in the first place üòõ
Anyway, Either[A,B] allows us to return either an A or a B depending on some conditions&amp;hellip; In other words, its a XOR (exclusive or) A value can either be A or it can be B but it cannot be both.
You probably see where this is going, IOR is a cats datatype that stands for Inclusive Or.</description>
            <content type="html"><![CDATA[<p>If you&rsquo;ve gotten this far reading my blog, you&rsquo;re probably very familiar with <code>Either</code>. Of course Im also assuming someone is reading this blog in the first place üòõ</p>
<p>Anyway, <code>Either[A,B]</code> allows us to return either an <code>A</code> or a <code>B</code> depending on some conditions&hellip; In other words, its a XOR (exclusive or) A value can either be A or it can be B but it cannot be both.</p>
<p>You probably see where this is going, <code>IOR</code> is a cats datatype that stands for Inclusive Or. In other words, <code>Ior[A,B]</code> can either be <code>A</code> or it can be <code>B</code> or it can be <code>Both A and B</code>.</p>
<p>Another syntax for defining an Ior is: <code>A Ior B</code></p>
<p>Ior is often used when we want to handle errors and correct values as well as correct values but wth a warning.</p>
<h2 id="examples">Examples</h2>
<p>Here is an example using IOR:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">
  <span style="color:#66d9ef">import</span> cats.data.Ior

  <span style="color:#66d9ef">val</span> right<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Ior</span><span style="color:#f92672">[</span><span style="color:#66d9ef">String</span>, <span style="color:#66d9ef">Int</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">Ior</span><span style="color:#f92672">.</span>right<span style="color:#f92672">[</span><span style="color:#66d9ef">String</span>, <span style="color:#66d9ef">Int</span><span style="color:#f92672">](</span><span style="color:#ae81ff">3</span><span style="color:#f92672">)</span>
  <span style="color:#66d9ef">val</span> left<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Ior</span><span style="color:#f92672">[</span><span style="color:#66d9ef">String</span>, <span style="color:#66d9ef">Int</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">Ior</span><span style="color:#f92672">.</span>left<span style="color:#f92672">[</span><span style="color:#66d9ef">String</span>, <span style="color:#66d9ef">Int</span><span style="color:#f92672">](</span><span style="color:#e6db74">&#34;Error&#34;</span><span style="color:#f92672">)</span>
  <span style="color:#66d9ef">val</span> both<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Ior</span><span style="color:#f92672">[</span><span style="color:#66d9ef">String</span>, <span style="color:#66d9ef">Int</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">Ior</span><span style="color:#f92672">.</span>both<span style="color:#f92672">[</span><span style="color:#66d9ef">String</span>, <span style="color:#66d9ef">Int</span><span style="color:#f92672">](</span><span style="color:#e6db74">&#34;Warning&#34;</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">0</span><span style="color:#f92672">)</span>

</code></pre></div><p>Of course things can be made to look nicer when using the cats syntax:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">
  <span style="color:#66d9ef">import</span> cats.syntax.ior._

  <span style="color:#66d9ef">val</span> x<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Ior</span><span style="color:#f92672">[</span><span style="color:#66d9ef">String</span>, <span style="color:#66d9ef">Nothing</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span> <span style="color:#e6db74">&#34;NOPE&#34;</span><span style="color:#f92672">.</span>leftIor
  <span style="color:#75715e">// Or
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">val</span> z<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Ior</span><span style="color:#f92672">[</span><span style="color:#66d9ef">String</span>, <span style="color:#66d9ef">Int</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span> <span style="color:#e6db74">&#34;Better Nope&#34;</span><span style="color:#f92672">.</span>leftIor<span style="color:#f92672">[</span><span style="color:#66d9ef">Int</span><span style="color:#f92672">]</span>

</code></pre></div><h2 id="accumulating-errors">Accumulating Errors</h2>
<p>Another benefit of Ior is its ability to accumulate errors on the left side. Similar to Cats Validated (Will be discussed in a later article)</p>
<h3 id="how-does-it-work">How does it work</h3>
<p>Ior will accumulate warnings on the left side but will short circuit the computations as soon as it encounters a left only value.
Lets look at an example for a clearer image.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">
  <span style="color:#66d9ef">import</span> cats.data.Ior
  <span style="color:#66d9ef">import</span> cats.syntax.ior._
  <span style="color:#66d9ef">import</span> cats.data.<span style="color:#f92672">{</span><span style="color:#a6e22e">NonEmptyList</span> <span style="color:#66d9ef">=&gt;</span> <span style="color:#a6e22e">Nel</span><span style="color:#f92672">}</span>
  <span style="color:#66d9ef">type</span> <span style="color:#66d9ef">Failures</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">Nel</span><span style="color:#f92672">[</span><span style="color:#66d9ef">String</span><span style="color:#f92672">]</span>

  <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">case</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">UserName</span><span style="color:#f92672">(</span><span style="color:#66d9ef">private</span> <span style="color:#66d9ef">val</span> name<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">String</span><span style="color:#f92672">)</span> <span style="color:#66d9ef">extends</span> <span style="color:#a6e22e">AnyVal</span> <span style="color:#f92672">{</span>
    <span style="color:#66d9ef">def</span> validateUserName<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Failures</span> <span style="color:#66d9ef">Ior</span> <span style="color:#66d9ef">UserName</span> <span style="color:#f92672">=</span> <span style="color:#f92672">{</span>

      <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>name<span style="color:#f92672">.</span>isEmpty<span style="color:#f92672">)</span> <span style="color:#a6e22e">Nel</span><span style="color:#f92672">.</span>one<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Error, Username cannot be empty&#34;</span><span style="color:#f92672">).</span>leftIor
      <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>name <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;admin&#34;</span><span style="color:#f92672">)</span>
        <span style="color:#a6e22e">Ior</span><span style="color:#f92672">.</span>both<span style="color:#f92672">(</span>
          <span style="color:#a6e22e">Nel</span><span style="color:#f92672">.</span>one<span style="color:#f92672">(</span>
            <span style="color:#e6db74">&#34;In the future, protected words will no longer be considered valid&#34;</span><span style="color:#f92672">),</span>
          <span style="color:#a6e22e">UserName</span><span style="color:#f92672">(</span>name<span style="color:#f92672">))</span>
      <span style="color:#66d9ef">else</span> <span style="color:#a6e22e">UserName</span><span style="color:#f92672">(</span>name<span style="color:#f92672">).</span>rightIor
    <span style="color:#f92672">}</span>
  <span style="color:#f92672">}</span>

  <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">case</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">UserPassword</span><span style="color:#f92672">(</span><span style="color:#66d9ef">private</span> <span style="color:#66d9ef">val</span> value<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">String</span><span style="color:#f92672">)</span> <span style="color:#66d9ef">extends</span> <span style="color:#a6e22e">AnyVal</span> <span style="color:#f92672">{</span>
    <span style="color:#66d9ef">def</span> validatePassword<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Failures</span> <span style="color:#66d9ef">Ior</span> <span style="color:#66d9ef">UserPassword</span> <span style="color:#f92672">=</span> <span style="color:#f92672">{</span>
      <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>value<span style="color:#f92672">.</span>isEmpty<span style="color:#f92672">)</span> <span style="color:#a6e22e">Nel</span><span style="color:#f92672">.</span>one<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Passwords cannot be empty&#34;</span><span style="color:#f92672">).</span>leftIor
      <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>value<span style="color:#f92672">.</span>length <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">10</span><span style="color:#f92672">)</span>
        <span style="color:#a6e22e">Ior</span><span style="color:#f92672">.</span>both<span style="color:#f92672">(</span><span style="color:#a6e22e">Nel</span><span style="color:#f92672">.</span>one<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Password is not very secure&#34;</span><span style="color:#f92672">),</span> <span style="color:#a6e22e">UserPassword</span><span style="color:#f92672">(</span>value<span style="color:#f92672">))</span>
      <span style="color:#66d9ef">else</span> <span style="color:#a6e22e">UserPassword</span><span style="color:#f92672">(</span>value<span style="color:#f92672">).</span>rightIor
    <span style="color:#f92672">}</span>
  <span style="color:#f92672">}</span>

</code></pre></div><p>which would allow us to create a valid <code>User</code>:</p>
<p><strong>Note:</strong> If you&rsquo;re confused by mapN and the various imports, it&rsquo;ll be explained in another post along with validated and validatedN.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">  <span style="color:#66d9ef">import</span> cats.syntax.apply._

  <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">case</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">User</span><span style="color:#f92672">(</span>name<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">UserName</span><span style="color:#f92672">,</span> pass<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">UserPassword</span><span style="color:#f92672">)</span>

  <span style="color:#66d9ef">val</span> username1 <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">UserName</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Fares&#34;</span><span style="color:#f92672">)</span>
  <span style="color:#66d9ef">val</span> pass1 <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">UserPassword</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;qwertyazerty&#34;</span><span style="color:#f92672">)</span>
  <span style="color:#66d9ef">val</span> user1 <span style="color:#66d9ef">=</span> <span style="color:#f92672">(</span>username1<span style="color:#f92672">.</span>validateUserName<span style="color:#f92672">,</span> pass1<span style="color:#f92672">.</span>validatePassword<span style="color:#f92672">).</span>mapN<span style="color:#f92672">(</span><span style="color:#a6e22e">User</span><span style="color:#f92672">)</span>

  <span style="color:#75715e">// user1 ==&gt; Right(User(UserName(fares),UserPassword(qwertyazerty)))
</span></code></pre></div><p>But what if the username and password contained non blocking errors?</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">
  <span style="color:#66d9ef">val</span> username2 <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">UserName</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;admin&#34;</span><span style="color:#f92672">)</span>
  <span style="color:#66d9ef">val</span> pass2 <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">UserPassword</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;pass&#34;</span><span style="color:#f92672">)</span>
  <span style="color:#66d9ef">val</span> user2 <span style="color:#66d9ef">=</span> <span style="color:#f92672">(</span>username2<span style="color:#f92672">.</span>validateUserName<span style="color:#f92672">,</span> pass2<span style="color:#f92672">.</span>validatePassword<span style="color:#f92672">).</span>mapN<span style="color:#f92672">(</span><span style="color:#a6e22e">User</span><span style="color:#f92672">)</span>

  <span style="color:#75715e">//user2 ==&gt; Both(NonEmptyList(In the future, protected words will no longer be considered valid, Password is not very secure),User(UserName(admin),UserPassword(pass)))
</span><span style="color:#75715e"></span>
</code></pre></div><p>This is what we meant by accumulating warnings or nonblocking errors.</p>
<p>But what if we encountered a blocking error?</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">
  <span style="color:#66d9ef">val</span> username3 <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">UserName</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;&#34;</span><span style="color:#f92672">)</span>
  <span style="color:#66d9ef">val</span> pass3 <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">UserPassword</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;&#34;</span><span style="color:#f92672">)</span>
  <span style="color:#66d9ef">val</span> user3 <span style="color:#66d9ef">=</span> <span style="color:#f92672">(</span>username3<span style="color:#f92672">.</span>validateUserName<span style="color:#f92672">,</span> pass3<span style="color:#f92672">.</span>validatePassword<span style="color:#f92672">).</span>mapN<span style="color:#f92672">(</span><span style="color:#a6e22e">User</span><span style="color:#f92672">)</span>

  <span style="color:#75715e">//user3 ==&gt; Left(NonEmptyList(Error, Username cannot be empty))
</span><span style="color:#75715e"></span>
</code></pre></div><p>Notice it short circuited the computations without accumulating the errors on the left side (Password was empty but the error was not added to that of Username)</p>
<h2 id="conversion">Conversion</h2>
<p>Ior Can be converted to an <code>Either</code> a <code>Validate</code> or even an <code>Option</code>.</p>
<p>Keep in mind however that when doing so, the <code>Both</code> will drop its left side and only keep the right value and transform it to a <code>Some</code> or a <code>Right</code> ect&hellip;</p>
<p>Here are the transformation codes:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">
  <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">def</span> toEither<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Either</span><span style="color:#f92672">[</span><span style="color:#66d9ef">A</span>, <span style="color:#66d9ef">B</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span> fold<span style="color:#f92672">(</span><span style="color:#a6e22e">Left</span><span style="color:#f92672">(</span><span style="color:#66d9ef">_</span><span style="color:#f92672">),</span> <span style="color:#a6e22e">Right</span><span style="color:#f92672">(</span><span style="color:#66d9ef">_</span><span style="color:#f92672">),</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">_</span><span style="color:#f92672">,</span> b<span style="color:#f92672">)</span> <span style="color:#66d9ef">=&gt;</span> <span style="color:#a6e22e">Right</span><span style="color:#f92672">(</span>b<span style="color:#f92672">))</span>
  <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">def</span> toValidated<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Validated</span><span style="color:#f92672">[</span><span style="color:#66d9ef">A</span>, <span style="color:#66d9ef">B</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span> fold<span style="color:#f92672">(</span><span style="color:#a6e22e">Invalid</span><span style="color:#f92672">(</span><span style="color:#66d9ef">_</span><span style="color:#f92672">),</span> <span style="color:#a6e22e">Valid</span><span style="color:#f92672">(</span><span style="color:#66d9ef">_</span><span style="color:#f92672">),</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">_</span><span style="color:#f92672">,</span> b<span style="color:#f92672">)</span> <span style="color:#66d9ef">=&gt;</span> <span style="color:#a6e22e">Valid</span><span style="color:#f92672">(</span>b<span style="color:#f92672">))</span>
  <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">def</span> toOption<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Option</span><span style="color:#f92672">[</span><span style="color:#66d9ef">B</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span> fold<span style="color:#f92672">(</span><span style="color:#66d9ef">_</span> <span style="color:#66d9ef">=&gt;</span> <span style="color:#a6e22e">None</span><span style="color:#f92672">,</span> b <span style="color:#66d9ef">=&gt;</span> <span style="color:#a6e22e">Some</span><span style="color:#f92672">(</span>b<span style="color:#f92672">),</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">_</span><span style="color:#f92672">,</span> b<span style="color:#f92672">)</span> <span style="color:#66d9ef">=&gt;</span> <span style="color:#a6e22e">Some</span><span style="color:#f92672">(</span>b<span style="color:#f92672">))</span>

</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Cats Show</title>
            <link>https://fares.codes/posts/cats-show/</link>
            <pubDate>Fri, 20 Mar 2020 10:00:00 +0000</pubDate>
            
            <guid>https://fares.codes/posts/cats-show/</guid>
            <description>You can tell I&amp;rsquo;m not looking to write something serious by the topic I&amp;rsquo;ve chosen üòõ
The first time I read about Show I instantly said to my self &amp;ldquo;its just a glorified toString&amp;rdquo;. I still struggle to see the difference&amp;hellip; Okay not really but they are pretty similar.
Backing up, Here is the signature of show:
/** creates an instance of [[Show]] using the provided function */ def show[A](f: A =&amp;gt; String): Show[A] = new Show[A] { def show(a: A): String = f(a) } So it takes a A as a type parameter and a function that takes an A and transforms it to a String.</description>
            <content type="html"><![CDATA[<p>You can tell I&rsquo;m not looking to write something serious by the topic I&rsquo;ve chosen üòõ</p>
<p>The first time I read about <code>Show</code> I instantly said to my self &ldquo;its just a glorified toString&rdquo;. I still struggle to see the difference&hellip; Okay not really but they are pretty similar.</p>
<p>Backing up, Here is the signature of show:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">
  <span style="color:#75715e">/** creates an instance of [[Show]] using the provided function */</span>
  <span style="color:#66d9ef">def</span> show<span style="color:#f92672">[</span><span style="color:#66d9ef">A</span><span style="color:#f92672">](</span>f<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">A</span> <span style="color:#f92672">=&gt;</span> <span style="color:#a6e22e">String</span><span style="color:#f92672">)</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Show</span><span style="color:#f92672">[</span><span style="color:#66d9ef">A</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">Show</span><span style="color:#f92672">[</span><span style="color:#66d9ef">A</span><span style="color:#f92672">]</span> <span style="color:#f92672">{</span>
    <span style="color:#66d9ef">def</span> show<span style="color:#f92672">(</span>a<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">A</span><span style="color:#f92672">)</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">String</span> <span style="color:#f92672">=</span> f<span style="color:#f92672">(</span>a<span style="color:#f92672">)</span>
  <span style="color:#f92672">}</span>

</code></pre></div><p>So it takes a <code>A</code> as a type parameter and a function that takes an <code>A</code> and transforms it to a <code>String</code>. Kind of like a toString&hellip; but the difference is that show takes a type parameter while toString is defined on <code>Any</code> meaning everything has a toString and as bizarre as this might look, it actually works:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">
<span style="color:#f92672">(</span><span style="color:#66d9ef">new</span> <span style="color:#f92672">{}).</span>toString <span style="color:#75715e">// Would return  $anon$1@8641b7d ???
</span><span style="color:#75715e"></span>
</code></pre></div><p>While this would not work for show.</p>
<p>Show also safeguards against anyone randomly overriding the toString somewhere else and affecting your code.</p>
<h2 id="example-of-using-show">Example of using Show</h2>
<p>Assume we have our ADT:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">
<span style="color:#66d9ef">sealed</span> <span style="color:#66d9ef">abstract</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Animal</span> <span style="color:#66d9ef">extends</span> <span style="color:#a6e22e">Product</span> <span style="color:#66d9ef">with</span> <span style="color:#a6e22e">Serializable</span>

<span style="color:#66d9ef">object</span> <span style="color:#a6e22e">Animal</span> <span style="color:#f92672">{</span>

  <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">case</span> <span style="color:#66d9ef">object</span> <span style="color:#a6e22e">Dog</span> <span style="color:#66d9ef">extends</span> <span style="color:#a6e22e">Animal</span>
  <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">case</span> <span style="color:#66d9ef">object</span> <span style="color:#a6e22e">Cat</span> <span style="color:#66d9ef">extends</span> <span style="color:#a6e22e">Animal</span>

  <span style="color:#66d9ef">implicit</span> <span style="color:#66d9ef">val</span> showAnimal<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Show</span><span style="color:#f92672">[</span><span style="color:#66d9ef">Animal</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">Show</span><span style="color:#f92672">.</span>show <span style="color:#f92672">{</span>
    <span style="color:#66d9ef">case</span> <span style="color:#a6e22e">Dog</span> <span style="color:#66d9ef">=&gt;</span> <span style="color:#e6db74">&#34;The following is a Dog&#34;</span>
    <span style="color:#66d9ef">case</span> <span style="color:#a6e22e">Cat</span> <span style="color:#66d9ef">=&gt;</span> <span style="color:#e6db74">&#34;The following is a Cat&#34;</span>
  <span style="color:#f92672">}</span>
<span style="color:#f92672">}</span>

</code></pre></div><p>We defined an implicit val of type <code>Show[Animal]</code> in our ADT, allowing us to call the following from anywhere else in the code:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">
  <span style="color:#66d9ef">val</span> d<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Animal</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">Dog</span>
  d<span style="color:#f92672">.</span>show <span style="color:#75715e">// Would return &#34;The following is a Dog&#34;
</span><span style="color:#75715e"></span>
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Kafka HealthChecks</title>
            <link>https://fares.codes/posts/kafka-healthchecks/</link>
            <pubDate>Thu, 19 Mar 2020 10:00:00 +0000</pubDate>
            
            <guid>https://fares.codes/posts/kafka-healthchecks/</guid>
            <description>Ive been recently asked to write healthchecks for long running services that depend on kafka.
This article will not go into the need for healthchecks nor a &amp;ldquo;let it crash&amp;rdquo; design. Instead I&amp;rsquo;ll delve into the struggle I had to actually write those healthchecks and more specifically checking the status of our kafka brokers.
Its important to note that I do not have an in-depth knowledge of the inner workings of kafka, and this might have probably contributed to the difficulty I found implementing said healthchecks.</description>
            <content type="html"><![CDATA[<p>Ive been recently asked to write healthchecks for long running services that depend on kafka.</p>
<p>This article will not go into the need for healthchecks nor a &ldquo;let it crash&rdquo; design. Instead I&rsquo;ll delve into the struggle I had to actually write those healthchecks and more specifically checking the status of our kafka brokers.</p>
<p>Its important to note that I do not have an in-depth knowledge of the inner workings of kafka, and this might have probably contributed to the difficulty I found implementing said healthchecks.</p>
<p>Before we begin, here are some key points to keep in mind:</p>
<h2 id="what-are-brokers">What are brokers</h2>
<p>Message brokers make the process of exchanging messages simple and reliable.</p>
<p>A Kafka Message Broker is the central point where messages are published to.</p>
<p>A kafka broker receives messages from producers and stores them on disk by unique offsets. It then allows consumers to consume the messages.</p>
<h2 id="the-role-of-zookeeper-in-all-of-this">The role of Zookeeper in all of this</h2>
<p>Kafka uses zookeeper to store shared information about brokers, consumers ect&hellip;</p>
<p>For brokers, kafka determines the state of a particular broker as it sends regular heartbeat requests.</p>
<p>Zookeeper is also used by kafka for broker election. In the case where the leader on a specific partition fails, it will no longer be registered with zookeeper. Zookeeper will then alert the remaining brokers on that partition and will proceed with a new election.</p>
<p>For consumers, zookeeper keeps check of the offsets and maintains a consumer registry. They are ephemeral zNodes similar to brokers. When a consumer goes down, the node is destroyed.</p>
<h2 id="checking-the-health-of-zookeeper">Checking the &ldquo;Health&rdquo; of Zookeeper</h2>
<p>Checking the health of Zookeeper is simple:</p>
<p>A zookeeper client has a function <code>zk.getState.isConnected</code>. This will return a boolean if zk is <code>CONNECTED or CONNECTEDREADONLY</code>.</p>
<h2 id="checking-the-health-of-brokers">Checking the &ldquo;Health&rdquo; of brokers</h2>
<p>The first implementation of a healthcheck consisted of checking zookeeper for brokerIds (since brokers register with zookeeper). And making sure that all the brokers are indeed registered with zookeeper.</p>
<p>The idea came from the scaladoc in <code>KafkaHealthcheck</code>. Which mentions:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">
<span style="color:#75715e">/**
</span><span style="color:#75715e"> * This class registers the broker in zookeeper to allow
</span><span style="color:#75715e"> * other brokers and consumers to detect failures. It uses an ephemeral znode with the path:
</span><span style="color:#75715e"> *   /brokers/ids/[0...N] --&gt; advertisedHost:advertisedPort
</span><span style="color:#75715e"> * Right now our definition of health is fairly naive. If we register in zk we are healthy, otherwise
</span><span style="color:#75715e"> * we are dead.
</span><span style="color:#75715e"> */</span>

</code></pre></div><p>Note that I was using kafka 2.11 and that after checking more recent versions, this class disappears.</p>
<h3 id="the-problem-with-this-implementation">The problem with this implementation</h3>
<p>The problem here is that my previous implementation eliminates all the benefits of the fault tolerance of kafka.</p>
<p>Each topic in kafka can have one or more partition. And each partition can be replicated 1 or more times.</p>
<p>Each partition in Kafka will have a broker as it&rsquo;s leader. Meaning that this broker will handle receiving messages and dispatching this information to its followers. This broker (up until version 2.4.0) is also responsible to serving the consumers. <a href="https://cwiki.apache.org/confluence/display/KAFKA/KIP-392%3A+Allow+consumers+to+fetch+from+closest+replica">https://cwiki.apache.org/confluence/display/KAFKA/KIP-392%3A+Allow+consumers+to+fetch+from+closest+replica</a></p>
<p>At the same time, this broker will also maintain a list of ISR (In-Sync-Replicas). This is a list of other brokers that are in sync with the leader (In the case the topic has a replication factor). So if a leader fails, any broker from that list is a prime candidate to replacing that broker.</p>
<p>In other words, even if we lose a broker for a topic that is replicated, our application should not crash since we have other brokers that can step in.</p>
<h3 id="the-proposed-solution">The proposed solution</h3>
<p>The proposed solution is to: Retrieve the list of brokers from Zookeeper.
For each topic, retrieve the list of partitions, and for each partition, retrieve the list of ISR. If there is at least one broker in that list of ISR, the the partition is healthy. If all partitions for a topic are healthy and if all topics for a given application are healthy, then the application is healthy.</p>
<h3 id="additional-resources">Additional Resources</h3>
<p>Here is a series of articles I found that are useful to learning more about the functioning of Kafka and Event Streaming in general.</p>
<p>Part one: Storage Mechanics</p>
<ul>
<li><a href="https://bravenewgeek.com/building-a-distributed-log-from-scratch-part-1-storage-mechanics/">https://bravenewgeek.com/building-a-distributed-log-from-scratch-part-1-storage-mechanics/</a></li>
<li><a href="https://thehoard.blog/how-kafkas-storage-internals-work-3a29b02e026">https://thehoard.blog/how-kafkas-storage-internals-work-3a29b02e026</a>
Part two: Data Replication</li>
<li><a href="https://bravenewgeek.com/building-a-distributed-log-from-scratch-part-2-data-replication/">https://bravenewgeek.com/building-a-distributed-log-from-scratch-part-2-data-replication/</a>
Part Three: Scaling message delivery</li>
<li><a href="https://bravenewgeek.com/building-a-distributed-log-from-scratch-part-3-scaling-message-delivery/">https://bravenewgeek.com/building-a-distributed-log-from-scratch-part-3-scaling-message-delivery/</a>
Slightly outdated, does not mention the possibility of reading from replicas: <a href="https://cwiki.apache.org/confluence/display/KAFKA/KIP-392%3A+Allow+consumers+to+fetch+from+closest+replica">https://cwiki.apache.org/confluence/display/KAFKA/KIP-392%3A+Allow+consumers+to+fetch+from+closest+replica</a>
Part Four: Competing Goals and Lessons Learned (Plus NATS que Kafka)</li>
<li><a href="https://bravenewgeek.com/building-a-distributed-log-from-scratch-part-4-trade-offs-and-lessons-learned/">https://bravenewgeek.com/building-a-distributed-log-from-scratch-part-4-trade-offs-and-lessons-learned/</a>
Part 5: Sketching a New System</li>
<li><a href="https://bravenewgeek.com/building-a-distributed-log-from-scratch-part-5-sketching-a-new-system/">https://bravenewgeek.com/building-a-distributed-log-from-scratch-part-5-sketching-a-new-system/</a></li>
</ul>
<p>Understanding Consensus: <a href="https://bravenewgeek.com/understanding-consensus/">https://bravenewgeek.com/understanding-consensus/</a></p>
]]></content>
        </item>
        
        <item>
            <title>Cats Bifunctor</title>
            <link>https://fares.codes/posts/cats-bifunctor/</link>
            <pubDate>Sun, 09 Feb 2020 10:00:00 +0000</pubDate>
            
            <guid>https://fares.codes/posts/cats-bifunctor/</guid>
            <description>The following will be a short and rather simple article about a useful function I recently learned about: bimap by cats.
In cats and in some cases scala, types like Either, Validated, Option&amp;hellip; are right biased. which means that when we call .map on them, the function applied in the map is only applied on the case of a right.
Here are some examples:
val either: Either[String, Int] = Right(2) val result: Either[String, Int] = either.</description>
            <content type="html"><![CDATA[<p>The following will be a short and rather simple article about a useful function I recently learned about: <code>bimap</code> by cats.</p>
<p>In cats and in some cases scala, types like Either, Validated, Option&hellip; are right biased. which means that when we call <code>.map</code> on them, the function applied in the map is only applied on the case of a right.</p>
<p>Here are some examples:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">
<span style="color:#66d9ef">val</span> either<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Either</span><span style="color:#f92672">[</span><span style="color:#66d9ef">String</span>, <span style="color:#66d9ef">Int</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">Right</span><span style="color:#f92672">(</span><span style="color:#ae81ff">2</span><span style="color:#f92672">)</span>
<span style="color:#66d9ef">val</span> result<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Either</span><span style="color:#f92672">[</span><span style="color:#66d9ef">String</span>, <span style="color:#66d9ef">Int</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span> either<span style="color:#f92672">.</span>map<span style="color:#f92672">(</span>int <span style="color:#66d9ef">=&gt;</span> int <span style="color:#f92672">*</span> <span style="color:#ae81ff">2</span><span style="color:#f92672">)</span>

<span style="color:#66d9ef">val</span> option1<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Option</span><span style="color:#f92672">[</span><span style="color:#66d9ef">Int</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">Some</span><span style="color:#f92672">(</span><span style="color:#ae81ff">2</span><span style="color:#f92672">)</span>
<span style="color:#66d9ef">val</span> result1<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Option</span><span style="color:#f92672">[</span><span style="color:#66d9ef">Int</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span> option1<span style="color:#f92672">.</span>map<span style="color:#f92672">(</span>int <span style="color:#66d9ef">=&gt;</span> int <span style="color:#f92672">*</span> <span style="color:#ae81ff">2</span><span style="color:#f92672">)</span>
<span style="color:#75715e">// a map on a None returns a None.
</span><span style="color:#75715e"></span>
</code></pre></div><p>But what if we only wanted to apply a function on the left side? conveniently, cats offers us a <code>.leftMap</code> function. This does not apply in the case of an option.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#66d9ef">val</span> result <span style="color:#66d9ef">=</span> either<span style="color:#f92672">.</span>leftMap<span style="color:#f92672">(</span>str <span style="color:#66d9ef">=&gt;</span> <span style="color:#e6db74">&#34;Error: &#34;</span> <span style="color:#f92672">+</span> str<span style="color:#f92672">)</span>
</code></pre></div><p>In some cases, we find ourselves wanting to apply different functions in the case where the return is a right and when its a left. In that case we can use <code>bimap</code>.</p>
<p>bimap is defined by a <code>Bifunctor</code> and from the cats definition:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">Bifunctor takes two type parameters instead of one, and is a functor in both of these parameters. It defines a function bimap, which allows for mapping over both arguments at the same time. Its signature is as follows:
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#66d9ef">def</span> bimap<span style="color:#f92672">[</span><span style="color:#66d9ef">A</span>, <span style="color:#66d9ef">B</span>, <span style="color:#66d9ef">C</span>, <span style="color:#66d9ef">D</span><span style="color:#f92672">](</span>fab<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">F</span><span style="color:#f92672">[</span><span style="color:#66d9ef">A</span>, <span style="color:#66d9ef">B</span><span style="color:#f92672">])(</span>f<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">A</span> <span style="color:#f92672">=&gt;</span> C<span style="color:#f92672">,</span> g<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">B</span> <span style="color:#f92672">=&gt;</span> D<span style="color:#f92672">)</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">F</span><span style="color:#f92672">[</span><span style="color:#66d9ef">C</span>, <span style="color:#66d9ef">D</span><span style="color:#f92672">]</span>
</code></pre></div><p>here&rsquo;s an example:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">
  <span style="color:#66d9ef">import</span> cats.syntax.either._

  <span style="color:#66d9ef">val</span> either<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Either</span><span style="color:#f92672">[</span><span style="color:#66d9ef">String</span>, <span style="color:#66d9ef">Int</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span> <span style="color:#f92672">???</span>
  <span style="color:#66d9ef">def</span> function1<span style="color:#f92672">(</span>str<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">String</span><span style="color:#f92672">)</span> <span style="color:#66d9ef">=</span> <span style="color:#f92672">???</span>
  <span style="color:#66d9ef">def</span> function2<span style="color:#f92672">(</span>int<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Int</span><span style="color:#f92672">)</span> <span style="color:#66d9ef">=</span> <span style="color:#f92672">???</span>

  either<span style="color:#f92672">.</span>bimap<span style="color:#f92672">(</span>function1<span style="color:#f92672">,</span> function2<span style="color:#f92672">)</span>

</code></pre></div><p>In the case where the value <code>either</code> is of type Right then <code>function2</code> will be applied. In the case its a Left, <code>function1</code> would be applied.</p>
<p>Here is the implementation of <code>bimap</code> on an either:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">
  <span style="color:#66d9ef">def</span> bimap<span style="color:#f92672">[</span><span style="color:#66d9ef">C</span>, <span style="color:#66d9ef">D</span><span style="color:#f92672">](</span>fa<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">A</span> <span style="color:#f92672">=&gt;</span> C<span style="color:#f92672">,</span> fb<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">B</span> <span style="color:#f92672">=&gt;</span> D<span style="color:#f92672">)</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Either</span><span style="color:#f92672">[</span><span style="color:#66d9ef">C</span>, <span style="color:#66d9ef">D</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span> eab <span style="color:#66d9ef">match</span> <span style="color:#f92672">{</span>
    <span style="color:#66d9ef">case</span> <span style="color:#a6e22e">Left</span><span style="color:#f92672">(</span>a<span style="color:#f92672">)</span>  <span style="color:#66d9ef">=&gt;</span> <span style="color:#a6e22e">Left</span><span style="color:#f92672">(</span>fa<span style="color:#f92672">(</span>a<span style="color:#f92672">))</span>
    <span style="color:#66d9ef">case</span> <span style="color:#a6e22e">Right</span><span style="color:#f92672">(</span>b<span style="color:#f92672">)</span> <span style="color:#66d9ef">=&gt;</span> <span style="color:#a6e22e">Right</span><span style="color:#f92672">(</span>fb<span style="color:#f92672">(</span>b<span style="color:#f92672">))</span>
  <span style="color:#f92672">}</span>

</code></pre></div><p>In case this behavior is a bit familiar its because scala offers a very similar function: <code>fold</code></p>
<p>Similarly to <code>bimap</code>, fold takes 2 functions and applies them on the left and the right.</p>
<p>Here is the scala doc along with the function definition:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">
  <span style="color:#75715e">/** Applies `fa` if this is a `Left` or `fb` if this is a `Right`.
</span><span style="color:#75715e">   *
</span><span style="color:#75715e">   *  @example {{{
</span><span style="color:#75715e">   *  val result = util.Try(&#34;42&#34;.toInt).toEither
</span><span style="color:#75715e">   *  result.fold(
</span><span style="color:#75715e">   *    e =&gt; s&#34;Operation failed with $e&#34;,
</span><span style="color:#75715e">   *    v =&gt; s&#34;Operation produced value: $v&#34;
</span><span style="color:#75715e">   *  )
</span><span style="color:#75715e">   *  }}}
</span><span style="color:#75715e">   *
</span><span style="color:#75715e">   *  @param fa the function to apply if this is a `Left`
</span><span style="color:#75715e">   *  @param fb the function to apply if this is a `Right`
</span><span style="color:#75715e">   *  @return the results of applying the function
</span><span style="color:#75715e">   */</span>
  <span style="color:#66d9ef">def</span> fold<span style="color:#f92672">[</span><span style="color:#66d9ef">C</span><span style="color:#f92672">](</span>fa<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">A</span> <span style="color:#f92672">=&gt;</span> C<span style="color:#f92672">,</span> fb<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">B</span> <span style="color:#f92672">=&gt;</span> C<span style="color:#f92672">)</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">C</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">this</span> <span style="color:#66d9ef">match</span> <span style="color:#f92672">{</span>
    <span style="color:#66d9ef">case</span> <span style="color:#a6e22e">Right</span><span style="color:#f92672">(</span>b<span style="color:#f92672">)</span> <span style="color:#66d9ef">=&gt;</span> fb<span style="color:#f92672">(</span>b<span style="color:#f92672">)</span>
    <span style="color:#66d9ef">case</span> <span style="color:#a6e22e">Left</span><span style="color:#f92672">(</span>a<span style="color:#f92672">)</span>  <span style="color:#66d9ef">=&gt;</span> fa<span style="color:#f92672">(</span>a<span style="color:#f92672">)</span>
  <span style="color:#f92672">}</span>

</code></pre></div><p>The difference between both is in the return and in the return types of the function they take.</p>
<p>In the case of <code>bimap</code> on an Either, the return type will compulsorily be an Either. So its as its name suggests, its a map in both directions. The return type is an Either and the 2 type parameters can be different from one another and from the initial type parameters.</p>
<p>But in the case of <code>fold</code>, the return type will depend on the functions passed to the fold. In the same time, both functions will have to have the same return type (<code>C in the scala doc</code>)</p>
<p>So to summarize the main differences between a bimap and a fold:</p>
<ol>
<li><code>bimap</code> returns an Either while <code>fold</code>'s return type depends on the functions passed to it.</li>
<li>The functions passed to the bimap can have different return types. while the functions passed to the fold needs to have the same return type.</li>
</ol>
]]></content>
        </item>
        
        <item>
            <title>Spark Odd Behavior with Nulls</title>
            <link>https://fares.codes/posts/spark-odd-behavior-with-nulls/</link>
            <pubDate>Sun, 19 Jan 2020 10:00:00 +0000</pubDate>
            
            <guid>https://fares.codes/posts/spark-odd-behavior-with-nulls/</guid>
            <description>Once again, I will put a 5 hour flight into good use to detail an interesting/odd behavior encountered with spark while dealing with nulls.
Any basic spark tutorial will tell you that there are a couple ways to create dataframes.
Some of which are:
  Transforming existing dataframes.
  Reading a file.
  Parallelizing over a collection.
  The first two will not be in the scope of this article.</description>
            <content type="html"><![CDATA[<p>Once again, I will put a 5 hour flight into good use to detail an interesting/odd behavior encountered with spark while dealing with nulls.</p>
<p>Any basic spark tutorial will tell you that there are a couple ways to create dataframes.</p>
<p>Some of which are:</p>
<ol>
<li>
<p>Transforming existing dataframes.</p>
</li>
<li>
<p>Reading a file.</p>
</li>
<li>
<p>Parallelizing over a collection.</p>
</li>
</ol>
<p>The first two will not be in the scope of this article. Instead I will focus on an odd behavior encountered while creating a dataframe. More specifically, the behavior is in regards to null values and how they are treated.</p>
<p>Let me start with a little bit of context:</p>
<p>I was reading a row and a specific schema and creating a dataframe, I noticed that the resulting DataFrame would differ for the same inputs depending on the underlying <code>createDataFrame</code> function that is being called.</p>
<p>Lets start with something simple:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">
    <span style="color:#66d9ef">val</span> schema<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">StructType</span> <span style="color:#f92672">=</span>
      <span style="color:#a6e22e">StructType</span><span style="color:#f92672">(</span>
        <span style="color:#a6e22e">List</span><span style="color:#f92672">(</span>
          <span style="color:#a6e22e">StructField</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Name&#34;</span><span style="color:#f92672">,</span> <span style="color:#a6e22e">StringType</span><span style="color:#f92672">,</span> nullable <span style="color:#66d9ef">=</span> <span style="color:#66d9ef">false</span><span style="color:#f92672">),</span>
          <span style="color:#a6e22e">StructField</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Age&#34;</span><span style="color:#f92672">,</span> <span style="color:#a6e22e">IntegerType</span><span style="color:#f92672">,</span> nullable <span style="color:#66d9ef">=</span> <span style="color:#66d9ef">false</span><span style="color:#f92672">)</span>
        <span style="color:#f92672">)</span>
      <span style="color:#f92672">)</span>

    <span style="color:#66d9ef">val</span> nestedRows<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Row</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">Row</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Fares&#34;</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">23</span><span style="color:#f92672">)</span>
    <span style="color:#66d9ef">import</span> scala.collection.JavaConverters._
    <span style="color:#66d9ef">val</span> data <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">List</span><span style="color:#f92672">(</span>nestedRows<span style="color:#f92672">).</span>asJava
    <span style="color:#66d9ef">val</span> df<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">DataFrame</span> <span style="color:#f92672">=</span> spark<span style="color:#f92672">.</span>createDataFrame<span style="color:#f92672">(</span>data<span style="color:#f92672">,</span> schema<span style="color:#f92672">)</span>

    df<span style="color:#f92672">.</span>show<span style="color:#f92672">()</span>

</code></pre></div><p>We would expect the dataframe to look like this:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">
+-----+---+
| Name|Age|
+-----+---+
|Fares| 23|
+-----+---+

</code></pre></div><p>Alright now assume the age was <code>null</code>. Looking at the Schema (Age is required and cannot be null), we would expect the <code>createDataFrame</code> to throw a null pointer exception.</p>
<p>Except that when we run the below code:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">
    <span style="color:#66d9ef">val</span> schema<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">StructType</span> <span style="color:#f92672">=</span>
      <span style="color:#a6e22e">StructType</span><span style="color:#f92672">(</span>
        <span style="color:#a6e22e">List</span><span style="color:#f92672">(</span>
          <span style="color:#a6e22e">StructField</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Name&#34;</span><span style="color:#f92672">,</span> <span style="color:#a6e22e">StringType</span><span style="color:#f92672">,</span> nullable <span style="color:#66d9ef">=</span> <span style="color:#66d9ef">false</span><span style="color:#f92672">),</span>
          <span style="color:#a6e22e">StructField</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Age&#34;</span><span style="color:#f92672">,</span> <span style="color:#a6e22e">IntegerType</span><span style="color:#f92672">,</span> nullable <span style="color:#66d9ef">=</span> <span style="color:#66d9ef">false</span><span style="color:#f92672">)</span>
        <span style="color:#f92672">)</span>
      <span style="color:#f92672">)</span>

    <span style="color:#66d9ef">val</span> nestedRows<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Row</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">Row</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Fares&#34;</span><span style="color:#f92672">,</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">)</span>
    <span style="color:#66d9ef">import</span> scala.collection.JavaConverters._
    <span style="color:#66d9ef">val</span> data <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">List</span><span style="color:#f92672">(</span>nestedRows<span style="color:#f92672">).</span>asJava
    <span style="color:#66d9ef">val</span> df<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">DataFrame</span> <span style="color:#f92672">=</span> spark<span style="color:#f92672">.</span>createDataFrame<span style="color:#f92672">(</span>data<span style="color:#f92672">,</span> schema<span style="color:#f92672">)</span>

    df<span style="color:#f92672">.</span>show<span style="color:#f92672">()</span>

</code></pre></div><p>we get:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">
+-----+---+
| Name|Age|
+-----+---+
|Fares|  0|
+-----+---+

</code></pre></div><p>The reason behind this has the do with the underlying functions being called by this specific <code>createDataFrame</code>. In the example of TimestampType, the underlying function being called is: <code>fromExternalRows</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">
  <span style="color:#66d9ef">def</span> fromExternalRows<span style="color:#f92672">(</span>output<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Seq</span><span style="color:#f92672">[</span><span style="color:#66d9ef">Attribute</span><span style="color:#f92672">],</span> data<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Seq</span><span style="color:#f92672">[</span><span style="color:#66d9ef">Row</span><span style="color:#f92672">])</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">LocalRelation</span> <span style="color:#f92672">=</span> <span style="color:#f92672">{</span>
    <span style="color:#66d9ef">val</span> schema <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">StructType</span><span style="color:#f92672">.</span>fromAttributes<span style="color:#f92672">(</span>output<span style="color:#f92672">)</span>
    <span style="color:#66d9ef">val</span> converter <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">CatalystTypeConverters</span><span style="color:#f92672">.</span>createToCatalystConverter<span style="color:#f92672">(</span>schema<span style="color:#f92672">)</span>
    <span style="color:#a6e22e">LocalRelation</span><span style="color:#f92672">(</span>output<span style="color:#f92672">,</span> data<span style="color:#f92672">.</span>map<span style="color:#f92672">(</span>converter<span style="color:#f92672">(</span><span style="color:#66d9ef">_</span><span style="color:#f92672">).</span>asInstanceOf<span style="color:#f92672">[</span><span style="color:#66d9ef">InternalRow</span><span style="color:#f92672">]))</span>
  <span style="color:#f92672">}</span>

</code></pre></div><p>This will in turn call: <code>CatalystTypeConverters.createToCatalystConverter(schema)</code></p>
<p>and in the case of a timestamp type, we end up calling:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">
  <span style="color:#75715e">/**
</span><span style="color:#75715e">   * Returns the number of micros since epoch from java.sql.Timestamp.
</span><span style="color:#75715e">   */</span>
  <span style="color:#66d9ef">def</span> fromJavaTimestamp<span style="color:#f92672">(</span>t<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Timestamp</span><span style="color:#f92672">)</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">SQLTimestamp</span> <span style="color:#f92672">=</span> <span style="color:#f92672">{</span>
    <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>t <span style="color:#f92672">!=</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
      t<span style="color:#f92672">.</span>getTime<span style="color:#f92672">()</span> <span style="color:#f92672">*</span> <span style="color:#ae81ff">1000L</span> <span style="color:#f92672">+</span> <span style="color:#f92672">(</span>t<span style="color:#f92672">.</span>getNanos<span style="color:#f92672">().</span>toLong <span style="color:#f92672">/</span> <span style="color:#ae81ff">1000</span><span style="color:#f92672">)</span> <span style="color:#f92672">%</span> <span style="color:#ae81ff">1000L</span>
    <span style="color:#f92672">}</span> <span style="color:#66d9ef">else</span> <span style="color:#f92672">{</span>
      <span style="color:#ae81ff">0L</span>
    <span style="color:#f92672">}</span>
  <span style="color:#f92672">}</span>

</code></pre></div><p>So when we execute a code like the one below:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">
    <span style="color:#66d9ef">val</span> schema<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">StructType</span> <span style="color:#f92672">=</span>
      <span style="color:#a6e22e">StructType</span><span style="color:#f92672">(</span>
        <span style="color:#a6e22e">List</span><span style="color:#f92672">(</span>
          <span style="color:#a6e22e">StructField</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;TS&#34;</span><span style="color:#f92672">,</span> <span style="color:#a6e22e">TimestampType</span><span style="color:#f92672">,</span> nullable <span style="color:#66d9ef">=</span> <span style="color:#66d9ef">false</span><span style="color:#f92672">)</span>
        <span style="color:#f92672">)</span>
      <span style="color:#f92672">)</span>

    <span style="color:#66d9ef">val</span> nestedRows<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Row</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">Row</span><span style="color:#f92672">(</span><span style="color:#66d9ef">null</span><span style="color:#f92672">)</span>
    <span style="color:#66d9ef">import</span> scala.collection.JavaConverters._
    <span style="color:#66d9ef">val</span> data <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">List</span><span style="color:#f92672">(</span>nestedRows<span style="color:#f92672">).</span>asJava
    <span style="color:#66d9ef">val</span> df<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">DataFrame</span> <span style="color:#f92672">=</span> spark<span style="color:#f92672">.</span>createDataFrame<span style="color:#f92672">(</span>data<span style="color:#f92672">,</span> schema<span style="color:#f92672">)</span>

    df<span style="color:#f92672">.</span>show<span style="color:#f92672">()</span>

</code></pre></div><p>We end up with:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">
+-------------------+
|                 TS|
+-------------------+
|1970-01-01 02:00:00|
+-------------------+

</code></pre></div><p>The same &ldquo;Default Value&rdquo; case can be encountered with <code>IntegerType</code>, <code>BooleanType</code>, <code>LongType</code>, <code>DoubleType</code> ect&hellip;</p>
<h2 id="what-if-we-do-not-want-this-behavior">What if we do not want this behavior</h2>
<p>This only happens when we call a specific instance of the <code>createDataFrame</code> passing it a java list. If such a behavior is to be avoided, one simply has to use another instance of the function. For example, we can call in the following manner:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">
    <span style="color:#66d9ef">val</span> schema<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">StructType</span> <span style="color:#f92672">=</span>
      <span style="color:#a6e22e">StructType</span><span style="color:#f92672">(</span>
        <span style="color:#a6e22e">List</span><span style="color:#f92672">(</span>
          <span style="color:#a6e22e">StructField</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;TS&#34;</span><span style="color:#f92672">,</span> <span style="color:#a6e22e">TimestampType</span><span style="color:#f92672">,</span> nullable <span style="color:#66d9ef">=</span> <span style="color:#66d9ef">false</span><span style="color:#f92672">)</span>
        <span style="color:#f92672">)</span>
      <span style="color:#f92672">)</span>

    <span style="color:#66d9ef">val</span> nestedRows<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Row</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">Row</span><span style="color:#f92672">(</span><span style="color:#66d9ef">null</span><span style="color:#f92672">)</span>
    <span style="color:#66d9ef">val</span> df<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">DataFrame</span> <span style="color:#f92672">=</span> spark<span style="color:#f92672">.</span>createDataFrame<span style="color:#f92672">(</span>spark<span style="color:#f92672">.</span>sparkContext<span style="color:#f92672">.</span>parallelize<span style="color:#f92672">(</span><span style="color:#a6e22e">List</span><span style="color:#f92672">(</span>nestedRows<span style="color:#f92672">)),</span> schema<span style="color:#f92672">)</span>

    df<span style="color:#f92672">.</span>show<span style="color:#f92672">()</span>

</code></pre></div><p>And end up with the expected error:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">
  The 0th field &#39;TS&#39; of input row cannot be null.

</code></pre></div><p>The reason for that is due to the instance of the function being called. in the case of the latter its:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">
  <span style="color:#75715e">/**
</span><span style="color:#75715e">   * Creates a `DataFrame` from an RDD[Row].
</span><span style="color:#75715e">   * User can specify whether the input rows should be converted to Catalyst rows.
</span><span style="color:#75715e">   */</span>
  <span style="color:#66d9ef">private</span><span style="color:#f92672">[</span><span style="color:#66d9ef">sql</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">def</span> createDataFrame<span style="color:#f92672">(</span>
      rowRDD<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">RDD</span><span style="color:#f92672">[</span><span style="color:#66d9ef">Row</span><span style="color:#f92672">],</span>
      schema<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">StructType</span><span style="color:#f92672">,</span>
      needsConversion<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Boolean</span><span style="color:#f92672">)</span> <span style="color:#66d9ef">=</span> <span style="color:#f92672">{</span>
    <span style="color:#75715e">// TODO: use MutableProjection when rowRDD is another DataFrame and the applied
</span><span style="color:#75715e"></span>    <span style="color:#75715e">// schema differs from the existing schema on any field data type.
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">val</span> catalystRows <span style="color:#66d9ef">=</span> <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>needsConversion<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
      <span style="color:#66d9ef">val</span> encoder <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">RowEncoder</span><span style="color:#f92672">(</span>schema<span style="color:#f92672">)</span>
      rowRDD<span style="color:#f92672">.</span>map<span style="color:#f92672">(</span>encoder<span style="color:#f92672">.</span>toRow<span style="color:#f92672">)</span>
    <span style="color:#f92672">}</span> <span style="color:#66d9ef">else</span> <span style="color:#f92672">{</span>
      rowRDD<span style="color:#f92672">.</span>map<span style="color:#f92672">{</span>r<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Row</span> <span style="color:#f92672">=&gt;</span> <span style="color:#a6e22e">InternalRow</span><span style="color:#f92672">.</span>fromSeq<span style="color:#f92672">(</span>r<span style="color:#f92672">.</span>toSeq<span style="color:#f92672">)}</span>
    <span style="color:#f92672">}</span>
    <span style="color:#66d9ef">val</span> logicalPlan <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">LogicalRDD</span><span style="color:#f92672">(</span>schema<span style="color:#f92672">.</span>toAttributes<span style="color:#f92672">,</span> catalystRows<span style="color:#f92672">)(</span>self<span style="color:#f92672">)</span>
    <span style="color:#a6e22e">Dataset</span><span style="color:#f92672">.</span>ofRows<span style="color:#f92672">(</span>self<span style="color:#f92672">,</span> logicalPlan<span style="color:#f92672">)</span>
  <span style="color:#f92672">}</span>

</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Stack Safe Mutual Recursion with Eval</title>
            <link>https://fares.codes/posts/stack-safe-mutual-recursion-with-eval/</link>
            <pubDate>Wed, 15 Jan 2020 10:00:00 +0000</pubDate>
            
            <guid>https://fares.codes/posts/stack-safe-mutual-recursion-with-eval/</guid>
            <description>The first time I heard someone say: &amp;ldquo;Stack Safe Mutual Recursion using cats Eval DataType and Trampolining&amp;rdquo; I figured I&amp;rsquo;d found the ONE thing I wouldn&amp;rsquo;t be able to write about, on the count of how complex it sounded.
To start with, mutual recursion is not a topic I&amp;rsquo;m comfortable with, let alone Stack Safety&amp;hellip;
But with some time and a small exercise, the idea is getting clearer in my head.</description>
            <content type="html"><![CDATA[<p>The first time I heard someone say: &ldquo;Stack Safe Mutual Recursion using cats Eval DataType and Trampolining&rdquo; I figured I&rsquo;d found the ONE thing I wouldn&rsquo;t be able to write about, on the count of how complex it sounded.</p>
<p>To start with, mutual recursion is not a topic I&rsquo;m comfortable with, let alone Stack Safety&hellip;</p>
<p>But with some time and a small exercise, the idea is getting clearer in my head. So Imma take advantage of the 5 hour flight I&rsquo;m currently on to concretize the information in my head through this article üòõ</p>
<p>From the cats documentation: <code>Eval is a data type for controlling synchronous evaluation. Its implementation is designed to provide stack-safety at all times using a technique called trampolining.</code></p>
<p>Alright so we just added more words to explain ü§¶‚Äç‚ôÇÔ∏è</p>
<p><code>Mutual Recursion</code>: Function A calling function B who in turn will call function A that will once again call function B till the end of times&hellip; Or until a certain condition is met or value is reached.</p>
<p><code>Trampolining</code>: trampolining is replacing recursive function calls with objects representing these calls. This way the recursive computation is built up in the heap instead of the stack, and it is possible to represent much deeper recursive calls just because of the bigger size of the heap.</p>
<p>There are 3 functions in Eval we will look into but first a quick recap on 2 notions:</p>
<ol>
<li>
<p><code>Lazy Evaluation</code>: Lazy evaluations refers to an expression being evaluated the first time it is used instead of the first time it is defined. The opposite is called eager evaluation. in Scala: <code>lazy val</code> is lazy (obviously&hellip;) and <code>val</code> is eager.</p>
</li>
<li>
<p><code>Memoization</code>: Refers to the ‚Äúmemorization‚Äú of the evaluated value. If a value is used twice, will it be evaluated twice or will it be evaluated once and its value memorized? In scala, <code>def</code> is not memoized, every time we call the function, it will be evaluated. In contrast, <code>val</code> is memoized. We only define a value once and then use it as many times as we&rsquo;d like without having to recompute the value every single time.</p>
</li>
</ol>
<h2 id="evaluation-strategies">Evaluation Strategies</h2>
<h3 id="eval-now">Eval Now</h3>
<p>Eval.now is an eager computation of the value. and its value is memoized.</p>
<p>From the cats documentation:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">
<span style="color:#66d9ef">val</span> eager <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">Eval</span><span style="color:#f92672">.</span>now <span style="color:#f92672">{</span>
  println<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Running expensive calculation...&#34;</span><span style="color:#f92672">)</span>
  <span style="color:#ae81ff">1</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">*</span> <span style="color:#ae81ff">3</span>
<span style="color:#f92672">}</span>
<span style="color:#75715e">// Running expensive calculation...
</span><span style="color:#75715e">// eager: cats.Eval[Int] = Now(7)
</span><span style="color:#75715e"></span>
eager<span style="color:#f92672">.</span>value
<span style="color:#75715e">// res0: Int = 7
</span></code></pre></div><h3 id="eval-later">Eval Later</h3>
<p>Eval.later is a lazy evaluation. The value is only evaluated once we call <code>.value</code> on the Later type.
Keep in mind that the result of the Later is memoized, so it is lazily evaluated but only evaluated once. (Think of lazy val)</p>
<p>From the cats documentation:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">
<span style="color:#66d9ef">val</span> lazyEval <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">Eval</span><span style="color:#f92672">.</span>later <span style="color:#f92672">{</span>
  println<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Running expensive calculation...&#34;</span><span style="color:#f92672">)</span>
  <span style="color:#ae81ff">1</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">*</span> <span style="color:#ae81ff">3</span>
<span style="color:#f92672">}</span>
<span style="color:#75715e">// lazyEval: cats.Eval[Int] = cats.Later@6c2b03e9
</span><span style="color:#75715e"></span>
lazyEval<span style="color:#f92672">.</span>value
<span style="color:#75715e">// Running expensive calculation...
</span><span style="color:#75715e">// res1: Int = 7
</span><span style="color:#75715e"></span>
lazyEval<span style="color:#f92672">.</span>value
<span style="color:#75715e">// res2: Int = 7
</span><span style="color:#75715e"></span>
</code></pre></div><h3 id="eval-always">Eval Always</h3>
<p>Eval.always is the equivalent of a def in scala. In other words, it is lazy and its value is not memoized.</p>
<p>From the cats documentation:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">
<span style="color:#66d9ef">val</span> always <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">Eval</span><span style="color:#f92672">.</span>always <span style="color:#f92672">{</span>
  println<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Running expensive calculation...&#34;</span><span style="color:#f92672">)</span>
  <span style="color:#ae81ff">1</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">*</span> <span style="color:#ae81ff">3</span>
<span style="color:#f92672">}</span>
<span style="color:#75715e">// always: cats.Eval[Int] = cats.Always@6a9ffee8
</span><span style="color:#75715e"></span>
always<span style="color:#f92672">.</span>value
<span style="color:#75715e">// Running expensive calculation...
</span><span style="color:#75715e">// res3: Int = 7
</span><span style="color:#75715e"></span>
always<span style="color:#f92672">.</span>value
<span style="color:#75715e">// Running expensive calculation...
</span><span style="color:#75715e">// res4: Int = 7
</span><span style="color:#75715e"></span>
</code></pre></div><h2 id="so-when-do-we-use-each-strategy">So When Do We Use Each Strategy</h2>
<ul>
<li>Eval.now should be used when the value to be used in the Now is already in hand or if its computation is pure and fast.</li>
</ul>
<p>Example, assume we are delving into a spark Json object to find the Simple Values.</p>
<p>Keep in mind that a json object can be a Struct containing field names and other Json Objects, an Array of Json Objects or simply a Json Value (denoted JValue).</p>
<p>During a Lazy recursion over that object, if we reach a JValue (an object where the value is already in hand) we can call the Now.
In other cases, we&rsquo;d have to go one level deeper and repeat.</p>
<p>As a rule of thumb, when there is no computation required, use the <code>Now</code></p>
<ul>
<li>
<p>Eval.later will evaluate the computation and cache the value.</p>
</li>
<li>
<p>Eval.always will evaluate the computation every time value is required. It should only be used when we need laziness without caching. Otherwise use Later.</p>
</li>
</ul>
<h2 id="important-note-about-stack-safety">Important note about stack safety</h2>
<p>When we chain multiple computations using <code>flatMap</code>, we are still stack safe as long as we don&rsquo;t nest calls to <code>.value</code> inside the Eval otherwise we will no longer be stack safe.</p>
<h2 id="practical-example">Practical Example</h2>
<p>So how does any of this help us? whats cool is that we can chain computations each returning an Eval and leave the actual evaluation till the end.</p>
<p>I mentioned Json Objects above&hellip; so why not use that as an example:</p>
<p>A Json Object can be:</p>
<ul>
<li>
<p>JValue (JString, JInt, JDouble&hellip;)</p>
</li>
<li>
<p>JArray (An Array of JObjects)</p>
</li>
<li>
<p>JStruct (Containing a List [(FieldName, JObject)] so a list of tuple: FieldNames and the associated JObject)</p>
</li>
</ul>
<h3 id="requirement">Requirement</h3>
<p>Assume that for some unknown and obscene reason, we were asked to traverse a Json Object and increment all the Integers by 1 and transform all the strings to: &ldquo;String: &quot; + the actual String content.</p>
<p>I know its weird but humor me ü§°</p>
<p>Our Domain would look like this:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">
<span style="color:#66d9ef">sealed</span> <span style="color:#66d9ef">trait</span> <span style="color:#a6e22e">JObject</span>
<span style="color:#66d9ef">sealed</span> <span style="color:#66d9ef">trait</span> <span style="color:#a6e22e">JValue</span> <span style="color:#66d9ef">extends</span> <span style="color:#a6e22e">JObject</span>
<span style="color:#66d9ef">final</span> <span style="color:#66d9ef">case</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">JString</span><span style="color:#f92672">(</span>value<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">String</span><span style="color:#f92672">)</span> <span style="color:#66d9ef">extends</span> <span style="color:#a6e22e">JValue</span>
<span style="color:#66d9ef">final</span> <span style="color:#66d9ef">case</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">JInt</span><span style="color:#f92672">(</span>value<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Int</span><span style="color:#f92672">)</span> <span style="color:#66d9ef">extends</span> <span style="color:#a6e22e">JValue</span>

<span style="color:#66d9ef">final</span> <span style="color:#66d9ef">case</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">JArray</span><span style="color:#f92672">(</span>elems<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Seq</span><span style="color:#f92672">[</span><span style="color:#66d9ef">JObject</span><span style="color:#f92672">])</span> <span style="color:#66d9ef">extends</span> <span style="color:#a6e22e">JObject</span>

<span style="color:#66d9ef">final</span> <span style="color:#66d9ef">case</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">JStruct</span><span style="color:#f92672">(</span>fields<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Seq</span><span style="color:#f92672">[(</span><span style="color:#66d9ef">String</span>, <span style="color:#66d9ef">JObject</span><span style="color:#f92672">)])</span> <span style="color:#66d9ef">extends</span> <span style="color:#a6e22e">JObject</span>

</code></pre></div><p>One easy way to achieve the requirement is to do a simple recursion over the initial JObject value</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">
  <span style="color:#66d9ef">def</span> transform<span style="color:#f92672">(</span>value<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">JObject</span><span style="color:#f92672">)</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">JObject</span> <span style="color:#f92672">=</span> <span style="color:#f92672">{</span>
    value <span style="color:#66d9ef">match</span> <span style="color:#f92672">{</span>
      <span style="color:#66d9ef">case</span> <span style="color:#a6e22e">JArray</span><span style="color:#f92672">(</span>elems<span style="color:#f92672">)</span> <span style="color:#66d9ef">=&gt;</span> <span style="color:#a6e22e">JArray</span><span style="color:#f92672">(</span>elems<span style="color:#f92672">.</span>map<span style="color:#f92672">(</span>v <span style="color:#66d9ef">=&gt;</span> transform<span style="color:#f92672">(</span>v<span style="color:#f92672">)))</span>
      <span style="color:#66d9ef">case</span> <span style="color:#a6e22e">JStruct</span><span style="color:#f92672">(</span>fields<span style="color:#f92672">)</span> <span style="color:#66d9ef">=&gt;</span>
        <span style="color:#a6e22e">JStruct</span><span style="color:#f92672">(</span>fields<span style="color:#f92672">.</span>map <span style="color:#f92672">{</span>
          <span style="color:#66d9ef">case</span> <span style="color:#f92672">(</span>str<span style="color:#f92672">,</span> jObject<span style="color:#f92672">)</span> <span style="color:#66d9ef">=&gt;</span> <span style="color:#f92672">(</span>str<span style="color:#f92672">,</span> transform<span style="color:#f92672">(</span>jObject<span style="color:#f92672">))</span>
        <span style="color:#f92672">})</span>
      <span style="color:#66d9ef">case</span> value<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">JValue</span> <span style="color:#f92672">=&gt;</span>
        value <span style="color:#66d9ef">match</span> <span style="color:#f92672">{</span>
          <span style="color:#66d9ef">case</span> <span style="color:#a6e22e">JString</span><span style="color:#f92672">(</span>value<span style="color:#f92672">)</span> <span style="color:#66d9ef">=&gt;</span> <span style="color:#a6e22e">JString</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;String: &#34;</span> <span style="color:#f92672">+</span> value<span style="color:#f92672">)</span>
          <span style="color:#66d9ef">case</span> <span style="color:#a6e22e">JInt</span><span style="color:#f92672">(</span>value<span style="color:#f92672">)</span>    <span style="color:#66d9ef">=&gt;</span> <span style="color:#a6e22e">JInt</span><span style="color:#f92672">(</span>value <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span><span style="color:#f92672">)</span>
        <span style="color:#f92672">}</span>
    <span style="color:#f92672">}</span>
  <span style="color:#f92672">}</span>

</code></pre></div><p>Took about 5 min to write and simple to read&hellip;</p>
<p>But the issue here is that I do not have control over the initial Json Object ill be traversing. Each call to transform will create a new stack frame and for deeply nested JObjects, we will end up with a stack overflow problem.</p>
<p>The more proper way of doing this is using Eval.</p>
<p>From what we&rsquo;ve discussed earlier, the Eval.now should be used when we have reached a expected value.</p>
<p>for the rest we will continue going one level deeper searching for the JValues</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">
  <span style="color:#66d9ef">def</span> updateJObject<span style="color:#f92672">(</span>jo<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">JObject</span><span style="color:#f92672">)</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">JObject</span> <span style="color:#f92672">=</span> <span style="color:#f92672">{</span>
    <span style="color:#66d9ef">def</span> iterate<span style="color:#f92672">(</span>elems<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Seq</span><span style="color:#f92672">[</span><span style="color:#66d9ef">JObject</span><span style="color:#f92672">])</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Eval</span><span style="color:#f92672">[</span><span style="color:#66d9ef">Seq</span><span style="color:#f92672">[</span><span style="color:#66d9ef">JObject</span><span style="color:#f92672">]]</span> <span style="color:#66d9ef">=</span> <span style="color:#f92672">{</span>
      <span style="color:#a6e22e">Eval</span><span style="color:#f92672">.</span>always<span style="color:#f92672">(</span>elems<span style="color:#f92672">).</span>flatMap <span style="color:#f92672">{</span>
        <span style="color:#66d9ef">case</span> x <span style="color:#f92672">+:</span> xs <span style="color:#66d9ef">=&gt;</span> deepMap<span style="color:#f92672">(</span>x<span style="color:#f92672">).</span>flatMap<span style="color:#f92672">(</span>x <span style="color:#66d9ef">=&gt;</span> iterate<span style="color:#f92672">(</span>xs<span style="color:#f92672">).</span>map<span style="color:#f92672">(</span>l <span style="color:#66d9ef">=&gt;</span> x <span style="color:#f92672">+:</span> l<span style="color:#f92672">))</span>
        <span style="color:#66d9ef">case</span> <span style="color:#a6e22e">Nil</span>     <span style="color:#66d9ef">=&gt;</span> <span style="color:#a6e22e">Eval</span><span style="color:#f92672">.</span>now<span style="color:#f92672">(</span><span style="color:#a6e22e">Nil</span><span style="color:#f92672">)</span>
      <span style="color:#f92672">}</span>
    <span style="color:#f92672">}</span>

    <span style="color:#66d9ef">def</span> deepMap<span style="color:#f92672">(</span>value<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">JObject</span><span style="color:#f92672">)</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Eval</span><span style="color:#f92672">[</span><span style="color:#66d9ef">JObject</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span> <span style="color:#f92672">{</span>
      <span style="color:#a6e22e">Eval</span><span style="color:#f92672">.</span>always<span style="color:#f92672">(</span>value<span style="color:#f92672">).</span>flatMap <span style="color:#f92672">{</span>
        <span style="color:#66d9ef">case</span> value<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">JValue</span> <span style="color:#f92672">=&gt;</span>
          value <span style="color:#66d9ef">match</span> <span style="color:#f92672">{</span>
            <span style="color:#66d9ef">case</span> <span style="color:#a6e22e">JString</span><span style="color:#f92672">(</span>value<span style="color:#f92672">)</span> <span style="color:#66d9ef">=&gt;</span> <span style="color:#a6e22e">Eval</span><span style="color:#f92672">.</span>now<span style="color:#f92672">(</span><span style="color:#a6e22e">JString</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;String: &#34;</span> <span style="color:#f92672">+</span> value<span style="color:#f92672">))</span>
            <span style="color:#66d9ef">case</span> <span style="color:#a6e22e">JInt</span><span style="color:#f92672">(</span>value<span style="color:#f92672">)</span>    <span style="color:#66d9ef">=&gt;</span> <span style="color:#a6e22e">Eval</span><span style="color:#f92672">.</span>now<span style="color:#f92672">(</span><span style="color:#a6e22e">JInt</span><span style="color:#f92672">(</span>value <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span><span style="color:#f92672">))</span>
          <span style="color:#f92672">}</span>
        <span style="color:#66d9ef">case</span> <span style="color:#a6e22e">JArray</span><span style="color:#f92672">(</span>elems<span style="color:#f92672">)</span> <span style="color:#66d9ef">=&gt;</span> iterate<span style="color:#f92672">(</span>elems<span style="color:#f92672">).</span>map<span style="color:#f92672">(</span><span style="color:#a6e22e">JArray</span><span style="color:#f92672">)</span>
        <span style="color:#66d9ef">case</span> jstruct<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">JStruct</span> <span style="color:#f92672">=&gt;</span>
          <span style="color:#66d9ef">val</span> <span style="color:#f92672">(</span>fieldNames<span style="color:#f92672">,</span> jobject<span style="color:#f92672">)</span> <span style="color:#66d9ef">=</span> jstruct<span style="color:#f92672">.</span>fields<span style="color:#f92672">.</span>unzip
          iterate<span style="color:#f92672">(</span>jobject<span style="color:#f92672">).</span>map<span style="color:#f92672">(</span>ob <span style="color:#66d9ef">=&gt;</span> <span style="color:#a6e22e">JStruct</span><span style="color:#f92672">(</span>fieldNames<span style="color:#f92672">.</span>zip<span style="color:#f92672">(</span>ob<span style="color:#f92672">)))</span>
      <span style="color:#f92672">}</span>
    <span style="color:#f92672">}</span>

    deepMap<span style="color:#f92672">(</span>jo<span style="color:#f92672">).</span>value
  <span style="color:#f92672">}</span>

</code></pre></div><h3 id="code-breakdown">Code Breakdown</h3>
<p>From a high level point of view, we notice there are two functions now&hellip; instead of one.</p>
<p>and each functions calls the other function and so on and so forth.</p>
<p>I&rsquo;ve found it helpful when dealing with recursion to start with the stopping criteria.</p>
<p>In this case, we can look at the places where we call the Eval.now, and thats in the deepMap whenever we find a JValue. This is expected given the task at hand. notice that we could have abstracted the transformations applied on the Int or the String to another function (and it would have been better and more readable)&hellip;</p>
<p>Functionally speaking, we are given a JObject and we would like to traverse it and all its sub structures in order to find the JString or the JInt.</p>
<p>This is where the case of JArray and of JStruct come into play.</p>
<p>In case we have an array, we would like to go one level deeper into every element of said array, and apply the function on that element.</p>
<p>Calling <code>deepMap</code> does not help because of the accepted params. deepMap takes a JObject, but we need to pass that function a List of JObjects.</p>
<p>Additionally, we cannot map over every element of the Array and apply deepMap on each element, because we need to conserve the initial structure: an Array of JObjects in order to return an <code>Eval[JArray[JObject]]</code>. Applying the map on every element would have resulted in a:
<code>Eval[JArray[Eval[JObject]]]</code> which would no longer be compatible with the main return type of <code>Eval[JObject]</code></p>
<p>This is why we had to create another function <code>iterate</code>.</p>
<p>Iterate takes a sequence of JObects and decomposes it into head and tail. It applies the <code>deepMap</code> function to the head, and then calls itself one more tail but this time only passing the tail as a param. Eventually, we would have applied deepMap on every element of the Seq&hellip; we append all the elements together and return an <code>Eval[Seq[JObject]]</code></p>
<p>In the case of JArray, the return of <code>iterate</code> is inserted into the Object JArray making the final return type <code>Eval[JArray[JObject]]</code></p>
<p>As for the JStruct, the idea is pretty similar to that of the JArray, but we had to add a small manipulation in order to be able to reconstruct the Struct using the FieldNames so we unzipped the data and re-zipped it after applying the transformations. Note that the map on an eval will retrieve the entire JObject inside the Eval, not every element of the JObject.</p>
<p>And this was how <code>Eval</code> can be used to achieve stack safe mutual recursion.</p>
<h2 id="to-test-this-out">To Test This Out</h2>
<p>Run the below example to test the functions above:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">
  <span style="color:#66d9ef">val</span> identity<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">JObject</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">JStruct</span><span style="color:#f92672">(</span>
    <span style="color:#a6e22e">List</span><span style="color:#f92672">[(</span><span style="color:#66d9ef">String</span>, <span style="color:#66d9ef">JObject</span><span style="color:#f92672">)](</span>
      <span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Name&#34;</span><span style="color:#f92672">,</span> <span style="color:#a6e22e">JString</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Fares&#34;</span><span style="color:#f92672">)),</span>
      <span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Age&#34;</span><span style="color:#f92672">,</span> <span style="color:#a6e22e">JInt</span><span style="color:#f92672">(</span><span style="color:#ae81ff">23</span><span style="color:#f92672">)),</span>
      <span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Profession&#34;</span><span style="color:#f92672">,</span>
       <span style="color:#a6e22e">JArray</span><span style="color:#f92672">(</span><span style="color:#a6e22e">List</span><span style="color:#f92672">[</span><span style="color:#66d9ef">JObject</span><span style="color:#f92672">](</span><span style="color:#a6e22e">JString</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Google Cloud Professional Data Engineer&#34;</span><span style="color:#f92672">),</span>
                            <span style="color:#a6e22e">JString</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Apache Spark Developer&#34;</span><span style="color:#f92672">))))</span>
    <span style="color:#f92672">))</span>

  println<span style="color:#f92672">(</span>updateJObject<span style="color:#f92672">(</span>identity<span style="color:#f92672">))</span>

  <span style="color:#75715e">// JStruct(List((Name,JString(String: Fares)), (Age,JInt(24)), (Profession,JArray(List(JString(String: Google Cloud Professional Data Engineer), JString(String: Apache Spark Developer))))))
</span><span style="color:#75715e"></span>
</code></pre></div><h2 id="some-metrics">Some Metrics</h2>
<p>Erik Osheim (@non) ran a benchmark to compare <code>Eval</code>, <code>TailRec library</code> and <code>Trampoline technic</code>. Here are the results (Sep. 2015):</p>
<table>
<thead>
<tr>
<th align="center">Benchmark</th>
<th align="center">Mode</th>
<th align="center">Cnt</th>
<th align="center">Score</th>
<th align="center">Error</th>
<th align="center">Units</th>
</tr>
</thead>
<tbody>
<tr>
<td align="center">TrampolineBench.eval</td>
<td align="center">thrpt</td>
<td align="center">3</td>
<td align="center">23049.351</td>
<td align="center">¬± 3891.576</td>
<td align="center">ops/s</td>
</tr>
<tr>
<td align="center">TrampolineBench.stdlib</td>
<td align="center">thrpt</td>
<td align="center">3</td>
<td align="center">11827.608</td>
<td align="center">¬± 1919.654</td>
<td align="center">ops/s</td>
</tr>
<tr>
<td align="center">TrampolineBench.trampoline</td>
<td align="center">thrpt</td>
<td align="center">3</td>
<td align="center">5743.017</td>
<td align="center">¬±  197.309</td>
<td align="center">ops/s</td>
</tr>
</tbody>
</table>
<p>Source: <a href="https://github.com/non/cats/tree/topic/eval-call-bench">https://github.com/non/cats/tree/topic/eval-call-bench</a> and <a href="https://gitter.im/typelevel/cats?at=55f07c1ce30ef74f74f95d3a">https://gitter.im/typelevel/cats?at=55f07c1ce30ef74f74f95d3a</a></p>
]]></content>
        </item>
        
        <item>
            <title>Crash Course in Machine Learning</title>
            <link>https://fares.codes/posts/crash-course-in-machine-learning/</link>
            <pubDate>Mon, 09 Dec 2019 10:00:00 +0000</pubDate>
            
            <guid>https://fares.codes/posts/crash-course-in-machine-learning/</guid>
            <description>I take article requests now&amp;hellip; üòõ
The following article will be a quick overview of classical machine learning and the different types and algorithms out there.
Don&amp;rsquo;t expect any code implementation or a hands-on lab this is just to provide an overview of the types of machine learning algorithms and when those can be used.
On a high level, we can think of a machine learning model as a black box.</description>
            <content type="html"><![CDATA[<p>I take article requests now&hellip; üòõ</p>
<p>The following article will be a quick overview of classical machine learning and the different types and algorithms out there.</p>
<p>Don&rsquo;t expect any code implementation or a hands-on lab this is just to provide an overview of the types of machine learning algorithms and when those can be used.</p>
<p>On a high level, we can think of a machine learning model as a black box. One that will take in some input data, do something with that data and then spit out some output data.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">                    +-------------------------+
Input Data ------&gt;  | Machine Learning Model  | ------&gt; Output Data
                    +-------------------------+

</code></pre></div><p>This black box however needs to be trained. This is where the word <code>Learning</code> comes from.</p>
<p>Similarly, on a very high level, Machine learning models can be broken down into two categories: <code>Supervised</code> and <code>Unsupervised</code>. Those categories relate to how this model will be trained.</p>
<hr>
<h2 id="supervised-learning">Supervised Learning</h2>
<p>In supervised machine learning, We rely on a <code>training dataset</code> to teach the ML model how to make accurate future predictions. We say that we have a labeled dataset. That is a dataset containing both the input data (features) and for each input data, the corresponding output data (prediction).</p>
<p>Supervised Learning looks like this:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">
                    +-------------------------+
Input Data  -----&gt;  |     Machine learning    | ------&gt; Machine Learning
Output Data -----&gt;  |        Algorithm        |             Model
                    +-------------------------+


   Real             +-------------------------+            Real
Input Data ------&gt;  | Machine Learning Model  | ------&gt; Output Data
                    +-------------------------+

</code></pre></div><p>Here&rsquo;s an example for a more concrete understanding.</p>
<p>Assume this is out training data:</p>
<table>
<thead>
<tr>
<th align="center">Name</th>
<th align="center">Age</th>
<th align="center">Profession</th>
<th align="center">Car</th>
<th align="center">Salary</th>
</tr>
</thead>
<tbody>
<tr>
<td align="center">Danny</td>
<td align="center">36</td>
<td align="center">HR Manager</td>
<td align="center">Mercedes</td>
<td align="center">126,000</td>
</tr>
<tr>
<td align="center">Eric</td>
<td align="center">25</td>
<td align="center">Software Engineer</td>
<td align="center">Toyota</td>
<td align="center">45,000</td>
</tr>
<tr>
<td align="center">Sarah</td>
<td align="center">45</td>
<td align="center">CEO</td>
<td align="center">BMW</td>
<td align="center">170,000</td>
</tr>
<tr>
<td align="center">Emily</td>
<td align="center">21</td>
<td align="center">Art Major</td>
<td align="center">N/A</td>
<td align="center">10,000</td>
</tr>
</tbody>
</table>
<p>If I were to hide the last column and ask you to predict who has the highest salary&hellip; Intuitively you&rsquo;d say that that person is most likely in some sort of managerial position, is a bit older in age and drives a nice car&hellip; I&rsquo;m not saying its always the case (Kylie Jenner became the youngest billionaire ever at 21&hellip; ü§¶‚Äç‚ôÇÔ∏è) ok pardon the digression&hellip; It&rsquo;s not always the case but it is the case in general&hellip;</p>
<p>This is exactly what we&rsquo;ll be doing with our model. We will give it the input data called features, well give it a lot of data (10,000 to 100,000) and for each row of feature, well give the model the correct prediction (in this case the salary). We will then ask our model to learn what makes people have a high salary.</p>
<p>Later on, we will use that trained model to make actual prediction for people whose salaries are truly unknown to us.</p>
<p>But how can we trust our model and more importantly how can we trust its predictions&hellip; There are a lot of techniques to validate a trained model, but the simplest is this:</p>
<p>Split the labeled data into two different sets. A training set that we will feed to the machine learning algorithm, and a testing set that we will use to validate the predictions of the models.
Once the model is trained, we will hide the <code>Salary</code> Column of the testing set and we will ask the model to predict the salaries of the testing data. Then we will compare the results of the model with our actual results.</p>
<hr>
<p>There are two subcategories in <code>Supervised Learning</code>: <code>Classification</code> and <code>Regression</code>. Those depend on the nature of the value to be predicted.</p>
<h3 id="classification">Classification</h3>
<p>Like the name indicates, in classification, we class features into a specific category (also called classes). For example, if we&rsquo;re predicting if a certain credit card transaction is fraudulent or not, we&rsquo;d be training a classification model. More specifically, a two class classification model: A transaction can be <code>Fraudulent</code> or it can be <code>Non Fraudulent</code>.
If We were predicting if an email is <code>Spam</code> or <code>Personal</code> or <code>Business</code> then we&rsquo;d also be training a classification model. But this time, it&rsquo;ll be a three class classification model, because an email can fall into one of three categories.</p>
<h4 id="some-classification-algorithms">Some Classification Algorithms</h4>
<ul>
<li>
<p>Support Vector Machines (SVM)</p>
</li>
<li>
<p>Decision Trees</p>
</li>
<li>
<p>Logistic Regression (despite its name üòù)</p>
</li>
<li>
<p>K Nearest Neighbor (KNN)</p>
</li>
<li>
<p>Naive Bayes Classifier</p>
</li>
</ul>
<h3 id="regression">Regression</h3>
<p>Unlike Classification, regression is where we try to predict a continuous value instead of a category.</p>
<p>For example, out previous case with the predictions of salaries is a regression problem. We are not trying to classify people as rich or not, we are attempting to predict the numerical value representing their salaries. Another example can be the prediction of the cost of a house based on X criteria.</p>
<h4 id="some-regression-algorithms">Some Regression Algorithms</h4>
<p>The most well known and easy to understand algorithm is the <code>Linear Regression</code>. Its when we try to model the data to a specific trend line. Using the famous: <code>y= a.X +b</code></p>
<p>Other algos include:</p>
<ul>
<li>
<p>Non Linear Regression</p>
</li>
<li>
<p>Ridge Regression</p>
</li>
<li>
<p>Lasso Regression</p>
</li>
<li>
<p>Elastic Regression</p>
</li>
</ul>
<hr>
<h2 id="unsupervised-learning">Unsupervised Learning</h2>
<p>In unsupervised learning, the dataset is not labeled. The ML algorithm will attempt to find certain patterns or groups in the dataset.
With unsupervised learning, we are also unsure of the expected outcome.</p>
<p>So why is unsupervised learning useful? because sometimes, we simply don&rsquo;t really know what the correct output is. In other times, it can be too costly to label a specific dataset with 10,000 or 100,000 rows&hellip; Unsupervised learning is also very useful in anomaly detection, finding the outliers.</p>
<p>Unsupervised learning can be grouped into 3 categories:</p>
<ul>
<li>
<p>Clustering</p>
</li>
<li>
<p>Association Rules</p>
</li>
<li>
<p>Dimensionality Reduction</p>
</li>
</ul>
<h3 id="clustering">Clustering</h3>
<p>In Clustering models, we attempt to find groups of data points that are similar to one another.</p>
<h4 id="some-clustering-algorithms">Some Clustering Algorithms</h4>
<ul>
<li>
<p>K-Means Clustering</p>
</li>
<li>
<p>K-NN Clustering</p>
</li>
<li>
<p>Hierarchical Clustering</p>
</li>
</ul>
<h3 id="association-rules">Association Rules</h3>
<p>I bet you&rsquo;ve done one of the following: bought a item off Amazon, watched a YouTube video, binged watched a series on Netflix, listened to a playlist on Spotify&hellip;</p>
<p>They all have one thing in common, they all recommend us even more products.</p>
<p>How do they do it?</p>
<p>Humans are inherently predictable. If 5 people watched the same 10 series on Netflix, odds are they have similar taste in series&hellip; So if one of those 5 people started watching a new series, we could recommend it to others as well.</p>
<p>Similarly for supermarkets and Amazon&hellip; Someone who recently bought a printer will most likely also buy some paper to go with it.</p>
<p>Those are called association rules. We associate product A with product B because we assume that if a person buys product A, he is most likely to also buy product B. Keep in mind that it might not work the other way around: If I recently bought a printer, ill most likely buy paper. But if I recently bought some paper, I might not need a printer to go with them.</p>
<p>From a marketing perspective, association rules are interesting because they&rsquo;re a way to increase sales.</p>
<h4 id="some-association-rules-algorithms">Some Association Rules Algorithms</h4>
<ul>
<li>
<p>Apriori Algorithm</p>
</li>
<li>
<p>FP Growth Algorithm</p>
</li>
</ul>
<h3 id="dimensionality-reduction">Dimensionality Reduction</h3>
<p>From a mathematical perspective, dimensionality reduction is the process of reducing the number of random variables under consideration by obtaining a set of principal variables.</p>
<p>If this doesn&rsquo;t make any sense, its ok&hellip; here&rsquo;s a more concrete example:</p>
<table>
<thead>
<tr>
<th align="center">Name</th>
<th align="center">Age</th>
<th align="center">Profession</th>
<th align="center">Car</th>
<th align="center">Salary in $</th>
<th align="center">Salary in ‚Ç¨</th>
</tr>
</thead>
<tbody>
<tr>
<td align="center">Danny</td>
<td align="center">36</td>
<td align="center">HR Manager</td>
<td align="center">Mercedes</td>
<td align="center">126,000</td>
<td align="center">113309.36</td>
</tr>
<tr>
<td align="center">Eric</td>
<td align="center">25</td>
<td align="center">Software Engineer</td>
<td align="center">Toyota</td>
<td align="center">45,000</td>
<td align="center">40467.63</td>
</tr>
<tr>
<td align="center">Sarah</td>
<td align="center">45</td>
<td align="center">CEO</td>
<td align="center">BMW</td>
<td align="center">170,000</td>
<td align="center">152877.70</td>
</tr>
<tr>
<td align="center">Emily</td>
<td align="center">21</td>
<td align="center">Art Major</td>
<td align="center">N/A</td>
<td align="center">10,000</td>
<td align="center">8992.81</td>
</tr>
</tbody>
</table>
<p>There is a linear correlation between the two columns <code>Salaries in $</code> and <code>Salaries in ‚Ç¨</code>. One of the two columns does not bring in any new information and so its just noise in the data.</p>
<p>With Dimensionality Reduction, this type of correlation can be detected and removed.</p>
<h4 id="some-dimensionality-reduction-algorithms">Some Dimensionality Reduction Algorithms</h4>
<ul>
<li>
<p>Principal Component Analysis (PCA)</p>
</li>
<li>
<p>Linear Discriminant Analysis (LDA)</p>
</li>
<li>
<p>Generalized Discriminant Analysis (GDA)</p>
</li>
</ul>
<hr>
]]></content>
        </item>
        
        <item>
            <title>Passing the Scrum Master Certification</title>
            <link>https://fares.codes/posts/passing-the-scrum-master-certification/</link>
            <pubDate>Sun, 03 Nov 2019 12:00:00 +0000</pubDate>
            
            <guid>https://fares.codes/posts/passing-the-scrum-master-certification/</guid>
            <description>The Professional Scrum Master Certification level 1 is one of those easy certifications you can easily obtain by reading a little bit about scrum and doing a couple mock tests.
This article will compile a list of useful resources that will help learn more about the scrum framework and eventually pass the certification.
I highly suggest reading the official scrum guide. It is short and simple to read. With that said I will outline below the most important parts of each section and then mention important points to keep in mind while passing the scrum certification.</description>
            <content type="html"><![CDATA[<p>The Professional Scrum Master Certification level 1 is one of those easy certifications you can easily obtain by reading a little bit about scrum and doing a couple mock tests.</p>
<p>This article will compile a list of useful resources that will help learn more about the scrum framework and eventually pass the certification.</p>
<p>I highly suggest reading the official scrum guide. It is short and simple to read. With that said I will outline below the most important parts of each section and then mention important points to keep in mind while passing the scrum certification.</p>
<h2 id="highlights-from-the-scrum-guide">Highlights from the Scrum Guide</h2>
<h3 id="definition-of-scrum">Definition of SCRUM</h3>
<p>Scrum is a <code>lightweight framework</code>that is based on <code>empirical process control theory</code>. This framework is used to create and maintain complex products.
Being empirical, means that scrum extracts its knowledge from experience.</p>
<p>Scrum relies on small teams of people that are <code>highly flexible</code> and <code>adaptive</code></p>
<h3 id="scrum-theory">Scrum Theory</h3>
<p>Scrum is built on three main pillars:</p>
<ol>
<li>
<p>Transparency:</p>
<p>The work of everyone is visible to all the people in the organization.</p>
<p>Some example of where we find transparency in scrum:</p>
<ul>
<li>
<p>During the daily stand up meeting, every member of the dev team talks about his work and issues he is having. this allows everyone to have an idea of what everyone else is doing, and potentially helping solve some of the encountered issues</p>
</li>
<li>
<p>The Definition of Done (DOD) is another example of transparency in scrum. it allows the dev team and the PO to have an idea about what will be done.</p>
</li>
</ul>
</li>
<li>
<p>Inspection</p>
<p>Inspection should be done frequently to make sure there are no unwanted variances from the sprint goal.
An example of inspection is the sprint review during which a team can hold a demo.</p>
</li>
<li>
<p>Adaptation</p>
<p>If a person detects that a particular process has deviated outside of acceptable limits (and that the resulting product will be impacted/unacceptable) then that process must be adjusted <em>as soon as possible</em> to minimize further deviations.</p>
<p>There are 4 official opportunities to inspect and adapt in scrum:</p>
<ul>
<li>Sprint Planning</li>
<li>Daily Scrum</li>
<li>Sprint Review</li>
<li>Sprint Retrospective</li>
</ul>
</li>
</ol>
<h3 id="scrum-values">Scrum Values</h3>
<p>The 5 Scrum Values are:</p>
<ul>
<li>Commitment</li>
<li>Courage</li>
<li>Focus</li>
<li>Openness</li>
<li>Respect</li>
</ul>
<h3 id="the-scrum-team">The Scrum Team</h3>
<p>The Scrum Teams are self organizing (They chose how to best accomplish the work and not directed by someone) and cross functional (they have the necessary skills to accomplish all the work without depending on others outside the scrum team).
The Scrum Team consists of:</p>
<h4 id="the-product-owner">The Product Owner</h4>
<p>The product owners job is to maximize the value of the work done by the development team. He is the only person responsible for managing the product backlog by:</p>
<ul>
<li>Clearly expressing P.B items</li>
<li>Ordering the P.B by priority</li>
<li>The P.B items should be visible, transparent and clear to all.</li>
</ul>
<h4 id="the-development-team">The Development Team</h4>
<p>The Dev team is responsible for doing the work and delivering a potentially releasable increment of the product.</p>
<p>A done increment is required at the Sprint Review.</p>
<p>The dev team should have the following characteristics:</p>
<ul>
<li><em>Self Organizing</em> They organize amongst themselves to turn product backlog item to a product increment</li>
<li><em>Cross Functional</em> The Dev team should have the skills necessary to create the product increment</li>
<li><em>No Titles</em> There are no titles inside the dev team</li>
<li><em>No Sub-Teams</em> regardless of the work being done. No testing team, business analysts&hellip;</li>
<li><em>Accountability belongs to the entire Dev Team</em></li>
</ul>
<p>The Dev team should be between 3 and 9 people. Making the scrum team between 5 and 11 people</p>
<h4 id="the-scrum-master">The Scrum Master</h4>
<p>The keywords that you will often hear associated to the scrum master are:</p>
<ul>
<li>Facilitator</li>
<li>Removes Impediments</li>
</ul>
<p>The scrum masters role is also to support the theory of scrum and help everyone apply it correctly.</p>
<p>The Scrum Master can support the PO by finding techniques to effectively manage the product backlog, maximize the value of the work and facilitate scrum events.</p>
<p>The Scrum Master can also support the dev team by teaching them to be self organized and cross functional as well as create a high value product.</p>
<p>The Scrum Master also supports the Organization as a whole by coaching it in its scrum adoption, increasing the productivity of the scrum team and working with other scrum masters to increase the effectiveness of scrum within the organization.</p>
<h3 id="scrum-events">Scrum Events</h3>
<p>All events in Scrum are time boxed. A Sprint has a fixed duration and cannot be shortened or lengthened.
Each event in scrum is an opportunity to inspect and adapt. They are designed to make the work more transparent. So omitting one of those events will lead to a loss in transparency and an inability to inspect and adapt.</p>
<h4 id="the-sprint">The Sprint</h4>
<p>A Sprint is time boxed at one month or less. Its duration is fixed and does not change during a sprint. During a sprint a Done increment of a potentially releasable software is created.</p>
<p>During a Sprint:</p>
<ul>
<li>No change is allowed if it endangers the Sprint goal</li>
<li>Quality goal does not decrease</li>
<li>Scope may be changed and re-negotiated between the PO and the Dev Team as more is learned</li>
</ul>
<p>A Sprint may be cancelled by the product owner (only the product owner) if the sprint goal becomes obsolete.
When a Sprint is cancelled, any completed &ldquo;Done&rdquo; items are reviewed and if it is potentially releasable, the PO typically accepts it. All incomplete work is re-estimated and put back in the Product Backlog.</p>
<h4 id="sprint-planning">Sprint Planning</h4>
<p>The entire Scrum Team collaborated to create a plan for the Sprint.</p>
<p>The Sprint Planning is Time-Boxed to 8 hours for a one month Sprint. The scrum master has to make sure the event takes place and that it remains within its allocated time box.</p>
<p>The input of the sprint planning are:</p>
<ul>
<li>The Product Backlog</li>
<li>The latest done increment</li>
<li>The projected capacity of the dev team</li>
<li>The past performance of the dev team</li>
</ul>
<p>During the Sprint Planning, only the dev team can assess what can be done. The items to be selected are solely up to the dev team.</p>
<p>The sprint goal provide guidance to the dev team as to why it is building the increment.</p>
<p>The dev team may invite other (external) people to the sprint planning to provide expert advice.</p>
<h4 id="daily-scrum">Daily Scrum</h4>
<p>The daily scrum is time boxed to 15 minutes. It is held at the same time and place everyday to reduce complexity.</p>
<p>The daily scrum should be organized in a way to better achieve the sprint goal. Scrum suggests the following format:</p>
<ul>
<li>What did I do yesterday that helped achieve the sprint goal?</li>
<li>What will I do today to help achieve the sprint goal?</li>
<li>Do I see any impediments that prevent me from achieving the sprint goal?</li>
</ul>
<p>The scrum master is only responsible for insuring the dev team holds the meeting and that the latter is kept within its time boxed.
The daily scrum is an internal meeting for the dev team. if others are present, the scrum master makes sure they do not disturb the meeting.</p>
<h4 id="sprint-review">Sprint Review</h4>
<p>The sprint review is held at the end of every sprint and is time boxed at 4 hours for a one month sprint. During this ceremony, the scrum team and the stakeholders collaborate on what was done during the sprint and on the next thing that could be done to optimize value.</p>
<p>The result of the sprint review is a revised product backlog that define the probable items for the sprint planning.</p>
<h4 id="sprint-retrospective">Sprint Retrospective</h4>
<p>The sprint retrospective is an opportunity for inspection and adaptation. It is time-boxed at 3 hours for a one month sprint.</p>
<p>The scrum master insures that this meeting is positive and productive and participates as a peer team member.</p>
<p>The purpose is to:</p>
<ul>
<li>Inspect how the last sprint went</li>
<li>Identify and order the major items that went well and identify potential improvements</li>
<li>Create a plan for implementing improvements</li>
</ul>
<h3 id="scrum-artifacts">Scrum Artifacts</h3>
<p>Artifacts by scrum are designed to maximize transparency.</p>
<h4 id="product-backlog">Product Backlog</h4>
<p>The Product backlog is an ordered list of everything that is known to be needed in the product.
The PO is responsible for the product backlog including its ordering and content. It is never complete, it evolves as the product evolves. as long as a product exists, the PB also exits.</p>
<p>If multiple scrum teams are working on the same product, they all share the same product backlog but different Sprint Backlog. If that is the case, it becomes imperative that everyone has a clear understanding of what is to be done in the increment.</p>
<p>No more than 10% of the Dev Team capacity should be spent on the product backlog refinement.</p>
<h4 id="sprint-backlog">Sprint Backlog</h4>
<p>The Sprint Backlog is the set of product backlog items selected for the sprint. It is owned by the Dev team and can contain items that are not related to the product backlog. It includes at least one high priority process improvement identified in the previous retrospective.</p>
<p>Monitoring Sprint progress in the sole responsibility of the Development Team.</p>
<h4 id="the-increment">The Increment</h4>
<p>The increment is the sum of all the product backlog item completed during a spring and the value of all previous increments.</p>
<h3 id="the-definition-of-done">The Definition of Done</h3>
<p>The definition of &ldquo;Done&rdquo; is a shared understanding of what it means for a work to be done. It helps provide transparency and guide the dev teams in picking the number of product backlog items to select for the upcoming sprint.</p>
<p>All scrum team working on the same product must follow the same definition of done (to a minimum)</p>
<h2 id="list-of-key-points-for-the-test">List of Key Points for the Test</h2>
<p>There are some key points you need to keep in mind that will allow you to pass the test.</p>
<ul>
<li>
<p>Scrum is based on <code>Empirical Process Control Theory</code></p>
</li>
<li>
<p>The scrum team: consists of the Dev team + the product owner (PO) + the Scrum Master</p>
</li>
<li>
<p>Scrum is a light framework for developing and maintaining complex products (not necessarily software)</p>
</li>
<li>
<p>You cannot pick an choose components from scrum as you please. every component is essential</p>
</li>
<li>
<p>The Dev team is a self organizing unit</p>
</li>
<li>
<p>Scrum recognizes no specialized roles in the dev team (tester, front, back&hellip;) and no hierarchy.</p>
</li>
<li>
<p>The Dev team as a whole should have all the skills necessary to accomplish the &ldquo;work&rdquo; (commonly known as User Stories/Features&hellip;)</p>
</li>
<li>
<p>The Dev team should do all the work on the task including the tests. (everything in the definition of done). which means that the scrum framework does not recognize teams such as &ldquo;Integration Testers&rdquo;, &ldquo;quality assurance&rdquo; ect&hellip;</p>
</li>
<li>
<p>Know the time limits of the different scrum ceremonies. A new sprint starts when the time limit of the previous sprint expires.</p>
</li>
<li>
<p>The scrum master is here to facilitate. His job is not to attend all the dailies and make sure its below 15 min (time-box) his job is to facilitate the work of the dev team and po. he should also insure that the dev team do hold the daily.</p>
</li>
<li>
<p>The Dev team delivers the product in small increments. at the end of the sprint, the increment should be potentially releasable to production. but it doest have to be released (only when it makes sense to do so)</p>
</li>
<li>
<p>When multiple dev teams are working on the same product, they should:</p>
<ul>
<li>Make sure they have a clear definition of the requirements.</li>
<li>It is highly advisable that their work be integrated at the end of each sprint so that the PO can inspect the work done by the dev team</li>
</ul>
</li>
<li>
<p>The dev team determines how the work will be done as well as the amount of work to take on (with the coordination of the PO)</p>
</li>
<li>
<p>Adding a new member to the dev team will decrease the velocity for a short amount of time before the latter starts picking up again.</p>
</li>
<li>
<p>Product backlog is ordered by priority</p>
</li>
<li>
<p>The Product Owner is the expert in the business part of the product</p>
</li>
<li>
<p>The PO has a final say in matters of product backlog. Dev teams have a final say in matters of Sprint Backlog</p>
</li>
<li>
<p>A dev team member cannot <code>own</code> a sprint backlog item. The entire dev team is responsible for all the items on the sprint backlog.</p>
</li>
</ul>
<h2 id="update-additional-resources">Update: Additional Resources</h2>
<p>Of the 2 or 3 people that actually read this blog (from time to time), someone asked me to add some additional resources. More specifically mock tests that can be used to further complete one&rsquo;s understanding of the subject and make sure that one is ready to pass the exam. So here&rsquo;s a short list of useful resources:</p>
<ul>
<li>
<p><a href="https://mlapshin.com/index.php/scrum-quizzes">https://mlapshin.com/index.php/scrum-quizzes</a> (both learning mode and real mode)</p>
</li>
<li>
<p><a href="https://www.examtopics.com/exams/scrum/psm-i/">https://www.examtopics.com/exams/scrum/psm-i/</a></p>
</li>
<li>
<p><a href="https://quizlet.com/261765971/scrum-master-flash-cards/">https://quizlet.com/261765971/scrum-master-flash-cards/</a> Fun flashcards for your daily commute üôÉ</p>
</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Refined Types In Scala</title>
            <link>https://fares.codes/posts/refined-types-in-scala/</link>
            <pubDate>Mon, 14 Oct 2019 13:00:00 +0000</pubDate>
            
            <guid>https://fares.codes/posts/refined-types-in-scala/</guid>
            <description>The following is my interpretation of the Refined Types presentation
In previous articles, I wrote about some issues surrounding the use of String parameters (passing an accountId instead of a userId and so on&amp;hellip;)
Lets quickly recap:
final case class UserBankAccount(userId: String, accountId: String, amount: Double) UserBankAccount(&amp;#34;user_10023&amp;#34;, &amp;#34;account_28179&amp;#34;, 2000) // Ok UserBankAccount(&amp;#34;account_28179&amp;#34;, &amp;#34;user_10023&amp;#34;, 2000) // Possible bug It would be cool if we had a type safe solution that would prevent the code from compiling&amp;hellip;</description>
            <content type="html"><![CDATA[<p>The following is my interpretation of the <a href="http://fthomas.github.io/talks/2016-05-04-refined/">Refined Types presentation</a></p>
<p>In previous articles, I wrote about some issues surrounding the use of <code>String</code> parameters (passing an accountId instead of a userId and so on&hellip;)</p>
<p>Lets quickly recap:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#66d9ef">final</span> <span style="color:#66d9ef">case</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">UserBankAccount</span><span style="color:#f92672">(</span>userId<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">String</span><span style="color:#f92672">,</span> accountId<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">String</span><span style="color:#f92672">,</span> amount<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Double</span><span style="color:#f92672">)</span>

<span style="color:#a6e22e">UserBankAccount</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;user_10023&#34;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;account_28179&#34;</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">2000</span><span style="color:#f92672">)</span> <span style="color:#75715e">// Ok
</span><span style="color:#75715e"></span><span style="color:#a6e22e">UserBankAccount</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;account_28179&#34;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;user_10023&#34;</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">2000</span><span style="color:#f92672">)</span> <span style="color:#75715e">// Possible bug
</span></code></pre></div><p>It would be cool if we had a type safe solution that would prevent the code from compiling&hellip;</p>
<p>This is where value classes come in (discussed in an earlier post):</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#66d9ef">final</span> <span style="color:#66d9ef">case</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">UserBankAccount</span><span style="color:#f92672">(</span>userId<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">UserId</span><span style="color:#f92672">,</span> accountId<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">AccountId</span><span style="color:#f92672">,</span> amount<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Double</span><span style="color:#f92672">)</span>

<span style="color:#66d9ef">final</span> <span style="color:#66d9ef">case</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">UserId</span><span style="color:#f92672">(</span>id<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">String</span><span style="color:#f92672">)</span> <span style="color:#66d9ef">extends</span> <span style="color:#a6e22e">AnyVal</span>
<span style="color:#66d9ef">final</span> <span style="color:#66d9ef">case</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">AccountId</span><span style="color:#f92672">(</span>id<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">String</span><span style="color:#f92672">)</span> <span style="color:#66d9ef">extends</span> <span style="color:#a6e22e">AnyVal</span>
</code></pre></div><p>With this implementation, the following would no longer compile:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#a6e22e">UserBankAccount</span><span style="color:#f92672">(</span><span style="color:#a6e22e">AccountId</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;account_28179&#34;</span><span style="color:#f92672">),</span> <span style="color:#a6e22e">UserId</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;user_10023&#34;</span><span style="color:#f92672">),</span> <span style="color:#ae81ff">2000</span><span style="color:#f92672">)</span>
</code></pre></div><p>And its great&hellip; provides compile time safety and we already know that value classes do not instantiate.
But we still run the risk of messing things up, since value classes are wrappers around simple types.</p>
<p>So we could still end up writing something like this:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#a6e22e">UserBankAccount</span><span style="color:#f92672">(</span><span style="color:#a6e22e">UserId</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;account_28179&#34;</span><span style="color:#f92672">),</span> <span style="color:#a6e22e">AccountId</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;user_10023&#34;</span><span style="color:#f92672">),</span> <span style="color:#ae81ff">2000</span><span style="color:#f92672">)</span>
</code></pre></div><p>&hellip; We could add some extra validation:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">
  <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">case</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">UserId</span><span style="color:#f92672">(</span>id<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">String</span><span style="color:#f92672">)</span> <span style="color:#66d9ef">extends</span> <span style="color:#a6e22e">AnyVal</span>
  <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">case</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">AccountId</span><span style="color:#f92672">(</span>id<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">String</span><span style="color:#f92672">)</span> <span style="color:#66d9ef">extends</span> <span style="color:#a6e22e">AnyVal</span>

  <span style="color:#66d9ef">object</span> <span style="color:#a6e22e">UserId</span> <span style="color:#f92672">{</span>
    <span style="color:#66d9ef">def</span> fromString<span style="color:#f92672">(</span>s<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">String</span><span style="color:#f92672">)</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Option</span><span style="color:#f92672">[</span><span style="color:#66d9ef">UserId</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span> <span style="color:#f92672">{</span>
      <span style="color:#66d9ef">def</span> isUserId<span style="color:#f92672">(</span>s<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">String</span><span style="color:#f92672">)</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Boolean</span> <span style="color:#f92672">=</span> s<span style="color:#f92672">.</span>startsWith<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;user_&#34;</span><span style="color:#f92672">)</span>

      <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>isUserId<span style="color:#f92672">(</span>s<span style="color:#f92672">))</span> <span style="color:#a6e22e">Some</span><span style="color:#f92672">(</span><span style="color:#a6e22e">UserId</span><span style="color:#f92672">(</span>s<span style="color:#f92672">))</span> <span style="color:#66d9ef">else</span> <span style="color:#a6e22e">None</span>
    <span style="color:#f92672">}</span>
  <span style="color:#f92672">}</span>

  <span style="color:#66d9ef">object</span> <span style="color:#a6e22e">AccountId</span> <span style="color:#f92672">{</span>
    <span style="color:#66d9ef">def</span> fromString<span style="color:#f92672">(</span>s<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">String</span><span style="color:#f92672">)</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Option</span><span style="color:#f92672">[</span><span style="color:#66d9ef">AccountId</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span> <span style="color:#f92672">{</span>
      <span style="color:#66d9ef">def</span> isAccountId<span style="color:#f92672">(</span>s<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">String</span><span style="color:#f92672">)</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Boolean</span> <span style="color:#f92672">=</span> s<span style="color:#f92672">.</span>startsWith<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;account_&#34;</span><span style="color:#f92672">)</span>

      <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>isAccountId<span style="color:#f92672">(</span>s<span style="color:#f92672">))</span> <span style="color:#a6e22e">Some</span><span style="color:#f92672">(</span><span style="color:#a6e22e">AccountId</span><span style="color:#f92672">(</span>s<span style="color:#f92672">))</span> <span style="color:#66d9ef">else</span> <span style="color:#a6e22e">None</span>
    <span style="color:#f92672">}</span>
  <span style="color:#f92672">}</span>

</code></pre></div><p>This does indeed provide extra security and insures compile time type safety we would have to end up dealing with Options are return values and so on&hellip;</p>
<p>The above code could also benefit from using a for-comprehension but nevertheless, you get my point&hellip;</p>
<p>Clearly there must be a better way.</p>
<h2 id="refined-types">Refined Types</h2>
<p>Refined Types are simply:
a <code>base type</code> and a <code>predicate</code></p>
<p>It is a way to simply <code>Reduce</code> the <code>domain of our type</code></p>
<p>so the instances of a refined types are the instances of that base type that satisfy the predicate.</p>
<p>Example:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#66d9ef">type</span> <span style="color:#66d9ef">PositiveInt</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">Int</span> <span style="color:#a6e22e">Refined</span> <span style="color:#a6e22e">Positive</span>
</code></pre></div><p>Where PositiveInt is a subset of the type Int containing only positive numbers.</p>
<p>for this to work, we would have to add the following library to our <code>build.sbt</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">libraryDependencies <span style="color:#f92672">++=</span> <span style="color:#a6e22e">Seq</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;eu.timepit&#34;</span> <span style="color:#f92672">%%</span> <span style="color:#e6db74">&#34;refined&#34;</span> <span style="color:#f92672">%</span> <span style="color:#e6db74">&#34;0.9.10&#34;</span><span style="color:#f92672">)</span>
</code></pre></div><p>This would allow us to simply write:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#66d9ef">val</span> x<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">PositiveInt</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>
</code></pre></div><p>but what is we wrote:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#66d9ef">val</span> x<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">PositiveInt</span> <span style="color:#f92672">=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">2</span> <span style="color:#75715e">// would not compile
</span></code></pre></div><p>we would end up with the following error:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#a6e22e">Error</span><span style="color:#66d9ef">:</span><span style="color:#f92672">(</span><span style="color:#960050;background-color:#1e0010">46</span><span style="color:#f92672">,</span> <span style="color:#960050;background-color:#1e0010">25</span><span style="color:#f92672">)</span> <span style="color:#a6e22e">Predicate</span> failed<span style="color:#66d9ef">:</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">-</span><span style="color:#960050;background-color:#1e0010">2</span> <span style="color:#66d9ef">&gt;</span> <span style="color:#960050;background-color:#1e0010">0</span><span style="color:#f92672">)</span><span style="color:#66d9ef">.</span>
  <span style="color:#66d9ef">val</span> <span style="color:#66d9ef">y:</span> <span style="color:#66d9ef">PositiveInt</span> <span style="color:#f92672">=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">2</span>
</code></pre></div><p>Under the hood the actual code translates into:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#66d9ef">val</span> x<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">PositiveInt</span> <span style="color:#f92672">=</span> auto<span style="color:#f92672">.</span>autoRefineV<span style="color:#f92672">(</span><span style="color:#ae81ff">2</span><span style="color:#f92672">)(</span>refinedRefType<span style="color:#f92672">,</span> greaterValidate<span style="color:#f92672">(</span>natWitnessAs<span style="color:#f92672">(</span>witness0<span style="color:#f92672">,</span> toInt0<span style="color:#f92672">,</span> <span style="color:#a6e22e">IntIsIntegral</span><span style="color:#f92672">),</span> <span style="color:#a6e22e">IntIsIntegral</span><span style="color:#f92672">))</span>
</code></pre></div><p>But I think everyone prefers the implicit version :p</p>
<p>The library goes a lot further, you could write your own validation functions as well as use prebuilt ones.</p>
<p>Example of PreBuilt functions:</p>
<ul>
<li>
<p>Contains[U]: checks if a Traversable contains a value equal to U</p>
</li>
<li>
<p>Count[PA, PC]: counts the number of elements in a Traversable which satisfy the predicate PA and passes the result to the predicate PC</p>
</li>
<li>
<p>Empty: checks if a Traversable is empty</p>
</li>
<li>
<p>Forall[P]: checks if the predicate P holds for all elements of a Traversable</p>
</li>
<li>
<p>Exists[P]: checks if the predicate P holds for some elements of a Traversable</p>
</li>
<li>
<p>MinSize[N]: checks if the size of a Traversable is greater than or equal to N</p>
</li>
<li>
<p>MaxSize[N]: checks if the size of a Traversable is less than or equal to N</p>
</li>
<li>
<p>True: constant predicate that is always true</p>
</li>
<li>
<p>Not[P]: negation of the predicate P</p>
</li>
<li>
<p>And[A, B]: conjunction of the predicates A and B</p>
</li>
<li>
<p>Or[A, B]: disjunction of the predicates A and B</p>
</li>
<li>
<p>AllOf[PS]: conjunction of all predicates in PS</p>
</li>
<li>
<p>AnyOf[PS]: disjunction of all predicates in PS</p>
</li>
<li>
<p>OneOf[PS]: exclusive disjunction of all predicates in PS</p>
</li>
<li>
<p>Less[N]: checks if a numeric value is less than N</p>
</li>
<li>
<p>LessEqual[N]: checks if a numeric value is less than or equal to N</p>
</li>
<li>
<p>Greater[N]: checks if a numeric value is greater than N</p>
</li>
<li>
<p>GreaterEqual[N]: checks if a numeric value is greater than or equal to N</p>
</li>
<li>
<p>Positive: checks if a numeric value is greater than zero</p>
</li>
<li>
<p>Interval.Open[L, H]: checks if a numeric value is in the interval (L, H)</p>
</li>
<li>
<p>Interval.Closed[L, H]: checks if a numeric value is in the interval [L, H]</p>
</li>
<li>
<p>EndsWith[S]: checks if a String ends with the suffix S</p>
</li>
<li>
<p>MatchesRegex[S]: checks if a String matches the regular expression S</p>
</li>
<li>
<p>Regex: checks if a String is a valid regular expression</p>
</li>
<li>
<p>StartsWith[S]: checks if a String starts with the prefix S</p>
</li>
<li>
<p>Uri: checks if a String is a valid URI</p>
</li>
<li>
<p>Url: checks if a String is a valid URL</p>
</li>
</ul>
<p>So going back to our example, we would simply need to write:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">  <span style="color:#66d9ef">type</span> <span style="color:#66d9ef">UserId</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">String</span> <span style="color:#a6e22e">Refined</span> <span style="color:#a6e22e">StartsWith</span><span style="color:#f92672">[</span><span style="color:#66d9ef">W.`&#34;user_&#34;`.T</span><span style="color:#f92672">]</span>
  <span style="color:#66d9ef">type</span> <span style="color:#66d9ef">AccountId</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">String</span> <span style="color:#a6e22e">Refined</span> <span style="color:#a6e22e">StartsWith</span><span style="color:#f92672">[</span><span style="color:#66d9ef">W.`&#34;account_&#34;`.T</span><span style="color:#f92672">]</span>
  <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">case</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">UserBankAccount</span><span style="color:#f92672">(</span>userId<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">UserId</span><span style="color:#f92672">,</span>
                                   accountId<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">AccountId</span><span style="color:#f92672">,</span>
                                   amount<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Double</span><span style="color:#f92672">)</span>
</code></pre></div><p>and the code will cause a compile time error if a <code>user</code> or if an <code>account</code> do not meet the conditions set by the predicate.</p>
<p>source:</p>
<ol>
<li><a href="http://fthomas.github.io/talks/2016-05-04-refined/#1">Refined Types presentation</a></li>
<li><a href="https://medium.com/@Methrat0n/wtf-is-refined-5008eb233194">WTF is Refined</a></li>
</ol>
]]></content>
        </item>
        
        <item>
            <title>Value Classes in Scala</title>
            <link>https://fares.codes/posts/value-classes-in-scala/</link>
            <pubDate>Fri, 04 Oct 2019 20:55:00 +0000</pubDate>
            
            <guid>https://fares.codes/posts/value-classes-in-scala/</guid>
            <description>Before we look into value classes, lets start by why we might need them in the first place.
case class Client(id: Int, name: String) case class BankAccount(id: Int, clientId: Int, amount: Double) val account1 = BankAccount(1,1,100) val account2 = BankAccount(2,1,200) val account3 = BankAccount(1,2,1000) val client1 = Client(1,&amp;#34;Danny&amp;#34;) val client2 = Client(2, &amp;#34;Emily&amp;#34;) In this example, we have three bank accounts, two belonging to Danny and one to Emily.
Now we add a function that checks if two bank accounts belong to the same client:</description>
            <content type="html"><![CDATA[<p>Before we look into value classes, lets start by why we might need them in the first place.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#66d9ef">case</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Client</span><span style="color:#f92672">(</span>id<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Int</span><span style="color:#f92672">,</span> name<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">String</span><span style="color:#f92672">)</span>
<span style="color:#66d9ef">case</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">BankAccount</span><span style="color:#f92672">(</span>id<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Int</span><span style="color:#f92672">,</span> clientId<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Int</span><span style="color:#f92672">,</span> amount<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Double</span><span style="color:#f92672">)</span>

<span style="color:#66d9ef">val</span> account1 <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">BankAccount</span><span style="color:#f92672">(</span><span style="color:#ae81ff">1</span><span style="color:#f92672">,</span><span style="color:#ae81ff">1</span><span style="color:#f92672">,</span><span style="color:#ae81ff">100</span><span style="color:#f92672">)</span>
<span style="color:#66d9ef">val</span> account2 <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">BankAccount</span><span style="color:#f92672">(</span><span style="color:#ae81ff">2</span><span style="color:#f92672">,</span><span style="color:#ae81ff">1</span><span style="color:#f92672">,</span><span style="color:#ae81ff">200</span><span style="color:#f92672">)</span>
<span style="color:#66d9ef">val</span> account3 <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">BankAccount</span><span style="color:#f92672">(</span><span style="color:#ae81ff">1</span><span style="color:#f92672">,</span><span style="color:#ae81ff">2</span><span style="color:#f92672">,</span><span style="color:#ae81ff">1000</span><span style="color:#f92672">)</span>

<span style="color:#66d9ef">val</span> client1 <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">Client</span><span style="color:#f92672">(</span><span style="color:#ae81ff">1</span><span style="color:#f92672">,</span><span style="color:#e6db74">&#34;Danny&#34;</span><span style="color:#f92672">)</span>
<span style="color:#66d9ef">val</span> client2 <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">Client</span><span style="color:#f92672">(</span><span style="color:#ae81ff">2</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;Emily&#34;</span><span style="color:#f92672">)</span>
</code></pre></div><p>In this example, we have three bank accounts, two belonging to Danny and one to Emily.</p>
<p>Now we add a function that checks if two bank accounts belong to the same client:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#66d9ef">def</span> isSameOwner<span style="color:#f92672">(</span>bankAccountId1<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Int</span><span style="color:#f92672">,</span> bankAccountId2<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Int</span><span style="color:#f92672">)</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Boolean</span> <span style="color:#f92672">=</span> <span style="color:#f92672">???</span>
</code></pre></div><p>Now if we were to call the function with these parameters, the code will compile normally:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">isSameOwner<span style="color:#f92672">(</span>account1<span style="color:#f92672">.</span>id<span style="color:#f92672">,</span> client1<span style="color:#f92672">.</span>id<span style="color:#f92672">)</span>
<span style="color:#75715e">//or even
</span><span style="color:#75715e"></span>isSameOwner<span style="color:#f92672">(</span>account1<span style="color:#f92672">.</span>id<span style="color:#f92672">,</span> account2<span style="color:#f92672">.</span>clientId<span style="color:#f92672">)</span>
</code></pre></div><p>The reason this compiles is obvious, the function <code>isSameOwner</code> takes Int for parameters.</p>
<p>One possible solution would be to use tiny types in scala:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#66d9ef">case</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">ClientId</span><span style="color:#f92672">(</span>id<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Int</span><span style="color:#f92672">)</span>
<span style="color:#66d9ef">case</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">AccountId</span><span style="color:#f92672">(</span>id<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Int</span><span style="color:#f92672">)</span>

<span style="color:#66d9ef">case</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Client</span><span style="color:#f92672">(</span>clientId<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">ClientId</span><span style="color:#f92672">,</span> name<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">String</span><span style="color:#f92672">)</span>
<span style="color:#66d9ef">case</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">BankAccount</span><span style="color:#f92672">(</span>accountId<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">AccountId</span><span style="color:#f92672">,</span> clientId<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">ClientId</span><span style="color:#f92672">,</span> amount<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Double</span><span style="color:#f92672">)</span>

<span style="color:#66d9ef">def</span> isSameOwner<span style="color:#f92672">(</span>account1<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">AccountId</span><span style="color:#f92672">,</span> account2<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">AccountId</span><span style="color:#f92672">)</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Boolean</span> <span style="color:#f92672">=</span> <span style="color:#f92672">???</span>
</code></pre></div><p>The issue with this solutions becomes memory allocation at runtime.</p>
<p>Which is where value classes come in. The main benefit is avoiding allocating runtime objects. At compile time, we would have the case case and at runtime we would have the underlying data type.</p>
<p>So what are value classes officially?</p>
<p>Value classes are a new mechanism in Scala to avoid allocating runtime objects. This is accomplished through the definition of new AnyVal subclasses. (<a href="https://docs.scala-lang.org/overviews/core/value-classes.html)">https://docs.scala-lang.org/overviews/core/value-classes.html)</a></p>
<p>This means that value classes:</p>
<ol>
<li>
<p>Can only extend universal traits (ones that extend Any) and cannot be extended itself.</p>
</li>
<li>
<p>Can define a def but no val or var or classes&hellip;</p>
</li>
</ol>
<p>lets look at a very simple example:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">
<span style="color:#66d9ef">class</span> <span style="color:#a6e22e">User</span><span style="color:#f92672">(</span><span style="color:#66d9ef">val</span> userId<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Int</span><span style="color:#f92672">)</span> <span style="color:#66d9ef">extends</span> <span style="color:#a6e22e">AnyVal</span>

</code></pre></div><p>As we can see in this example, value classes contain one simple underlying data type and extend AnyVal.</p>
<p>Now lets look at the byte code generated by our example:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">int</span> <span style="color:#a6e22e">fares</span><span style="color:#f92672">();</span>
</code></pre></div><p>This practically means that at compile time we can use the class User, but are runtime, the value class is replaced by its underlying value of type int.</p>
<p>So How is this useful?</p>
<p>instead of writing the following lines:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#66d9ef">def</span> getAccountInfo<span style="color:#f92672">(</span>clientId<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Int</span><span style="color:#f92672">,</span> accountId<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Int</span><span style="color:#f92672">)</span> <span style="color:#66d9ef">=</span> <span style="color:#f92672">???</span>
</code></pre></div><p>and then running the risk of calling the function with accountId as the first param instead of the second (code would still compile)</p>
<p>We could use the refined types and transform it into something that is type-safe:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">  <span style="color:#66d9ef">case</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">ClientId</span><span style="color:#f92672">(</span><span style="color:#66d9ef">val</span> clientId<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Int</span><span style="color:#f92672">)</span> <span style="color:#66d9ef">extends</span> <span style="color:#a6e22e">AnyVal</span>
  <span style="color:#66d9ef">case</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">AccountId</span><span style="color:#f92672">(</span><span style="color:#66d9ef">val</span> accountId<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Int</span><span style="color:#f92672">)</span> <span style="color:#66d9ef">extends</span> <span style="color:#a6e22e">AnyVal</span>

  <span style="color:#66d9ef">def</span> getAccountInfo<span style="color:#f92672">(</span>clientId<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">ClientId</span><span style="color:#f92672">,</span> accountId<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">AccountId</span><span style="color:#f92672">)</span> <span style="color:#66d9ef">=</span> <span style="color:#f92672">???</span>

</code></pre></div><p>The second implementation would cause a compile time error if we try to call the function with the params inverted all while still giving us the same runtime performance.</p>
<h2 id="clearly-value-classes-are-great-but-whats-the-catch">Clearly Value Classes are great&hellip; but whats the catch</h2>
<p>from the scala documentation: Because the JVM does not support value classes, Scala sometimes needs to actually instantiate a value class.</p>
<p>There are 3 cases during which a value class is actually instantiated:</p>
<ul>
<li>a value class is treated as another type.</li>
<li>a value class is assigned to an array.</li>
<li>doing runtime type tests, such as pattern matching.</li>
</ul>
<p>The third case is rather simple, so lets look into the first two:</p>
<h3 id="when-a-value-class-is-treated-as-another-type">when a value class is treated as another type</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">
  <span style="color:#66d9ef">trait</span> <span style="color:#a6e22e">Person</span> <span style="color:#66d9ef">extends</span> <span style="color:#a6e22e">Any</span>

  <span style="color:#66d9ef">case</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Student</span><span style="color:#f92672">(</span><span style="color:#66d9ef">val</span> name<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">String</span><span style="color:#f92672">)</span> <span style="color:#66d9ef">extends</span> <span style="color:#a6e22e">AnyVal</span> <span style="color:#66d9ef">with</span> <span style="color:#a6e22e">Person</span>

  <span style="color:#66d9ef">def</span> getName<span style="color:#f92672">(</span>person<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Person</span><span style="color:#f92672">)</span> <span style="color:#66d9ef">=</span> <span style="color:#f92672">???</span>
  
  <span style="color:#66d9ef">val</span> student1<span style="color:#66d9ef">=</span> <span style="color:#a6e22e">Student</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Emily&#34;</span><span style="color:#f92672">)</span>
  
  getName<span style="color:#f92672">(</span>student1<span style="color:#f92672">)</span>

</code></pre></div><p>Because we are calling a function that takes a Person and we are then passing it a Student that extends Person, the value class will be instantiated.</p>
<h3 id="when-a-value-class-is-assigned-to-an-array">when a value class is assigned to an array</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">
<span style="color:#66d9ef">val</span> classroom <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">Array</span><span style="color:#f92672">[</span><span style="color:#66d9ef">Student</span><span style="color:#f92672">](</span>student1<span style="color:#f92672">)</span>

</code></pre></div><p>In that case, the array <code>classroom</code>, will actually contain the instances of <code>Student</code> and not just the underlying datatype <code>String</code></p>
<hr>
<p>Overall, value classes can prove to be very useful and their use could bring significant improvement to your code.</p>
]]></content>
        </item>
        
        <item>
            <title>Interactive Rebase for a Cleaner Git Commit History</title>
            <link>https://fares.codes/posts/interactive-rebase-for-a-cleaner-git-commit-history/</link>
            <pubDate>Tue, 03 Sep 2019 20:55:00 +0000</pubDate>
            
            <guid>https://fares.codes/posts/interactive-rebase-for-a-cleaner-git-commit-history/</guid>
            <description>Any article you read online about maintaining a clean project will mention a version control system (usually git) and will then talk about maintaining a clean commit history through atomic commits, meaningful commit messages and so on.
This article wont go into all the techniques above, instead Im going to focus on a single technique that I have recently learned: Interactive Rebase.
No matter how hard we try to keep our commit messages clean and clear, we often end up with something looking like this:</description>
            <content type="html"><![CDATA[<p>Any article you read online about maintaining a clean project will mention a version control system (usually git) and will then talk about maintaining a clean commit history through atomic commits, meaningful commit messages and so on.</p>
<p>This article wont go into all the techniques above, instead Im going to focus on a single technique that I have recently learned: <code>Interactive Rebase</code>.</p>
<p>No matter how hard we try to keep our commit messages clean and clear, we often end up with something looking like this:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">commit 89b4001bd1176243c6c338e18cf0039f2e1556a9 (HEAD -&gt; master)
Author: Fares Ismail
Date:   Mon Sep 2 22:32:18 2019 +0200

    How About Now?

commit ba2998d748c30d2c334f688eb9900c6e3508548a
Author: Fares Ismail
Date:   Mon Sep 2 22:31:48 2019 +0200

    Hope My tests Pass now...

commit 8416c111d95c8cbcfa1f34deef515ca67676aecf
Author: Fares Ismail
Date:   Mon Sep 2 22:31:25 2019 +0200

    Added Unit Tests

commit efe7e3fad95af4c9b9edf780d5f7a5666662f099
Author: Fares Ismail
Date:   Mon Sep 2 22:30:53 2019 +0200

    Fixed Main Function

commit 5946d2e49a073e2d20c7f0bb97fa4ae2c8393dbc
Author: Fares Ismail
Date:   Mon Sep 2 22:30:05 2019 +0200

    Fixed typo in Main Function

commit 537dd485e5afbd8754a2ba5b68bf39a9580a6342
Author: Fares Ismail
Date:   Mon Sep 2 22:29:23 2019 +0200

    Added Man function

commit 5aedeb40a8c8f09b6ec876f1ef625108a2a9ad27
Author: Fares Ismail
Date:   Mon Sep 2 22:21:41 2019 +0200

    Initial Commit

</code></pre></div><p>Clearly this is not ideal&hellip; it starts off good and then its a slippery slope back to chaos.</p>
<p>So whats wrong with my Commit History?
Well the 2nd, 3rd and 4th commits are practically the same thing and could have been done in a single commit.</p>
<p>The same can be said about commits number 5, 6 and 7. Although commit 7 is just sad&hellip;</p>
<p>So here comes the interactive rebase to the rescue. More specifically, the Fixup.</p>
<p><code>Ô¨Å rebase -i HEAD~6</code> to interactively rebase the last 6 commits.</p>
<p>This will generally open up your git editor, by default its vim.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">pick 537dd48 Added Man function
pick 5946d2e Fixed typo in Main Function
pick efe7e3f Fixed Main Function
pick 8416c11 Added Unit Tests
pick ba2998d Hope My tests Pass now...
pick 89b4001 How About Now?

# Rebase 5aedeb4..89b4001 onto 5aedeb4 (6 commands)
#
# Commands:
# p, pick &lt;commit&gt; = use commit
# r, reword &lt;commit&gt; = use commit, but edit the commit message
# e, edit &lt;commit&gt; = use commit, but stop for amending
# s, squash &lt;commit&gt; = use commit, but meld into previous commit
# f, fixup &lt;commit&gt; = like &#34;squash&#34;, but discard this commit&#39;s log message
# x, exec &lt;command&gt; = run command (the rest of the line) using shell
# b, break = stop here (continue rebase later with &#39;git rebase --continue&#39;)
# d, drop &lt;commit&gt; = remove commit
# l, label &lt;label&gt; = label current HEAD with a name
# t, reset &lt;label&gt; = reset HEAD to a label
# m, merge [-C &lt;commit&gt; | -c &lt;commit&gt;] &lt;label&gt; [# &lt;oneline&gt;]
# .       create a merge commit using the original merge commit&#39;s
# .       message (or the oneline, if no original merge commit was
# .       specified). Use -c &lt;commit&gt; to reword the commit message.
#
# These lines can be re-ordered; they are executed from top to bottom.
#
# If you remove a line here THAT COMMIT WILL BE LOST.
</code></pre></div><p>At the top we see our last six commits. later we see the possible transformations we can apply on them.</p>
<p>Most of the options are pretty self explanatory, but Ill be focusing on 3 in particular:</p>
<ul>
<li>
<p>Reword</p>
</li>
<li>
<p>Fixup</p>
</li>
<li>
<p>Squash</p>
</li>
</ul>
<p>To start with the simplest case:</p>
<h3 id="reword">Reword</h3>
<p>Reword is my chance to tell the world that I actually do know how to write <code>Main</code> (If you haven&rsquo;t caught it by now, check my first commit&hellip; it says Man :/)</p>
<p>Simply erase the pick prior to the first commit and replace it with <code>r</code> or <code>reword</code>.
press :x and a new page will show up:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">
Added Man function

# Please enter the commit message for your changes. Lines starting
# with &#39;#&#39; will be ignored, and an empty message aborts the commit.
#

</code></pre></div><h3 id="fixup">Fixup</h3>
<p>Alright, so on to more interesting stuff, as mentioned before some of my commits can be combined into one all while dropping the useless commit messages. This is exactly what fixup does. it re-writes the commits to the closest previous commit.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">pick 33ff399 Added Main function
pick da9cc20 Fixed typo in Main Function
pick 5db3c38 Fixed Main Function
pick 1092c6e Added Unit Tests
f 0206a22 Hope My tests Pass now...
f 6728363 How About Now???
</code></pre></div><p>The following will re-write the last two commits onto the last previous one (<code>Added Unit Tests</code>)
The result ends up looking like this:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">commit 6fc9e00fe20ff2c487cb14cfb20ad758cec7e771 (HEAD -&gt; master)
Author: Fares Ismail
Date:   Mon Sep 2 22:31:25 2019 +0200

    Added Unit Tests

commit 5db3c38ff0a4566776b42c01a6775f83f3123191
Author: Fares Ismail
Date:   Mon Sep 2 22:30:53 2019 +0200

    Fixed Main Function

commit da9cc2021c2e7bf75673a2ed99b8d8a1cc0cdb1a
Author: Fares Ismail
Date:   Mon Sep 2 22:30:05 2019 +0200

    Fixed typo in Main Function

commit 33ff39916c98340fd4dab11f5dbf1a07fd6e35fd
Author: Fares Ismail
Date:   Mon Sep 2 22:29:23 2019 +0200

    Added Main function

commit 5aedeb40a8c8f09b6ec876f1ef625108a2a9ad27
Author: Fares Ismail
Date:   Mon Sep 2 22:21:41 2019 +0200

    Initial Commit
</code></pre></div><p>a bit cleaner no?</p>
<p>Those with a keen eye will notice that the commit hash for <code>Added Unit Tests</code> changed, this is because the commit was modified to include the two other commits.
Note that when pushing this to the remote branch, you might need to use <code>--force-with-lease</code> or <code>--force</code> since the local commit history no longer matches the remote version</p>
<h3 id="squash">Squash</h3>
<p>Squash is a bit similar to fixup only that it doesn&rsquo;t discard the commit messages, instead it melds them together.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">pick 33ff399 Added Main function
s da9cc20 Fixed typo in Main Function
s 5db3c38 Fixed Main Function
pick 6fc9e00 Added Unit Tests
</code></pre></div><p>executing this will pop the following:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text"># This is a combination of 3 commits.
# This is the 1st commit message:

Added Main function

# This is the commit message #2:

Fixed typo in Main Function

# This is the commit message #3:

Fixed Main Function

</code></pre></div><p>This allows us to make a modification to each commit message.</p>
<p>applying the above will yield the following commit history:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">commit b9d8ce4bd94bdec74b81782e5d684a5207287a03 (HEAD -&gt; master)
Author: Fares Ismail
Date:   Mon Sep 2 22:31:25 2019 +0200

    Added Unit Tests

commit 7641555428b5abe903667f799a0deeefb21b2027
Author: Fares Ismail
Date:   Mon Sep 2 22:29:23 2019 +0200

    Added Main functions

    Fixed typo in Main Functions

    Fixed Main Functions

commit 5aedeb40a8c8f09b6ec876f1ef625108a2a9ad27
Author: Fares Ismail
Date:   Mon Sep 2 22:21:41 2019 +0200

    Initial Commit
</code></pre></div><p>Much cleaner than what we originally started with no?</p>
]]></content>
        </item>
        
        <item>
            <title>Fold vs Pattern Matching and Matching on Options</title>
            <link>https://fares.codes/posts/fold-vs-pattern-matching-and-matching-on-options/</link>
            <pubDate>Sun, 01 Sep 2019 10:00:00 +0000</pubDate>
            
            <guid>https://fares.codes/posts/fold-vs-pattern-matching-and-matching-on-options/</guid>
            <description>The following article is a summary of the Lambda Conf 2015 talk: Idiomatic Scala Your Options Do Not Match by Marconi Lanna https://www.youtube.com/watch?v=ol2AB5UN1IA&amp;amp;t=1s
 Often when dealing with Options, we have a case where we want to check if a value is defined and if it is, apply a specific treatment on the value inside the option. So we end up with a code that looks something like this:
value match { case Some(a) =&amp;gt; foo(a) case None =&amp;gt; bar } In this example, we patten match on the Option value.</description>
            <content type="html"><![CDATA[<p>The following article is a summary of the Lambda Conf 2015 talk: Idiomatic Scala Your Options Do Not Match by Marconi Lanna <a href="https://www.youtube.com/watch?v=ol2AB5UN1IA&amp;t=1s">https://www.youtube.com/watch?v=ol2AB5UN1IA&amp;t=1s</a></p>
<hr>
<p>Often when dealing with Options, we have a case where we want to check if a value is defined and if it is, apply a specific treatment on the value inside the option. So we end up with a code that looks something like this:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">value <span style="color:#66d9ef">match</span> <span style="color:#f92672">{</span>
    <span style="color:#66d9ef">case</span> <span style="color:#a6e22e">Some</span><span style="color:#f92672">(</span>a<span style="color:#f92672">)</span> <span style="color:#66d9ef">=&gt;</span> foo<span style="color:#f92672">(</span>a<span style="color:#f92672">)</span>
    <span style="color:#66d9ef">case</span> <span style="color:#a6e22e">None</span> <span style="color:#66d9ef">=&gt;</span> bar
<span style="color:#f92672">}</span>
</code></pre></div><p>In this example, we patten match on the Option value. if it is defined, we call the function foo on the value inside the Some, otherwise we call bar.</p>
<p>and this is technically correct, however: the scala doc states that:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">The most idiomatic way to use an Option instance is to treat it as a collection or monad and use map,flatMap, filter, or foreach
</code></pre></div><p>and that:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">A less-idiomatic way to use Option values is via pattern matching:
</code></pre></div><p>with this in mind; the above can be re-written as:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#66d9ef">val</span> res <span style="color:#66d9ef">=</span> value<span style="color:#f92672">.</span>map<span style="color:#f92672">(</span>foo<span style="color:#f92672">).</span>getOrElse<span style="color:#f92672">(</span>bar<span style="color:#f92672">)</span>
</code></pre></div><p>another, more readable way would be using the <code>fold</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">value<span style="color:#f92672">.</span>fold<span style="color:#f92672">(</span>bar<span style="color:#f92672">)(</span>foo<span style="color:#f92672">)</span>
</code></pre></div><p><code>fold</code> has the following definition and impl:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">  <span style="color:#75715e">/** Returns the result of applying $f to this $option&#39;s
</span><span style="color:#75715e">   *  value if the $option is nonempty.  Otherwise, evaluates
</span><span style="color:#75715e">   *  expression `ifEmpty`.
</span><span style="color:#75715e">   *
</span><span style="color:#75715e">   *  @note This is equivalent to `$option map f getOrElse ifEmpty`.
</span><span style="color:#75715e">   *
</span><span style="color:#75715e">   *  @param  ifEmpty the expression to evaluate if empty.
</span><span style="color:#75715e">   *  @param  f       the function to apply if nonempty.
</span><span style="color:#75715e">   */</span>
  <span style="color:#a6e22e">@inline</span> <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">def</span> fold<span style="color:#f92672">[</span><span style="color:#66d9ef">B</span><span style="color:#f92672">](</span>ifEmpty<span style="color:#66d9ef">:</span> <span style="color:#f92672">=&gt;</span> B<span style="color:#f92672">)(</span>f<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">A</span> <span style="color:#f92672">=&gt;</span> B<span style="color:#f92672">)</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">B</span> <span style="color:#f92672">=</span>
    <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>isEmpty<span style="color:#f92672">)</span> ifEmpty <span style="color:#66d9ef">else</span> f<span style="color:#f92672">(</span><span style="color:#66d9ef">this</span><span style="color:#f92672">.</span>get<span style="color:#f92672">)</span>
</code></pre></div><p>In other words, the value on the left (<code>bar</code> in our case) will be applied if <code>value</code> is <code>None</code>, otherwise if it is <code>Some</code>, the function of the right (<code>foo</code> in our case) will be invoked on the value inside the Option.</p>
<h2 id="is-there-an-even-better-way-to-do-things">Is there an even better way to do things</h2>
<p>I wont go into the details, but <code>Marconi Lanna</code> does in his video or his article <a href="https://www.originate.com/thinking/stories/idiomatic-scala-your-options-do-not-match/">https://www.originate.com/thinking/stories/idiomatic-scala-your-options-do-not-match/</a>, but here are a few examples of code that can be better written. The below examples are taken/inspired by the video of <code>Marconi Lanna</code>.</p>
<p>This is a silly example and uncommon, but:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#66d9ef">if</span><span style="color:#f92672">(</span>something<span style="color:#f92672">==</span><span style="color:#66d9ef">true</span><span style="color:#f92672">){</span>
 <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">true</span>
<span style="color:#f92672">}</span>
<span style="color:#66d9ef">else</span> <span style="color:#f92672">{</span>
 <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">false</span>
<span style="color:#f92672">}</span>
</code></pre></div><p>which can easily be re-written as:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#66d9ef">return</span> something
</code></pre></div><h3 id="pattern-matching-on-boolean">Pattern Matching on boolean</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">condition <span style="color:#66d9ef">match</span> <span style="color:#f92672">{</span>
    <span style="color:#66d9ef">case</span> <span style="color:#66d9ef">true</span> <span style="color:#66d9ef">=&gt;</span> <span style="color:#e6db74">&#34;Okay&#34;</span>
    <span style="color:#66d9ef">case</span> <span style="color:#66d9ef">false</span> <span style="color:#66d9ef">=&gt;</span> <span style="color:#e6db74">&#34;Not Okay&#34;</span>
<span style="color:#f92672">}</span>
</code></pre></div><p>can be re-written as:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#66d9ef">if</span><span style="color:#f92672">(</span>condition<span style="color:#f92672">)</span> <span style="color:#e6db74">&#34;Okay&#34;</span> <span style="color:#66d9ef">else</span> <span style="color:#e6db74">&#34;Not Okay&#34;</span>
</code></pre></div><h3 id="checking-if-an-option-is-defined">Checking if an Option is Defined</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">value <span style="color:#66d9ef">match</span> <span style="color:#f92672">{</span>
    <span style="color:#66d9ef">case</span> <span style="color:#a6e22e">Some</span><span style="color:#f92672">(</span><span style="color:#66d9ef">_</span><span style="color:#f92672">)</span>    <span style="color:#66d9ef">=&gt;</span> <span style="color:#66d9ef">true</span>
    <span style="color:#66d9ef">case</span> <span style="color:#a6e22e">None</span>       <span style="color:#66d9ef">=&gt;</span> <span style="color:#66d9ef">false</span>
<span style="color:#f92672">}</span>
</code></pre></div><p>can simply be re-written as:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">value<span style="color:#f92672">.</span>isDefined
<span style="color:#75715e">//or its alias .nonEmpty (as of scala 2.10)
</span></code></pre></div><p>To check the inverse, you can use: <code>.isEmpty</code></p>
<h3 id="filtering-values">Filtering Values</h3>
<p>What is we wanted to filter on an option?</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#75715e">// given predicate p
</span><span style="color:#75715e"></span>value <span style="color:#66d9ef">match</span> <span style="color:#f92672">{</span>
    <span style="color:#66d9ef">case</span> <span style="color:#a6e22e">Some</span><span style="color:#f92672">(</span>a<span style="color:#f92672">)</span><span style="color:#66d9ef">=&gt;</span> <span style="color:#66d9ef">if</span><span style="color:#f92672">(</span>p<span style="color:#f92672">(</span>a<span style="color:#f92672">))</span> <span style="color:#a6e22e">Some</span><span style="color:#f92672">(</span>a<span style="color:#f92672">)</span> <span style="color:#66d9ef">else</span> <span style="color:#a6e22e">None</span>
    <span style="color:#66d9ef">case</span> <span style="color:#a6e22e">None</span>   <span style="color:#66d9ef">=&gt;</span> <span style="color:#a6e22e">None</span>
<span style="color:#f92672">}</span>
</code></pre></div><p>can be simplified by calling:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">value<span style="color:#f92672">.</span>filter<span style="color:#f92672">(</span>p<span style="color:#f92672">)</span>
<span style="color:#75715e">// Note, Find also works in the same manner.
</span></code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Passing the DataBricks Apache Spark Certification</title>
            <link>https://fares.codes/posts/passing-the-databricks-apache-spark-certification/</link>
            <pubDate>Wed, 21 Aug 2019 20:00:00 +0000</pubDate>
            
            <guid>https://fares.codes/posts/passing-the-databricks-apache-spark-certification/</guid>
            <description>The following is a compilation of all the resources I&amp;rsquo;ve used to pass the Databricks 2.X Spark Certification, as well as some questions that came up.
Background on the Exam The exam databricks spark 2.x spark with scala certification is made up of 40 MCQ questions, 3 hours to answer them in total. The registration grants you 2 trials, meaning if you fail the first attempt, you have to wait 15 days and then you can apply for a second trial.</description>
            <content type="html"><![CDATA[<p>The following is a compilation of all the resources I&rsquo;ve used to pass the Databricks 2.X Spark Certification, as well as some questions that came up.</p>
<h2 id="background-on-the-exam">Background on the Exam</h2>
<p>The exam databricks spark 2.x spark with scala certification is made up of 40 MCQ questions, 3 hours to answer them in total.
The registration grants you 2 trials, meaning if you fail the first attempt, you have to wait 15 days and then you can apply for a second trial.
The focus of the exam is spark DataFrames. The question distribution is outlined very well in the LinkedIn article in REX.</p>
<h2 id="books">Books</h2>
<ul>
<li>Spark in Action</li>
<li>Learning Spark: Outdated but has useful information regarding RDDs.</li>
<li>Spark: The Definitive guide (Either Spark in Action or this).</li>
</ul>
<h2 id="rex">Rex</h2>
<ul>
<li>LinkedIn article with GitHub repository associated: <a href="https://www.linkedin.com/pulse/5-tips-cracking-databricks-apache-spark-certification-vivek-bombatkar/">https://www.linkedin.com/pulse/5-tips-cracking-databricks-apache-spark-certification-vivek-bombatkar/</a> and <a href="https://github.com/vivek-bombatkar/Databricks-Apache-Spark-2X-Certified-Developer">https://github.com/vivek-bombatkar/Databricks-Apache-Spark-2X-Certified-Developer</a> Note that in the github repo there is a sample exam. 2 of the provided answers are not correct.</li>
<li>Medium article <a href="https://link.medium.com/l5Sw4zn5WY">https://link.medium.com/l5Sw4zn5WY</a></li>
</ul>
<h2 id="sample-exam">Sample Exam</h2>
<p>The following was sent to me by someone from databricks&rsquo; learning center:
<a href="https://databricks-prod-cloudfront.cloud.databricks.com/public/793177bc53e528530b06c78a4fa0e086/0/6221173/100020/latest.html">https://databricks-prod-cloudfront.cloud.databricks.com/public/793177bc53e528530b06c78a4fa0e086/0/6221173/100020/latest.html</a>
The sample exam shows the format of the questions.</p>
<h2 id="some-questions">Some Questions</h2>
<ol>
<li>
<p><code>coalesce</code> vs <code>repartition</code></p>
</li>
<li>
<p>Which line will trigger the physical plan?</p>
</li>
<li>
<p>Action vs Transformation</p>
</li>
<li>
<p>Default storage level for rdds vs DataFrames (using cache) MEMORY_ONLY and MEMORY_AND_DISK respectively.</p>
</li>
<li>
<p>Of all the blocks of code, which one has the least bottleneck. (know what <code>ReduceByKeyLocal</code> does.)</p>
</li>
<li>
<p>Does using an accumulator prevent us from using the catalyst optimizations?</p>
</li>
<li>
<p>What are the consequences of increasing the number of partitions?</p>
</li>
<li>
<p>For structured streaming review fault tolerance for every sink. no questions on spark streaming. one windowing question but it was very simple (need to know that the sliding should be smaller than the window time).</p>
</li>
<li>
<p>Apply BFS with GraphFrames.</p>
</li>
<li>
<p>CrossJoin and know that is does a cartesian product so can be memory exhaustive.</p>
</li>
<li>
<p>Broadcast is done automatically as long as the DataSet to be broadcasted is less than 10MB</p>
</li>
<li>
<p>What can we do if we want to handle a file format that is not supported by the DataFrame API</p>
</li>
<li>
<p>UDF questions. and how to call them. (parameters of <code>register</code> method, how to call the registered udf and the function that will be invoked).</p>
</li>
<li>
<p>FooBarBaz question. (printing something based on multiples of 3 or 5 or both. 4 or 5 code blocks and we need to guess the one with the correct output.)</p>
</li>
</ol>
]]></content>
        </item>
        
        <item>
            <title>Dynamic Scaling and Backpressure</title>
            <link>https://fares.codes/posts/dynamic-scaling-and-backpressure/</link>
            <pubDate>Sat, 10 Aug 2019 09:00:00 +0000</pubDate>
            
            <guid>https://fares.codes/posts/dynamic-scaling-and-backpressure/</guid>
            <description>Taking a little break from Scala to review some interesting features of spark streaming.
This article has been updated to reflect recently gained knowledge with spark streaming both in theory and practice.
An important note: This article is about backpressure and dynamic allocation in spark streaming and not normal batch jobs.
Dynamic Allocation in Spark Streaming Dynamic Allocation also called Elastic Scaling is a feature that lets spark dynamically adjust the number of executors to match the workload.</description>
            <content type="html"><![CDATA[<p>Taking a little break from Scala to review some interesting features of spark streaming.</p>
<p>This article has been updated to reflect recently gained knowledge with spark streaming both in theory and practice.</p>
<p>An important note: This article is about backpressure and dynamic allocation in spark streaming and not normal batch jobs.</p>
<h2 id="dynamic-allocation-in-spark-streaming">Dynamic Allocation in Spark Streaming</h2>
<p>Dynamic Allocation also called Elastic Scaling is a feature that lets spark dynamically adjust the number of executors to match the workload.</p>
<p>Spark streaming can dynamically scale up or down the number of executors based on a few configurations.</p>
<ol>
<li>
<p><code>spark.streaming.dynamicAllocation.enabled</code></p>
<pre><code>This enables dynamic allocation with spark streaming. needs to be true.
</code></pre>
</li>
<li>
<p><code>spark.dynamicAllocation.initialExecutors</code></p>
<pre><code>Initial number of executors to start with.
</code></pre>
</li>
<li>
<p><code>spark.streaming.dynamicAllocation.scalingUpRatio</code> and <code>spark.streaming.dynamicAllocation.scalingDownRatio</code></p>
<pre><code>The two configs specify when we would scale up or down the
number of executors based on processing time and interval time.
    
Default values are set to 0.9 and 0.3
</code></pre>
</li>
</ol>
<h2 id="back-pressure">Back Pressure</h2>
<p>Back Pressure is spark streamings ability to adjust the ingestion rate dynamically so that when a system is receiving data at a higher rate than it can process, we wouldnt have tasks queue up and slow down the stream.</p>
<p>The ingestion rate is adjusted dynamically based on previous microbatch processing time.</p>
<p>What about the initial ingestion rate? well this depends on the version of spark you are running.</p>
<ul>
<li>
<p>Prior to <strong>Spark 2.4</strong>: there was a bug that caused <code>spark.streaming.kafka.maxRatePerPartition</code> to be used as the initial rate AND the maximum rate per partition.</p>
</li>
<li>
<p>As of <strong>Spark 2.4</strong>: We can use <code>spark.streaming.backpressure.initialRate</code> for the initial rate of ingestion. as maximum rate per partition can be set using: <code>spark.streaming.kafka.maxRatePerPartition</code></p>
</li>
</ul>
<p>If the input events is too high and spark streaming cannot process it in time, after the first batch is completed, spark will notice that the batch processing time is longer than the interval time and that is when backpressure will kick in to reduce the input rate.</p>
<p>A one sentence summary of backpressure (and an interesting article):</p>
<pre><code>Backpressure shifts the trouble of buffering input records to the
sender so it keeps records until they could be processed
by a streaming application.
</code></pre>
<hr>
<h2 id="what-about-the-practical-side-of-things">What about the practical side of things</h2>
<p>This is where things might get a bit more complicated or hazy.</p>
<p>The following is a summary of what I learned recently from various sources online and the spark source code. Surprisingly the spark streaming documentation can be rather thin on the subject of dynamic allocation and backpressure.</p>
<h2 id="spark-streaming-backpressure">Spark Streaming Backpressure</h2>
<ul>
<li>
<p><code>spark.streaming.backpressure.enabled</code>:</p>
<pre><code>  Enables backpressure in spark streaming
</code></pre>
</li>
<li>
<p><code>spark.streaming.kafka.maxRatePerPartition</code>:</p>
<pre><code>  This is the maximum rate per partition to read kafka records.
</code></pre>
</li>
<li>
<p><code>spark.streaming.kafka.minRatePerPartition</code>:</p>
<pre><code>  Similar to max rate per partition but this sets the min...
</code></pre>
</li>
<li>
<p><code>spark.streaming.backpressure.initialRate</code>:</p>
<pre><code>  The initial rate to start with. this only works 
  on spark versions 2.4 and above. 
  Otherwise, spark streaming will use the 
  kafka max rate per partition as the initial rate.
</code></pre>
</li>
</ul>
<h2 id="spark-streaming-dynamic-allocation">Spark Streaming Dynamic Allocation</h2>
<ul>
<li>
<p><code>spark.streaming.dynamicAllocation.enabled</code>:</p>
<pre><code>  Enables DA for spark streaming
</code></pre>
</li>
<li>
<p><code>spark.streaming.dynamicAllocation.scalingUpRatio</code>:</p>
<pre><code>  Scales up when the ratio between the ProcessingTime and the 
  BatchTime is above x value.
</code></pre>
</li>
<li>
<p><code>spark.streaming.dynamicAllocation.scalingDownRatio</code>:</p>
<pre><code>  Similar as above but for scaling down.
</code></pre>
</li>
<li>
<p><code>streaming.dynamicAllocation.scalingInterval</code>:</p>
<pre><code>  Interval in seconds to apply scaling.
</code></pre>
</li>
<li>
<p><code>spark.streaming.dynamicAllocation.maxExecutors</code>:</p>
<pre><code>  The name of this conf is very misleading and it took me a 
  while to figure it out...

  The name might imply that this represents the maximum number 
  of executors we can scale up to... but it is not.
  The maximum number of executors we can reach is the `spark.cores.max` 
  divided by the `spark.executor.core` setting.
    
  This configuration, is the number of executors spark streaming 
  will request from the cluster manager (mesos, yarn...)
  which is why we can see the following in the logs:
            
          &quot;Capping the total amount of executors to X&quot;
          &quot;Requested total X executors&quot;
    
  But dont take my word for it... let us quickly check the spark 
  source code for verification:
</code></pre>
</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#75715e">/** Request the specified number of
</span><span style="color:#75715e">executors over the currently active one */</span>
<span style="color:#66d9ef">private</span> <span style="color:#66d9ef">def</span> requestExecutors<span style="color:#f92672">(</span>numNewExecutors<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Int</span><span style="color:#f92672">)</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Unit</span> <span style="color:#f92672">=</span> <span style="color:#f92672">{</span>
       require<span style="color:#f92672">(</span>numNewExecutors <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">1</span><span style="color:#f92672">)</span>
       <span style="color:#66d9ef">val</span> allExecIds <span style="color:#66d9ef">=</span> client<span style="color:#f92672">.</span>getExecutorIds<span style="color:#f92672">()</span>
       logDebug<span style="color:#f92672">(</span><span style="color:#e6db74">s&#34;Executors (</span><span style="color:#e6db74">${</span>allExecIds<span style="color:#f92672">.</span>size<span style="color:#e6db74">}</span><span style="color:#e6db74">) = </span><span style="color:#e6db74">${</span>allExecIds<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span><span style="color:#f92672">)</span>
       <span style="color:#66d9ef">val</span> targetTotalExecutors <span style="color:#66d9ef">=</span>
       math<span style="color:#f92672">.</span>max<span style="color:#f92672">(</span>
       math<span style="color:#f92672">.</span>min<span style="color:#f92672">(</span>maxNumExecutors<span style="color:#f92672">,</span> allExecIds<span style="color:#f92672">.</span>size <span style="color:#f92672">+</span> numNewExecutors<span style="color:#f92672">),</span>
       minNumExecutors<span style="color:#f92672">)</span>
       client<span style="color:#f92672">.</span>requestTotalExecutors<span style="color:#f92672">(</span>targetTotalExecutors<span style="color:#f92672">,</span> <span style="color:#ae81ff">0</span><span style="color:#f92672">,</span> <span style="color:#a6e22e">Map</span><span style="color:#f92672">.</span>empty<span style="color:#f92672">)</span>
       logInfo<span style="color:#f92672">(</span><span style="color:#e6db74">s&#34;Requested total </span><span style="color:#e6db74">$targetTotalExecutors</span><span style="color:#e6db74"> executors&#34;</span><span style="color:#f92672">)</span>
<span style="color:#f92672">}</span>
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#66d9ef">val</span> <span style="color:#a6e22e">MAX_EXECUTORS_KEY</span> <span style="color:#66d9ef">=</span>
 <span style="color:#e6db74">&#34;spark.streaming.dynamicAllocation.maxExecutors&#34;</span>

<span style="color:#75715e">// AND
</span><span style="color:#75715e"></span>
<span style="color:#66d9ef">private</span> <span style="color:#66d9ef">val</span> maxNumExecutors <span style="color:#66d9ef">=</span>
conf<span style="color:#f92672">.</span>getInt<span style="color:#f92672">(</span><span style="color:#a6e22e">MAX_EXECUTORS_KEY</span><span style="color:#f92672">,</span> <span style="color:#a6e22e">Integer</span><span style="color:#f92672">.</span><span style="color:#a6e22e">MAX_VALUE</span><span style="color:#f92672">)</span>
</code></pre></div><p>So what does this tell us?</p>
<p>First an foremost, maxNumExecutors is the <code>spark.streaming.dynamicAllocation.maxExecutors</code>
or by default it is the <code>Integer.MAX_VALUE</code>.</p>
<p>alright&hellip; but what about the algorithm?
it tells us:
the targetTotalExecutors to request is the maximum number between: the minNumExecutors and the min of (maxNumExecutors, <code>allAvailableExec + math.max(math.round(ratio).toInt, 1)</code>)</p>
<blockquote>
<p>where allAvailableExec is the size of all the executorIds.
newNumExecutors is the max between one and the rounded ratio.
ratio is defined as</p>
</blockquote>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#66d9ef">val</span> ratio <span style="color:#66d9ef">=</span> averageBatchProcTime<span style="color:#f92672">.</span>toDouble <span style="color:#f92672">/</span> batchDurationMs
</code></pre></div><p>I get things might have gotten a bit confusing&hellip; but let us go back to what is important, configuring our cluster.</p>
<p>in order to do so, we need to know based on what will our cluster scale up or scale down.</p>
<p>there are two things to know:</p>
<p><code>batch time</code>: this is a fixed amount in seconds. this represents the interval of time during which we will be processing data.
from the spark structured streaming official doc:</p>
<pre><code>    If the previous micro-batch completes within the interval,
    then the engine will wait until the interval is over before
    kicking off the next micro-batch.


    If the previous micro-batch takes longer than the interval
    to complete (i.e. if an interval boundary is missed), then the
    next micro-batch will start as soon as the previous one completes
    (i.e., it will not wait for the next interval boundary).


    If no new data is available, then no micro-batch will be kicked off.
</code></pre>
<p>The first scenario implies idle time.</p>
<p>The second scenario implies queued tasks.</p>
<p><code>processing time</code>: the time it takes us to process the data. this can be less, equal or greater than batch time as seen in the example above.</p>
<p>Let us look at some use cases:</p>
<table>
<thead>
<tr>
<th align="left">Case</th>
<th align="center">Processing Time</th>
<th align="left">Batch Time</th>
<th align="center">Ratio</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left">1</td>
<td align="center">2s</td>
<td align="left">60s</td>
<td align="center">0.033</td>
</tr>
<tr>
<td align="left">2</td>
<td align="center">10s</td>
<td align="left">60s</td>
<td align="center">0.166</td>
</tr>
<tr>
<td align="left">3</td>
<td align="center">20s</td>
<td align="left">60s</td>
<td align="center">0.333</td>
</tr>
<tr>
<td align="left">4</td>
<td align="center">30s</td>
<td align="left">60s</td>
<td align="center">0.5</td>
</tr>
<tr>
<td align="left">5</td>
<td align="center">45s</td>
<td align="left">60s</td>
<td align="center">0.75</td>
</tr>
<tr>
<td align="left">6</td>
<td align="center">60s</td>
<td align="left">60s</td>
<td align="center">1</td>
</tr>
<tr>
<td align="left">7</td>
<td align="center">80s</td>
<td align="left">60s</td>
<td align="center">1.33</td>
</tr>
</tbody>
</table>
<p>Now assume our <code>ScalingUp</code> ratio is 0.9 and <code>ScalingDown</code> ratio is 0.3</p>
<p>what happens in each case?</p>
<ol>
<li>
<p>Case 1 and 2: <strong>ratio &lt;= ScalingDown</strong> so spark will request to kill x executors. (x is calculated based on the maxExecutor or the algorithm shown above)</p>
<pre><code>the reason behind this is because the processing time is 
significantly smaller than the batch time, so there is a lot 
of idle time and so we probably have more resources than we need.
</code></pre>
</li>
<li>
<p>Case 3, 4, 5: <strong>ratio is neither smaller than ScalingDown nor bigger than ScalingUp</strong>, so we do nothing.</p>
</li>
<li>
<p>Case 6 and 7: <strong>ratio &gt;= ScalingUp</strong> so spark will request additional executors based on the algorithm mentioned above.</p>
<pre><code>The reason behind this is because the processing time is 
close to or bigger than the Batch time, so most likely 
additional resources are needed.
</code></pre>
</li>
</ol>
<h2 id="some-additional-resources">Some additional resources</h2>
<ul>
<li>
<p>Spark Source Code (more specifically: <code>ExecutorAllocationManager.scala</code>):</p>
<p><a href="https://github.com/apache/spark/blob/branch-2.4/streaming/src/main/scala/org/apache/spark/streaming/scheduler/ExecutorAllocationManager.scala">https://github.com/apache/spark/blob/branch-2.4/streaming/src/main/scala/org/apache/spark/streaming/scheduler/ExecutorAllocationManager.scala</a></p>
</li>
<li>
<p>Building Robust Scalable and Adaptive Applications on Spark Streaming talk during Spark Summit 2016</p>
<p><a href="https://databricks.com/session/building-robust-scalable-and-adaptive-applications-on-spark-streaming">https://databricks.com/session/building-robust-scalable-and-adaptive-applications-on-spark-streaming</a></p>
</li>
<li>
<p>Dynamic Allocation JIRA Design Document</p>
<p><a href="https://issues.apache.org/jira/secure/attachment/12775710/dynamic-allocation-streaming-design.pdf">https://issues.apache.org/jira/secure/attachment/12775710/dynamic-allocation-streaming-design.pdf</a></p>
</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>SemigroupK and CombineK</title>
            <link>https://fares.codes/posts/semigroupk-and-combinek/</link>
            <pubDate>Sat, 03 Aug 2019 15:00:00 +0000</pubDate>
            
            <guid>https://fares.codes/posts/semigroupk-and-combinek/</guid>
            <description>Before we get into SemigroupKand combineK let us first quickly recap what a semigroup is.
 Semigroup A Semigroup for a given type A has a single operation that takes two values of type A and returns a single value of the same type. This operation needs to be associative. We will call this operation combine for simplicity.
from algebra.Semigroup we have:
/** * A semigroup is any set `A` with an associative operation (`combine`).</description>
            <content type="html"><![CDATA[<p>Before we get into <code>SemigroupK</code>and <code>combineK</code> let us first quickly recap what a <code>semigroup</code> is.</p>
<hr>
<h2 id="semigroup">Semigroup</h2>
<p>A Semigroup for a given type <code>A</code> has a single operation that takes two values of type A and returns a single value of the same type. This operation needs to be associative.
We will call this operation combine for simplicity.</p>
<p>from <code>algebra.Semigroup</code> we have:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#75715e">/**
</span><span style="color:#75715e"> * A semigroup is any set `A` with an associative operation (`combine`).
</span><span style="color:#75715e"> */</span>
<span style="color:#66d9ef">trait</span> <span style="color:#a6e22e">Semigroup</span><span style="color:#f92672">[</span><span style="color:#66d9ef">@sp</span><span style="color:#f92672">(</span><span style="color:#66d9ef">Int</span>, <span style="color:#66d9ef">Long</span>, <span style="color:#66d9ef">Float</span>, <span style="color:#66d9ef">Double</span><span style="color:#f92672">)</span> <span style="color:#66d9ef">A</span><span style="color:#f92672">]</span> <span style="color:#a6e22e">extends</span> <span style="color:#a6e22e">Any</span> <span style="color:#66d9ef">with</span> <span style="color:#a6e22e">Serializable</span> <span style="color:#f92672">{</span>

  <span style="color:#75715e">/**
</span><span style="color:#75715e">   * Associative operation taking which combines two values.
</span><span style="color:#75715e">   */</span>
  <span style="color:#66d9ef">def</span> combine<span style="color:#f92672">(</span>x<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">A</span><span style="color:#f92672">,</span> y<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">A</span><span style="color:#f92672">)</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">A</span>

</code></pre></div><p>This might be a bit abstract, so lets look at a more concrete example:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">  <span style="color:#66d9ef">val</span> classOneGrades<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">List</span><span style="color:#f92672">[</span><span style="color:#66d9ef">Int</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">List</span><span style="color:#f92672">(</span><span style="color:#ae81ff">75</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">80</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">78</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">90</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">100</span><span style="color:#f92672">)</span>
  <span style="color:#66d9ef">val</span> classTwoGrades<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">List</span><span style="color:#f92672">[</span><span style="color:#66d9ef">Int</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">List</span><span style="color:#f92672">(</span><span style="color:#ae81ff">50</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">68</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">90</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">98</span><span style="color:#f92672">)</span>

  <span style="color:#66d9ef">val</span> allGrades <span style="color:#66d9ef">=</span> classOneGrades<span style="color:#f92672">.</span>combine<span style="color:#f92672">(</span>classTwoGrades<span style="color:#f92672">)</span>
</code></pre></div><p>the result is as you&rsquo;d expect: <code>List(75, 80, 78, 90, 100, 50, 68, 90, 98)</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-md" data-lang="md">Note:  We could have also called <span style="color:#e6db74">`classOneGrades |+| classTwoGrades`</span>
since the sign |+| is a <span style="color:#e6db74">`SemigroupOps`</span> that calls combine.
</code></pre></div><p>So where is the utility of semigroups?</p>
<p>Assume we had a <code>List[A]</code> and we wished to combine all the elements in that list into one, we could easily call:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">  <span style="color:#66d9ef">val</span> result<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">A</span> <span style="color:#f92672">=</span> list<span style="color:#f92672">.</span>foldLeft<span style="color:#f92672">(???)(</span><span style="color:#66d9ef">_</span> <span style="color:#f92672">|+|</span> <span style="color:#66d9ef">_</span><span style="color:#f92672">)</span>
</code></pre></div><p>this starts out with an initial single value (??? in this case) and traverses the list combining every 2 elements together and appending previous value.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">Note: the only issue in the above example is that we do not have an &#34;empty&#34; value to put in instead of the ??? (in the case the list is empty for example...)

This however is taken care of by the Monoid which is a semigroup plus an &#39;empty&#39; value that acts as the identity of the combine.
</code></pre></div><hr>
<h2 id="semigroupk">SemigroupK</h2>
<p>For Lists, the Semigroup&rsquo;s combine and the SemigroupK&rsquo;s combineK operate in the same way i.e: they return a concatenated list consisting of both lists&rsquo; elements.</p>
<p>so where is the difference?</p>
<p>Here is an excerpt from cats&rsquo; official documentation:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">SemigroupK has a very similar structure to Semigroup, the difference is that SemigroupK operates on type constructors of one argument. So, for example, whereas you can find a Semigroup for types which are fully specified like Int or List[Int] or Option[Int], you will find SemigroupK for type constructors like List and Option.
</code></pre></div><p>But what does SemigroupK do differently?</p>
<p>Well assume you have two <code>Option[A]</code> combineK would return the the first Some of the two&hellip;</p>
<p>assume you have a function that takes a <code>previousValue</code> and a <code>currentValue</code>.
you would like to return currentValue but if this is none, then you would like to return previousValue else return None.</p>
<p>If we did not use SemigroupK, our solution would have to look like this:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">
  <span style="color:#66d9ef">val</span> res<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Option</span><span style="color:#f92672">[</span><span style="color:#66d9ef">Int</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span> <span style="color:#f92672">(</span>curr<span style="color:#f92672">,</span> prev<span style="color:#f92672">)</span> <span style="color:#66d9ef">match</span> <span style="color:#f92672">{</span>
    <span style="color:#66d9ef">case</span> <span style="color:#f92672">(</span><span style="color:#a6e22e">Some</span><span style="color:#f92672">(</span>a<span style="color:#f92672">),</span> <span style="color:#66d9ef">_</span><span style="color:#f92672">)</span>    <span style="color:#66d9ef">=&gt;</span> <span style="color:#a6e22e">Some</span><span style="color:#f92672">(</span>a<span style="color:#f92672">)</span>
    <span style="color:#66d9ef">case</span> <span style="color:#f92672">(</span><span style="color:#a6e22e">None</span><span style="color:#f92672">,</span> <span style="color:#a6e22e">Some</span><span style="color:#f92672">(</span>b<span style="color:#f92672">))</span> <span style="color:#66d9ef">=&gt;</span> <span style="color:#a6e22e">Some</span><span style="color:#f92672">(</span>b<span style="color:#f92672">)</span>
    <span style="color:#66d9ef">case</span> <span style="color:#f92672">(</span><span style="color:#a6e22e">None</span><span style="color:#f92672">,</span> <span style="color:#a6e22e">None</span><span style="color:#f92672">)</span>    <span style="color:#66d9ef">=&gt;</span> <span style="color:#a6e22e">None</span>
  <span style="color:#f92672">}</span>

</code></pre></div><p>Using SemigroupK the same code becomes:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">  <span style="color:#66d9ef">val</span> res<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Option</span><span style="color:#f92672">[</span><span style="color:#66d9ef">Int</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">SemigroupK</span><span style="color:#f92672">[</span><span style="color:#66d9ef">Option</span><span style="color:#f92672">].</span>combineK<span style="color:#f92672">(</span>curr <span style="color:#f92672">,</span>prev<span style="color:#f92672">)</span>
</code></pre></div><p>With SemigroupK the code becomes much simpler and easier to read.</p>
<p>Here are a few examples of returns with SemigroupK:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">
<span style="color:#66d9ef">val</span> res <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">SemigroupK</span><span style="color:#f92672">[</span><span style="color:#66d9ef">Option</span><span style="color:#f92672">].</span>combineK<span style="color:#f92672">(</span><span style="color:#a6e22e">Some</span><span style="color:#f92672">(</span><span style="color:#ae81ff">2</span><span style="color:#f92672">),</span> <span style="color:#a6e22e">None</span><span style="color:#f92672">)</span>
<span style="color:#75715e">// res = Some(2)
</span><span style="color:#75715e"></span>
<span style="color:#66d9ef">val</span> res <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">SemigroupK</span><span style="color:#f92672">[</span><span style="color:#66d9ef">Option</span><span style="color:#f92672">].</span>combineK<span style="color:#f92672">(</span><span style="color:#a6e22e">None</span><span style="color:#f92672">,</span> <span style="color:#a6e22e">Some</span><span style="color:#f92672">(</span><span style="color:#ae81ff">3</span><span style="color:#f92672">))</span>
<span style="color:#75715e">// res = Some(3)
</span><span style="color:#75715e"></span>
<span style="color:#66d9ef">val</span> res <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">SemigroupK</span><span style="color:#f92672">[</span><span style="color:#66d9ef">Option</span><span style="color:#f92672">].</span>combineK<span style="color:#f92672">(</span><span style="color:#a6e22e">Some</span><span style="color:#f92672">(</span><span style="color:#ae81ff">2</span><span style="color:#f92672">),</span> <span style="color:#a6e22e">Some</span><span style="color:#f92672">(</span><span style="color:#ae81ff">3</span><span style="color:#f92672">))</span>
<span style="color:#75715e">// res = Some(2)
</span><span style="color:#75715e"></span>
<span style="color:#66d9ef">val</span> res <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">SemigroupK</span><span style="color:#f92672">[</span><span style="color:#66d9ef">Option</span><span style="color:#f92672">].</span>combineK<span style="color:#f92672">(</span><span style="color:#a6e22e">None</span><span style="color:#f92672">,</span> <span style="color:#a6e22e">None</span><span style="color:#f92672">)</span>
<span style="color:#75715e">// res = None
</span><span style="color:#75715e"></span>
</code></pre></div><p>Long story short, SemigroupK operates on Kind.</p>
<p>Note: a syntactic sugar for  semigroupK.combine is &lt;+&gt;</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">curr <span style="color:#f92672">&lt;+&gt;</span> prev
<span style="color:#75715e">// this would result in the same thing as:
</span><span style="color:#75715e"></span><span style="color:#a6e22e">SemigroupK</span><span style="color:#f92672">[</span><span style="color:#66d9ef">Option</span><span style="color:#f92672">].</span>combineK<span style="color:#f92672">(</span>curr <span style="color:#f92672">,</span>prev<span style="color:#f92672">)</span>
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Collect / FilterMap</title>
            <link>https://fares.codes/posts/collect-/-filtermap/</link>
            <pubDate>Sat, 03 Aug 2019 10:00:00 +0000</pubDate>
            
            <guid>https://fares.codes/posts/collect-/-filtermap/</guid>
            <description>Collect or FilterMap does exactly what is says. it filters a collection and then maps the values.
collect takes a partial function as a parameter and returns a Traversable of the same type.
def collect[B](pf: PartialFunction[A, B]): CC[B] Also from the scaladoc:
/** * @tparam CC type constructor of the collection (e.g. `List`, `Set`). Operations returning a * collection with a different type of element `B` (e.g. `map`) return a `CC[B]`.</description>
            <content type="html"><![CDATA[<p>Collect or FilterMap does exactly what is says. it filters a collection and then maps the values.</p>
<p>collect takes a partial function as a parameter and returns a Traversable of the same type.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#66d9ef">def</span> collect<span style="color:#f92672">[</span><span style="color:#66d9ef">B</span><span style="color:#f92672">](</span>pf<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">PartialFunction</span><span style="color:#f92672">[</span><span style="color:#66d9ef">A</span>, <span style="color:#66d9ef">B</span><span style="color:#f92672">])</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">CC</span><span style="color:#f92672">[</span><span style="color:#66d9ef">B</span><span style="color:#f92672">]</span>
</code></pre></div><p>Also from the scaladoc:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#75715e">/**
</span><span style="color:#75715e">  * @tparam CC type constructor of the collection (e.g. `List`, `Set`). Operations returning a
</span><span style="color:#75715e">  * collection with a different type of element `B` (e.g. `map`) return a `CC[B]`.
</span><span style="color:#75715e">  */</span>
</code></pre></div><p>This tells us that the function collect applies a function on a collection and returns a collection of a different type.</p>
<hr>
<p>let us look at a simple example:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">  <span style="color:#66d9ef">val</span> randomNumbers<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">List</span><span style="color:#f92672">[</span><span style="color:#66d9ef">Int</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">List</span><span style="color:#f92672">(</span><span style="color:#ae81ff">1</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">2</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">5</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">20</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">25</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">29</span><span style="color:#f92672">)</span>

  <span style="color:#66d9ef">val</span> result<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">List</span><span style="color:#f92672">[</span><span style="color:#66d9ef">Double</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span> randomNumbers<span style="color:#f92672">.</span>collect <span style="color:#f92672">{</span>
    <span style="color:#66d9ef">case</span> x<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Int</span> <span style="color:#66d9ef">if</span> <span style="color:#66d9ef">x</span> <span style="color:#66d9ef">&lt;</span> <span style="color:#960050;background-color:#1e0010">10</span>  <span style="color:#f92672">=&gt;</span> x <span style="color:#f92672">*</span> <span style="color:#ae81ff">10</span>
    <span style="color:#66d9ef">case</span> x<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Int</span> <span style="color:#66d9ef">if</span> <span style="color:#66d9ef">x</span> <span style="color:#66d9ef">&gt;=</span> <span style="color:#960050;background-color:#1e0010">10</span> <span style="color:#f92672">=&gt;</span> x <span style="color:#f92672">/</span> <span style="color:#ae81ff">10.0</span>
    <span style="color:#66d9ef">case</span> <span style="color:#66d9ef">_</span>                 <span style="color:#66d9ef">=&gt;</span> <span style="color:#ae81ff">0</span>
  <span style="color:#f92672">}</span>
</code></pre></div><p>The above code returns:</p>
<blockquote>
<p>List(10.0, 20.0, 50.0, 2.0, 2.5, 2.9)</p>
</blockquote>
<p>&ldquo;But&hellip; The example above is the same thing as applying a map&hellip;&rdquo; True it is&hellip; the below code yields the exact same result:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">  <span style="color:#66d9ef">val</span> result <span style="color:#66d9ef">=</span> randomNumbers<span style="color:#f92672">.</span>map <span style="color:#f92672">{</span> x <span style="color:#66d9ef">=&gt;</span>
    <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>x <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">10</span><span style="color:#f92672">)</span> x <span style="color:#f92672">*</span> <span style="color:#ae81ff">10</span>
    <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>x <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">10</span><span style="color:#f92672">)</span> x <span style="color:#f92672">/</span> <span style="color:#ae81ff">10.0</span>
    <span style="color:#66d9ef">else</span> <span style="color:#ae81ff">0</span>
  <span style="color:#f92672">}</span>
</code></pre></div><p>so where is the benefit of using collect instead of map? the answer is the in filtering part.</p>
<p>when applying collect we have the option to specify the range/type&hellip; of values we would like to apply the map on. the rest of the elements in our collection will not be mapped and therefore will no be collected in the result.</p>
<p>going back to our previous example, say we only wanted to collect values below 10 and multiply them by 10:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">  <span style="color:#66d9ef">val</span> result <span style="color:#66d9ef">=</span> randomNumbers<span style="color:#f92672">.</span>collect <span style="color:#f92672">{</span>
    <span style="color:#66d9ef">case</span> x<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Int</span> <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">x</span> <span style="color:#66d9ef">&lt;</span> <span style="color:#960050;background-color:#1e0010">10</span><span style="color:#f92672">)</span> <span style="color:#f92672">=&gt;</span> x <span style="color:#f92672">*</span> <span style="color:#ae81ff">10</span>
  <span style="color:#f92672">}</span>
</code></pre></div><p>the result would be:</p>
<blockquote>
<p>List(10.0, 20.0, 50.0)</p>
</blockquote>
<p>Now I&rsquo;m assuming you&rsquo;ve figured it out by now but collect is a more concise way of using:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#66d9ef">val</span> result <span style="color:#66d9ef">=</span> randomNumbers<span style="color:#f92672">.</span>filter<span style="color:#f92672">(</span><span style="color:#66d9ef">_</span> <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">10</span><span style="color:#f92672">).</span>map<span style="color:#f92672">(</span><span style="color:#66d9ef">_</span> <span style="color:#f92672">*</span> <span style="color:#ae81ff">10.0</span><span style="color:#f92672">)</span>
</code></pre></div><p>Specially when we start dealing with complex types and multiple scenarios.</p>
]]></content>
        </item>
        
        <item>
            <title>Un-Apply in Scala</title>
            <link>https://fares.codes/posts/un-apply-in-scala/</link>
            <pubDate>Fri, 02 Aug 2019 10:10:00 +0000</pubDate>
            
            <guid>https://fares.codes/posts/un-apply-in-scala/</guid>
            <description>Unapply in Scala is the inverse of the apply&amp;hellip; (queue no shit comments :p)
So what does it do exactly? given a class Person:
case class Person(name: String, age: Int, hobbies: List[String]) If we wanted to decompose the class person into a set of attributes:
 name: String age: Int hobbies: List[String]  We would use the unapply. the return type of the unapply is an Option of a tuple with the values inside the tuple representing the values we seek to retrieve.</description>
            <content type="html"><![CDATA[<p>Unapply in Scala is the inverse of the apply&hellip; (queue no shit comments :p)</p>
<p>So what does it do exactly? given a class Person:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#66d9ef">case</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Person</span><span style="color:#f92672">(</span>name<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">String</span><span style="color:#f92672">,</span> age<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Int</span><span style="color:#f92672">,</span> hobbies<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">List</span><span style="color:#f92672">[</span><span style="color:#66d9ef">String</span><span style="color:#f92672">])</span>
</code></pre></div><p>If we wanted to decompose the class person into a set of attributes:</p>
<ul>
<li>name: String</li>
<li>age: Int</li>
<li>hobbies: List[String]</li>
</ul>
<p>We would use the unapply. the return type of the unapply is an Option of a tuple with the values inside the tuple representing the values we seek to retrieve.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#66d9ef">case</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Person</span><span style="color:#f92672">(</span>name<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">String</span><span style="color:#f92672">,</span> age<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Int</span><span style="color:#f92672">,</span> hobbies<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">List</span><span style="color:#f92672">[</span><span style="color:#66d9ef">String</span><span style="color:#f92672">])</span>

<span style="color:#66d9ef">object</span> <span style="color:#a6e22e">Test</span> <span style="color:#f92672">{</span>
  
  <span style="color:#66d9ef">val</span> fares<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Person</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">Person</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;fares&#34;</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">23</span><span style="color:#f92672">,</span> <span style="color:#a6e22e">List</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Hiking&#34;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;Biking&#34;</span><span style="color:#f92672">))</span>
  <span style="color:#66d9ef">val</span> result<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Option</span><span style="color:#f92672">[(</span><span style="color:#66d9ef">String</span>, <span style="color:#66d9ef">Int</span>, <span style="color:#66d9ef">List</span><span style="color:#f92672">[</span><span style="color:#66d9ef">String</span><span style="color:#f92672">])]</span> <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">Person</span><span style="color:#f92672">.</span>unapply<span style="color:#f92672">(</span>fares<span style="color:#f92672">)</span>

<span style="color:#f92672">}</span>
</code></pre></div><p>We notice that the return type is an option of a tuple of string, int and List of String.
That means that after the unapply, we would have to extract the Tuple from the option and call <code>result._1</code> and so on to retrieve each individual value.</p>
<p>clearly this is cumbersome and annoying to deal with. And clearly there is a better way :p</p>
<p>But for fun, let us check what this might look like:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">  <span style="color:#66d9ef">val</span> fares<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Person</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">Person</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;fares&#34;</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">23</span><span style="color:#f92672">,</span> <span style="color:#a6e22e">List</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Hiking&#34;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;Biking&#34;</span><span style="color:#f92672">))</span>

  <span style="color:#66d9ef">var</span> result<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Option</span><span style="color:#f92672">[(</span><span style="color:#66d9ef">String</span>, <span style="color:#66d9ef">Int</span>, <span style="color:#66d9ef">List</span><span style="color:#f92672">[</span><span style="color:#66d9ef">String</span><span style="color:#f92672">])]</span> <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">Person</span><span style="color:#f92672">.</span>unapply<span style="color:#f92672">(</span>fares<span style="color:#f92672">)</span>

  <span style="color:#66d9ef">val</span> name <span style="color:#66d9ef">=</span> result<span style="color:#f92672">.</span>get<span style="color:#f92672">.</span>_1
  <span style="color:#66d9ef">val</span> age <span style="color:#66d9ef">=</span> result<span style="color:#f92672">.</span>get<span style="color:#f92672">.</span>_2
  <span style="color:#66d9ef">val</span> hobbies <span style="color:#66d9ef">=</span> result<span style="color:#f92672">.</span>get<span style="color:#f92672">.</span>_3
</code></pre></div><p>Note: calling get like this can throw a <code>java.util.NoSuchElementException</code> we should instead do some checking if it its defined or simply call <code>.getOrElse</code> and pass a default value&hellip; (complicate things even more) or check <code>.isDefined</code> before calling the <code>get</code></p>
<p>Not to mention that calling values inside tuples using the <code>_1</code> and so on can quickly become confusing.</p>
<hr>
<h2 id="unapply-and-case-classes">Unapply and case classes</h2>
<p>case classes automatically define both methods apply and unapply for us. this also allows us to easily do pattern matching on instances of case classes.</p>
<p>As we saw in previous examples, unapply can automatically be called on any case class and we pass to it the instance of the case class whose values we would like to unapply.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#66d9ef">val</span> result<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Option</span><span style="color:#f92672">[(</span><span style="color:#66d9ef">String</span>, <span style="color:#66d9ef">Int</span>, <span style="color:#66d9ef">List</span><span style="color:#f92672">[</span><span style="color:#66d9ef">String</span><span style="color:#f92672">])]</span> <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">Person</span><span style="color:#f92672">.</span>unapply<span style="color:#f92672">(</span>fares<span style="color:#f92672">)</span>
</code></pre></div><hr>
<h2 id="unapply-in-pattern-matching">Unapply in Pattern Matching</h2>
<p>Pattern matching automatically calls the unapply method, in order to check if the values inside match a specific case.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">  fares <span style="color:#66d9ef">match</span> <span style="color:#f92672">{</span>
    <span style="color:#66d9ef">case</span> <span style="color:#a6e22e">Person</span><span style="color:#f92672">(</span>name<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">String</span><span style="color:#f92672">,</span> age<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Int</span><span style="color:#f92672">,</span> <span style="color:#66d9ef">_</span><span style="color:#f92672">)</span> <span style="color:#66d9ef">=&gt;</span>
      <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>age <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">22</span><span style="color:#f92672">)</span> println<span style="color:#f92672">(</span>name<span style="color:#f92672">)</span> <span style="color:#66d9ef">else</span> println<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Not Fares&#34;</span><span style="color:#f92672">)</span>
    <span style="color:#66d9ef">case</span> <span style="color:#66d9ef">_</span> <span style="color:#66d9ef">=&gt;</span> println<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Ummm&#34;</span><span style="color:#f92672">)</span> <span style="color:#75715e">// Should not happen
</span><span style="color:#75715e"></span>  <span style="color:#f92672">}</span>
</code></pre></div><hr>
<h2 id="unapply-simplified">Unapply Simplified</h2>
<p>Going back to out Person case class and fares instance.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">  <span style="color:#66d9ef">val</span> <span style="color:#a6e22e">Person</span><span style="color:#f92672">(</span>faresName<span style="color:#f92672">,</span> faresAge<span style="color:#f92672">,</span> faresHobbies<span style="color:#f92672">)</span> <span style="color:#66d9ef">=</span> fares

  println<span style="color:#f92672">(</span>faresName<span style="color:#f92672">)</span>
  println<span style="color:#f92672">(</span>faresAge<span style="color:#f92672">)</span>
  println<span style="color:#f92672">(</span>faresHobbies<span style="color:#f92672">)</span>

  <span style="color:#75715e">//the following code yields:
</span><span style="color:#75715e"></span>
    fares
    <span style="color:#ae81ff">23</span>
    <span style="color:#a6e22e">List</span><span style="color:#f92672">(</span><span style="color:#a6e22e">Hiking</span><span style="color:#f92672">,</span> <span style="color:#a6e22e">Biking</span><span style="color:#f92672">)</span>
</code></pre></div><p>So we pass the val names we want in the case class Person and we assign it the value of the instance.</p>
<hr>
]]></content>
        </item>
        
        <item>
            <title>Sealed Traits in Scala</title>
            <link>https://fares.codes/posts/sealed-traits-in-scala/</link>
            <pubDate>Wed, 31 Jul 2019 21:00:00 +0000</pubDate>
            
            <guid>https://fares.codes/posts/sealed-traits-in-scala/</guid>
            <description>A sealed trait in scala forces all the case classes/objects that wish to extend it to be in the same source file.
In other words, if case class B wishes to extend sealed trait A B has to be defined in the same file where trait A is defined.
Taking a little step back, What exactly is a trait?
Traits in Scala Traits in scala are similar to interfaces in java.</description>
            <content type="html"><![CDATA[<p>A sealed trait in scala forces all the case classes/objects that wish to extend it to be in the same source file.</p>
<p>In other words, if <code>case class B</code> wishes to extend <code>sealed trait A</code> B has to be defined in the same file where trait A is defined.</p>
<p>Taking a little step back,  <em>What exactly is a trait?</em></p>
<h2 id="traits-in-scala">Traits in Scala</h2>
<p>Traits in scala are similar to interfaces in java.</p>
<p>They encapsulate methods and field definitions so that they can be reused by different classes/objects</p>
<p>A single class can inherit from multiple traits by <code>mixing</code> them.</p>
<p>While a single class can only extend one abstract class.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#66d9ef">trait</span> <span style="color:#a6e22e">A</span>
<span style="color:#66d9ef">trait</span> <span style="color:#a6e22e">B</span>
<span style="color:#66d9ef">case</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">C</span><span style="color:#f92672">(</span>name<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">String</span><span style="color:#f92672">)</span> <span style="color:#66d9ef">extends</span> A <span style="color:#66d9ef">with</span> B
</code></pre></div><p>Traits can include both function definition and function implementation, but there must be at least one abstract function in the trait for it to be considered as such.</p>
<p>Another useful note; wherever a trait is required, a subtype of the trait can be used.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#66d9ef">trait</span> <span style="color:#a6e22e">Animal</span> <span style="color:#f92672">{</span>  
 <span style="color:#66d9ef">def</span> getName<span style="color:#f92672">()</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">String</span>
<span style="color:#f92672">}</span>

<span style="color:#66d9ef">case</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Dog</span><span style="color:#f92672">(</span>name<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">String</span><span style="color:#f92672">)</span> <span style="color:#66d9ef">extends</span> <span style="color:#a6e22e">Animal</span><span style="color:#f92672">{</span>  
   <span style="color:#66d9ef">override</span> <span style="color:#66d9ef">def</span> getName<span style="color:#f92672">()</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">String</span> <span style="color:#f92672">=</span> name
<span style="color:#f92672">}</span>

<span style="color:#66d9ef">case</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Cat</span><span style="color:#f92672">(</span>name<span style="color:#66d9ef">:</span><span style="color:#66d9ef">String</span><span style="color:#f92672">)</span> <span style="color:#66d9ef">extends</span> <span style="color:#a6e22e">Animal</span><span style="color:#f92672">{</span>
 <span style="color:#66d9ef">override</span> <span style="color:#66d9ef">def</span> getName<span style="color:#f92672">()</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">String</span> <span style="color:#f92672">=</span> name
<span style="color:#f92672">}</span>

<span style="color:#66d9ef">val</span> l<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">List</span><span style="color:#f92672">[</span><span style="color:#66d9ef">Animal</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">List</span><span style="color:#f92672">(</span><span style="color:#a6e22e">Cat</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Blacky&#34;</span><span style="color:#f92672">),</span> <span style="color:#a6e22e">Dog</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Verra&#34;</span><span style="color:#f92672">))</span>
</code></pre></div><p>Notice how we were able to pass a list of Cat and Dog to a list of Animal?</p>
<p>Why are traits useful?</p>
<p>Traits allow you to model behavior and reuse functions across multiple classes that could potentially be unrelated.</p>
<h2 id="sealed-traits-in-scala">Sealed Traits In Scala</h2>
<p>As mentioned earlier, sealed traits can only be extended by classes in the same source folder as the trait itself.</p>
<p>This makes the code easier to read because we would have the trait as well as all the classes that extend it, in once file. As opposed to having to look for the subtypes across the project files.</p>
<p>to make a trait sealed, we just need to add the keyword <code>sealed</code> before it.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">
<span style="color:#66d9ef">sealed</span> <span style="color:#66d9ef">trait</span> <span style="color:#a6e22e">Database</span><span style="color:#f92672">[</span><span style="color:#66d9ef">A</span><span style="color:#f92672">]</span> <span style="color:#f92672">{</span>
  <span style="color:#66d9ef">def</span> insert<span style="color:#f92672">(</span>value<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">A</span><span style="color:#f92672">)</span>
  <span style="color:#66d9ef">def</span> delete<span style="color:#f92672">(</span>value<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">A</span><span style="color:#f92672">)</span>
  <span style="color:#66d9ef">def</span> update<span style="color:#f92672">(</span>old<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">A</span><span style="color:#f92672">,</span> `new`<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">A</span><span style="color:#f92672">)</span>
<span style="color:#f92672">}</span>

<span style="color:#66d9ef">case</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Person</span><span style="color:#f92672">(</span>name<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">String</span><span style="color:#f92672">,</span> age<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Int</span><span style="color:#f92672">,</span> hobbies<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">List</span><span style="color:#f92672">[</span><span style="color:#66d9ef">String</span><span style="color:#f92672">])</span>
<span style="color:#66d9ef">case</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Animal</span><span style="color:#f92672">(</span>name<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">String</span><span style="color:#f92672">,</span> color<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">String</span><span style="color:#f92672">,</span> owner<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Person</span><span style="color:#f92672">)</span>

<span style="color:#66d9ef">case</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">LocalDatabase</span><span style="color:#f92672">()</span> <span style="color:#66d9ef">extends</span> <span style="color:#a6e22e">Database</span><span style="color:#f92672">[</span><span style="color:#66d9ef">Person</span><span style="color:#f92672">]</span> <span style="color:#f92672">{</span>
  <span style="color:#66d9ef">override</span> <span style="color:#66d9ef">def</span> insert<span style="color:#f92672">(</span>value<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Person</span><span style="color:#f92672">)</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Unit</span> <span style="color:#f92672">=</span> <span style="color:#f92672">???</span>
  <span style="color:#66d9ef">override</span> <span style="color:#66d9ef">def</span> delete<span style="color:#f92672">(</span>value<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Person</span><span style="color:#f92672">)</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Unit</span> <span style="color:#f92672">=</span> <span style="color:#f92672">???</span>
  <span style="color:#66d9ef">override</span> <span style="color:#66d9ef">def</span> update<span style="color:#f92672">(</span>old<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Person</span><span style="color:#f92672">,</span> `new`<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Person</span><span style="color:#f92672">)</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Unit</span> <span style="color:#f92672">=</span> <span style="color:#f92672">???</span>
<span style="color:#f92672">}</span>

<span style="color:#66d9ef">case</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">MongoDB</span><span style="color:#f92672">()</span> <span style="color:#66d9ef">extends</span> <span style="color:#a6e22e">Database</span><span style="color:#f92672">[</span><span style="color:#66d9ef">Animal</span><span style="color:#f92672">]</span> <span style="color:#f92672">{</span>
  <span style="color:#66d9ef">override</span> <span style="color:#66d9ef">def</span> insert<span style="color:#f92672">(</span>value<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Animal</span><span style="color:#f92672">)</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Unit</span> <span style="color:#f92672">=</span> <span style="color:#f92672">???</span>
  <span style="color:#66d9ef">override</span> <span style="color:#66d9ef">def</span> delete<span style="color:#f92672">(</span>value<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Animal</span><span style="color:#f92672">)</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Unit</span> <span style="color:#f92672">=</span> <span style="color:#f92672">???</span>
  <span style="color:#66d9ef">override</span> <span style="color:#66d9ef">def</span> update<span style="color:#f92672">(</span>old<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Animal</span><span style="color:#f92672">,</span> `new`<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Animal</span><span style="color:#f92672">)</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Unit</span> <span style="color:#f92672">=</span> <span style="color:#f92672">???</span>
<span style="color:#f92672">}</span>

</code></pre></div><p>Another important benifit of using sealed traits is <code>exhausiveness checking</code>. During pattern matching, the compiler can check and make sure that the cases cover all the basis and that no case is left unhandeled.</p>
<p>Assume we were living in a world where only the following 3 shapes existed:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">
<span style="color:#66d9ef">sealed</span> <span style="color:#66d9ef">trait</span> <span style="color:#a6e22e">Shape</span>
<span style="color:#66d9ef">object</span> <span style="color:#a6e22e">Circle</span> <span style="color:#66d9ef">extends</span> <span style="color:#a6e22e">Shape</span>
<span style="color:#66d9ef">object</span> <span style="color:#a6e22e">Line</span> <span style="color:#66d9ef">extends</span> <span style="color:#a6e22e">Shape</span>
<span style="color:#66d9ef">object</span> <span style="color:#a6e22e">Rectangle</span> <span style="color:#66d9ef">extends</span> <span style="color:#a6e22e">Shape</span>

</code></pre></div><p>if we were to do a pattern matching on a function that returns a shape while omitting one case:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">
<span style="color:#66d9ef">sealed</span> <span style="color:#66d9ef">trait</span> <span style="color:#a6e22e">Shape</span>
<span style="color:#66d9ef">object</span> <span style="color:#a6e22e">Circle</span> <span style="color:#66d9ef">extends</span> <span style="color:#a6e22e">Shape</span>
<span style="color:#66d9ef">object</span> <span style="color:#a6e22e">Line</span> <span style="color:#66d9ef">extends</span> <span style="color:#a6e22e">Shape</span>
<span style="color:#66d9ef">object</span> <span style="color:#a6e22e">Rectangle</span> <span style="color:#66d9ef">extends</span> <span style="color:#a6e22e">Shape</span>

<span style="color:#66d9ef">object</span> <span style="color:#a6e22e">ShapeArea</span><span style="color:#f92672">{</span>
  <span style="color:#66d9ef">def</span> getType<span style="color:#f92672">(</span>value<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">String</span><span style="color:#f92672">)</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Shape</span> <span style="color:#f92672">=</span> <span style="color:#f92672">???</span>
  <span style="color:#66d9ef">val</span> name <span style="color:#66d9ef">=</span> <span style="color:#e6db74">&#34;Circle&#34;</span>
  getType<span style="color:#f92672">(</span>name<span style="color:#f92672">)</span> <span style="color:#66d9ef">match</span> <span style="color:#f92672">{</span>
    <span style="color:#66d9ef">case</span> <span style="color:#a6e22e">Circle</span> <span style="color:#66d9ef">=&gt;</span> <span style="color:#75715e">// do something
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">case</span> <span style="color:#a6e22e">Line</span>   <span style="color:#66d9ef">=&gt;</span> <span style="color:#75715e">// do something
</span><span style="color:#75715e"></span>  <span style="color:#f92672">}</span>
<span style="color:#f92672">}</span>
</code></pre></div><p>we would get the following warning:</p>
<p><code>Warning: match may not be exhaustive. It would fail on the following input: Rectangle</code></p>
]]></content>
        </item>
        
        <item>
            <title>For Comprehensions Demystified</title>
            <link>https://fares.codes/posts/for-comprehensions-demystified/</link>
            <pubDate>Mon, 29 Jul 2019 21:37:00 +0000</pubDate>
            
            <guid>https://fares.codes/posts/for-comprehensions-demystified/</guid>
            <description>A For Comprehension is a syntactic sugar for using a composition of map, flatMap and filter.
At first glance it might look complicated and difficult to comprehend. But once you get the hang of it, you&amp;rsquo;ll realise it&amp;rsquo;s a cool card to have up your sleeve, one that will surely make your code much more readable.
 Lets look at the below couple functions:
def computeA(a: Int): Either[Throwable, Int] = ?</description>
            <content type="html"><![CDATA[<p>A For Comprehension is a syntactic sugar for using a composition of map, flatMap and filter.</p>
<p>At first glance it might look complicated and difficult to comprehend. But once you get the hang of it, you&rsquo;ll realise it&rsquo;s a cool card to have up your sleeve, one that will surely make your code much more readable.</p>
<hr>
<p>Lets look at the below couple functions:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">
<span style="color:#66d9ef">def</span> computeA<span style="color:#f92672">(</span>a<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Int</span><span style="color:#f92672">)</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Either</span><span style="color:#f92672">[</span><span style="color:#66d9ef">Throwable</span>, <span style="color:#66d9ef">Int</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span> <span style="color:#f92672">???</span>
<span style="color:#66d9ef">def</span> computeB<span style="color:#f92672">(</span>b<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Int</span><span style="color:#f92672">)</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Either</span><span style="color:#f92672">[</span><span style="color:#66d9ef">Throwable</span>, <span style="color:#66d9ef">Int</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span> <span style="color:#f92672">???</span>
<span style="color:#66d9ef">def</span> computeC<span style="color:#f92672">(</span>c<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">String</span><span style="color:#f92672">)</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Either</span><span style="color:#f92672">[</span><span style="color:#66d9ef">Throwable</span>, <span style="color:#66d9ef">String</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span> <span style="color:#f92672">???</span>
<span style="color:#66d9ef">def</span> computeD<span style="color:#f92672">(</span>a<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Int</span><span style="color:#f92672">,</span> b<span style="color:#66d9ef">:</span><span style="color:#66d9ef">Int</span><span style="color:#f92672">,</span> c<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">String</span><span style="color:#f92672">)</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">String</span><span style="color:#f92672">=</span> <span style="color:#f92672">???</span>

</code></pre></div><p>The issue here is that computeA, computeB and computeC all  return an Either of Throwable or Something.</p>
<p>One way to deal with this would be to check the return value of each function, make sure it is a <code>Right(_)</code> else throw an error or something (<code>fold</code>? <code>getOrElse</code>? pattern matching?)&hellip;</p>
<p>But this quickly becomes cumbersome and annoying. it also makes the logic somewhat harder to follow.</p>
<p>So here comes For Comprehensions to the rescue.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">
<span style="color:#66d9ef">for</span> <span style="color:#f92672">{</span>
    a <span style="color:#66d9ef">&lt;-</span> computeA<span style="color:#f92672">(</span><span style="color:#ae81ff">1</span><span style="color:#f92672">)</span>
    b <span style="color:#66d9ef">&lt;-</span> computeB<span style="color:#f92672">(</span><span style="color:#ae81ff">2</span><span style="color:#f92672">)</span>
    c <span style="color:#66d9ef">&lt;-</span> computeC<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Hi&#34;</span><span style="color:#f92672">)</span>
<span style="color:#f92672">}</span> <span style="color:#66d9ef">yield</span> computeD<span style="color:#f92672">(</span>a<span style="color:#f92672">,</span>b<span style="color:#f92672">,</span> c<span style="color:#f92672">)</span>

</code></pre></div><p>so what does this mean exactly? when in doubt, use Intellij&rsquo;s desugar option.</p>
<p>the above code desugarized (is that a word?) is equivalent to the following code:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">computeA<span style="color:#f92672">(</span><span style="color:#ae81ff">1</span><span style="color:#f92672">).</span>flatMap<span style="color:#f92672">(</span>a <span style="color:#66d9ef">=&gt;</span>computeB<span style="color:#f92672">(</span><span style="color:#ae81ff">2</span><span style="color:#f92672">).</span>flatMap<span style="color:#f92672">(</span>b <span style="color:#66d9ef">=&gt;</span>computeC<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Hi&#34;</span><span style="color:#f92672">).</span>map<span style="color:#f92672">(</span>c <span style="color:#66d9ef">=&gt;</span>computeD<span style="color:#f92672">(</span>a<span style="color:#f92672">,</span> b<span style="color:#f92672">,</span> c<span style="color:#f92672">))))</span>
</code></pre></div><p>Of the two, I&rsquo;m sure we&rsquo;d all prefer reading / writing the first format&hellip; It is more concise, readable and hence less prone to errors.</p>
<hr>
<p>Here is a good article on For Comprehensions in Scala official docs: <a href="https://docs.scala-lang.org/tutorials/FAQ/yield.html" title="Translating for-comprehensions">Translating for-comprehensions</a></p>
<p>it basically says that for without the yield translates into a chain of foreach.</p>
<p>for with yield translates into a chain of flatMap followed by a map.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#66d9ef">for</span><span style="color:#f92672">(</span>x <span style="color:#66d9ef">&lt;-</span> c1<span style="color:#f92672">;</span> y <span style="color:#66d9ef">&lt;-</span> c2<span style="color:#f92672">;</span> z <span style="color:#66d9ef">&lt;-</span> c3<span style="color:#f92672">)</span> <span style="color:#66d9ef">yield</span> <span style="color:#f92672">{...}</span>
<span style="color:#75715e">//translates to
</span><span style="color:#75715e"></span>c1<span style="color:#f92672">.</span>flatMap<span style="color:#f92672">(</span>x <span style="color:#66d9ef">=&gt;</span> c2<span style="color:#f92672">.</span>flatMap<span style="color:#f92672">(</span>y <span style="color:#66d9ef">=&gt;</span> c3<span style="color:#f92672">.</span>map<span style="color:#f92672">(</span>z <span style="color:#66d9ef">=&gt;</span> <span style="color:#f92672">{...})))</span>
</code></pre></div><p>Using for with an if condition translates into a <code>.wihFilter</code> and as a fallback of <code>filter</code> if the method <code>wihFilter</code> is not available.</p>
<p><em>One important note</em> however, your methods have to have the same return type. in this case <code>Either[A,B]</code></p>
<p>You cannot mix an Either return type with an Option return type.</p>
<p>For Options, it is less of a problem since many methods exists to transform Either to Option and vice versa (example <code>.toOption</code>, <code>.toRight</code></p>
<p><em>Another important note</em>, you could also use assignment inside the for comprehension. you also do not need to add the key word val or var ( though I dont see why you should&hellip;). All assignments inside the for are vals.</p>
<p><em>third note (getting out of hand no?):</em> When we first said for comprehensions are a sequence of <code>flatMap</code> and <code>filter</code> followed by a <code>map</code>, it is important to know that it is actually the yield that calls the map.</p>
]]></content>
        </item>
        
    </channel>
</rss>
