<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Learning Publicly</title>
        <link>https://fares.codes/posts/</link>
        <description>Recent content in Posts on Learning Publicly</description>
        <generator>Hugo -- gohugo.io</generator>
        <lastBuildDate>Fri, 03 Apr 2020 10:00:00 +0000</lastBuildDate>
        <atom:link href="https://fares.codes/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Cats Chain</title>
            <link>https://fares.codes/posts/cats-chain/</link>
            <pubDate>Fri, 03 Apr 2020 10:00:00 +0000</pubDate>
            
            <guid>https://fares.codes/posts/cats-chain/</guid>
            <description>In previous articles, I&amp;rsquo;ve talked about accumulating errors with Validated, and for that we said that we needed a Semigroup on the left side that will be used to accumulate the errors (We used a NonEmptyList[A] as an example). Today well talk about Chain and NonEmptyChain[A] and how it&amp;rsquo;s different from a List.
Appending to a List requires iterating over the entire collection (linear time). So using ValidatedNel[A,B] will make us incur a heavy performance penalty specially if we traverse it.</description>
            <content type="html"><![CDATA[<p>In previous articles, I&rsquo;ve talked about accumulating errors with Validated, and for that we said that we needed a <code>Semigroup</code> on the left side that will be used to accumulate the errors (We used a <code>NonEmptyList[A]</code> as an example). Today well talk about <code>Chain</code> and <code>NonEmptyChain[A]</code> and how it&rsquo;s different from a List.</p>
<p>Appending to a <code>List</code> requires iterating over the entire collection (linear time). So using <code>ValidatedNel[A,B]</code> will make us incur a heavy performance penalty specially if we <code>traverse</code> it.</p>
<p>In comes <code>Chain</code>. Chain is very similar to List, but supports O(1) time append and prepend. This makes it a much better fit to use with <code>Validated</code>, <code>Ior</code> or <code>Writer</code> (article on this pretty soon).</p>
<p>Cats also offers type aliases like <code>ValidatedNec</code> or <code>IorNec</code> as well as helper functions like <code>groupByNec</code> or <code>Validated.invalidNec</code>.</p>
<p>Here are some benchmarks from the typelevel cats documentation <a href="https://typelevel.org/cats/datatypes/chain.html">https://typelevel.org/cats/datatypes/chain.html</a>:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">[info] Benchmark                                  Mode  Cnt   Score   Error  Units
[info] CollectionMonoidBench.accumulateChain     thrpt   20  51.911 ± 7.453  ops/s
[info] CollectionMonoidBench.accumulateList      thrpt   20   6.973 ± 0.781  ops/s
[info] CollectionMonoidBench.accumulateVector    thrpt   20   6.304 ± 0.129  ops/s
</code></pre></div><p>and some function calls:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">[info] Benchmark                           Mode  Cnt          Score         Error  Units
[info] ChainBench.foldLeftLargeChain      thrpt   20        117.267 ±       1.815  ops/s
[info] ChainBench.foldLeftLargeList       thrpt   20        135.954 ±       3.340  ops/s
[info] ChainBench.foldLeftLargeVector     thrpt   20         61.613 ±       1.326  ops/s
[info]
[info] ChainBench.mapLargeChain           thrpt   20         59.379 ±       0.866  ops/s
[info] ChainBench.mapLargeList            thrpt   20         66.729 ±       7.165  ops/s
[info] ChainBench.mapLargeVector          thrpt   20         61.374 ±       2.004  ops/s
</code></pre></div><h2 id="nonemptychain">NonEmptyChain</h2>
<p>Similarly to <code>NonEmptyList</code> NonEmptyChain has a semigroup but not a monoid (obviously 😛).</p>
<p>Cats doc shows a couple examples on how to create them or transform NonEmptyList into a NonEmptyChain:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">
<span style="color:#66d9ef">import</span> cats.data._
<span style="color:#75715e">// import cats.data._
</span><span style="color:#75715e"></span>
<span style="color:#a6e22e">NonEmptyChain</span><span style="color:#f92672">(</span><span style="color:#ae81ff">1</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">2</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">3</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">4</span><span style="color:#f92672">)</span>
<span style="color:#75715e">// res0: cats.data.NonEmptyChain[Int] = Chain(1, 2, 3, 4)
</span><span style="color:#75715e"></span>
<span style="color:#a6e22e">NonEmptyChain</span><span style="color:#f92672">.</span>fromNonEmptyList<span style="color:#f92672">(</span><span style="color:#a6e22e">NonEmptyList</span><span style="color:#f92672">(</span><span style="color:#ae81ff">1</span><span style="color:#f92672">,</span> <span style="color:#a6e22e">List</span><span style="color:#f92672">(</span><span style="color:#ae81ff">2</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">3</span><span style="color:#f92672">)))</span>
<span style="color:#75715e">// res1: cats.data.NonEmptyChain[Int] = Chain(1, 2, 3)
</span><span style="color:#75715e"></span>
<span style="color:#a6e22e">NonEmptyChain</span><span style="color:#f92672">.</span>fromNonEmptyVector<span style="color:#f92672">(</span><span style="color:#a6e22e">NonEmptyVector</span><span style="color:#f92672">(</span><span style="color:#ae81ff">1</span><span style="color:#f92672">,</span> <span style="color:#a6e22e">Vector</span><span style="color:#f92672">(</span><span style="color:#ae81ff">2</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">3</span><span style="color:#f92672">)))</span>
<span style="color:#75715e">// res2: cats.data.NonEmptyChain[Int] = Chain(1, 2, 3)
</span><span style="color:#75715e"></span>
<span style="color:#a6e22e">NonEmptyChain</span><span style="color:#f92672">.</span>one<span style="color:#f92672">(</span><span style="color:#ae81ff">1</span><span style="color:#f92672">)</span>
<span style="color:#75715e">// res3: cats.data.NonEmptyChain[Int] = Chain(1)
</span><span style="color:#75715e"></span>
</code></pre></div><h2 id="what-the-documentation-doesnt-say-about-chain">What the documentation doesn&rsquo;t say about Chain</h2>
<p>Given the information above, one might think that any code where <code>List</code> exists, could benefit from replacing that list with a <code>Chain</code>. But after further reading, I realized it wasn&rsquo;t always the case, and that sometimes using a Chain instead of a List could negatively impact performance. Heres why:</p>
]]></content>
        </item>
        
        <item>
            <title>Cond in Scala</title>
            <link>https://fares.codes/posts/cond-in-scala/</link>
            <pubDate>Tue, 31 Mar 2020 01:00:00 +0000</pubDate>
            
            <guid>https://fares.codes/posts/cond-in-scala/</guid>
            <description>This is probably one of the simplest articles I&amp;rsquo;ve written&amp;hellip; except for the About section of this site&amp;hellip;
The reason I&amp;rsquo;m writing it is because I recently discovered a simple yet very useful function that facilitates the construction of an Either monad or a Validated monad.
This function is called cond probably short for condition. Ans here is how it works:
import cats.data.Validated def someFunction: Boolean = ??? val either: Either[String, String] = Either.</description>
            <content type="html"><![CDATA[<p>This is probably one of the simplest articles I&rsquo;ve written&hellip; except for the About section of this site&hellip;</p>
<p>The reason I&rsquo;m writing it is because I recently discovered a simple yet very useful function that facilitates the construction of an <code>Either</code> monad or a <code>Validated</code> monad.</p>
<p>This function is called <code>cond</code> probably short for condition. Ans here is how it works:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">
  <span style="color:#66d9ef">import</span> cats.data.Validated

  <span style="color:#66d9ef">def</span> someFunction<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Boolean</span> <span style="color:#f92672">=</span> <span style="color:#f92672">???</span>

  <span style="color:#66d9ef">val</span> either<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Either</span><span style="color:#f92672">[</span><span style="color:#66d9ef">String</span>, <span style="color:#66d9ef">String</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">Either</span><span style="color:#f92672">.</span>cond<span style="color:#f92672">(</span>someFunction<span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;OK&#34;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;ERROR&#34;</span><span style="color:#f92672">)</span>

  <span style="color:#66d9ef">val</span> validated<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Validated</span><span style="color:#f92672">[</span><span style="color:#66d9ef">String</span>, <span style="color:#66d9ef">String</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span>
    <span style="color:#a6e22e">Validated</span><span style="color:#f92672">.</span>cond<span style="color:#f92672">(</span>someFunction<span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;OK&#34;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;ERROR&#34;</span><span style="color:#f92672">)</span>
</code></pre></div><p>So if a certain condition evaluates to true, a right side will be created with the given value. otherwise a left side will be created with the given left value.</p>
<p>It might not be useful all the time since in most cases, the right and left value are calculated from the function doing the validation, but they have their moments 😛 (hint: I could have used them in my previous article about validated!)</p>
]]></content>
        </item>
        
        <item>
            <title>Validated(Nel) for Validation</title>
            <link>https://fares.codes/posts/validatednel-for-validation/</link>
            <pubDate>Mon, 30 Mar 2020 01:00:00 +0000</pubDate>
            
            <guid>https://fares.codes/posts/validatednel-for-validation/</guid>
            <description>Week two of being stuck at home due to the Corona-virus confinement. I&amp;rsquo;m writing this article because I desperately need to feel like I&amp;rsquo;ve accomplished ONE productive thing this weekend. On a side note, I&amp;rsquo;ve recently taken up cooking and managed to completely botch a recipe that was considered kids friendly&amp;hellip; So yea those are my life updates&amp;hellip;
I will begin my explanation of Validated by explaining something else entirely&amp;hellip;</description>
            <content type="html"><![CDATA[<p>Week two of being stuck at home due to the Corona-virus confinement. I&rsquo;m writing this article because I desperately need to feel like I&rsquo;ve accomplished ONE productive thing this weekend.
On a side note, I&rsquo;ve recently taken up cooking and managed to completely botch a recipe that was considered kids friendly&hellip; So yea those are my life updates&hellip;</p>
<p>I will begin my explanation of Validated by explaining something else entirely&hellip;</p>
<h2 id="either-monad">Either Monad</h2>
<p><code>Either[A,B]</code> is pretty simple to understand. As its name and signature suggest: its Either a value of type A or its a value of type B.
Either also allows us to chain computations.</p>
<p>Assume we wanted to validate that the values for a type <code>Person</code> are indeed valid, our model would be something like this:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">
<span style="color:#66d9ef">import</span> cats.Show
<span style="color:#66d9ef">import</span> com.validatedPost.PersonError._

<span style="color:#66d9ef">final</span> <span style="color:#66d9ef">case</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Person</span><span style="color:#f92672">(</span><span style="color:#66d9ef">private</span> <span style="color:#66d9ef">val</span> firstName<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">String</span><span style="color:#f92672">,</span>
                        <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">val</span> lastName<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">String</span><span style="color:#f92672">,</span>
                        <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">val</span> age<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Int</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
  <span style="color:#66d9ef">def</span> validateFirstName<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Either</span><span style="color:#f92672">[</span><span style="color:#66d9ef">PersonError</span>, <span style="color:#66d9ef">String</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span>
    <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>firstName<span style="color:#f92672">.</span>nonEmpty<span style="color:#f92672">)</span> <span style="color:#a6e22e">Right</span><span style="color:#f92672">(</span>firstName<span style="color:#f92672">)</span> <span style="color:#66d9ef">else</span> <span style="color:#a6e22e">Left</span><span style="color:#f92672">(</span><span style="color:#a6e22e">FirstNameError</span><span style="color:#f92672">)</span>
  <span style="color:#66d9ef">def</span> validateLastName<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Either</span><span style="color:#f92672">[</span><span style="color:#66d9ef">PersonError</span>, <span style="color:#66d9ef">String</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span>
    <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>lastName<span style="color:#f92672">.</span>nonEmpty<span style="color:#f92672">)</span> <span style="color:#a6e22e">Right</span><span style="color:#f92672">(</span>lastName<span style="color:#f92672">)</span> <span style="color:#66d9ef">else</span> <span style="color:#a6e22e">Left</span><span style="color:#f92672">(</span><span style="color:#a6e22e">LastNameError</span><span style="color:#f92672">)</span>
  <span style="color:#66d9ef">def</span> validateAge<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Either</span><span style="color:#f92672">[</span><span style="color:#66d9ef">PersonError</span>, <span style="color:#66d9ef">Int</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span>
    <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>age <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">18</span><span style="color:#f92672">)</span> <span style="color:#a6e22e">Right</span><span style="color:#f92672">(</span>age<span style="color:#f92672">)</span> <span style="color:#66d9ef">else</span> <span style="color:#a6e22e">Left</span><span style="color:#f92672">(</span><span style="color:#a6e22e">AgeError</span><span style="color:#f92672">)</span>
<span style="color:#f92672">}</span>
<span style="color:#66d9ef">object</span> <span style="color:#a6e22e">Person</span> <span style="color:#f92672">{</span>
  <span style="color:#66d9ef">implicit</span> <span style="color:#66d9ef">val</span> showPersonError<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Show</span><span style="color:#f92672">[</span><span style="color:#66d9ef">Person</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">Show</span><span style="color:#f92672">.</span>show<span style="color:#f92672">(</span> person <span style="color:#66d9ef">=&gt;</span>
    <span style="color:#e6db74">s&#34;&#34;&#34;
</span><span style="color:#e6db74">      |First Name: </span><span style="color:#e6db74">${</span>person<span style="color:#f92672">.</span>firstName<span style="color:#e6db74">}</span><span style="color:#e6db74">
</span><span style="color:#e6db74">      |Last Name: </span><span style="color:#e6db74">${</span>person<span style="color:#f92672">.</span>lastName<span style="color:#e6db74">}</span><span style="color:#e6db74">
</span><span style="color:#e6db74">      |Age: </span><span style="color:#e6db74">${</span>person<span style="color:#f92672">.</span>age<span style="color:#e6db74">}</span><span style="color:#e6db74">
</span><span style="color:#e6db74">      |&#34;&#34;&#34;</span><span style="color:#f92672">.</span>stripMargin<span style="color:#f92672">)</span>
<span style="color:#f92672">}</span>

<span style="color:#66d9ef">sealed</span> <span style="color:#66d9ef">abstract</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">PersonError</span> <span style="color:#66d9ef">extends</span> <span style="color:#a6e22e">Product</span> <span style="color:#66d9ef">with</span> <span style="color:#a6e22e">Serializable</span>

<span style="color:#66d9ef">object</span> <span style="color:#a6e22e">PersonError</span> <span style="color:#f92672">{</span>

  <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">case</span> <span style="color:#66d9ef">object</span> <span style="color:#a6e22e">FirstNameError</span> <span style="color:#66d9ef">extends</span> <span style="color:#a6e22e">PersonError</span>
  <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">case</span> <span style="color:#66d9ef">object</span> <span style="color:#a6e22e">LastNameError</span> <span style="color:#66d9ef">extends</span> <span style="color:#a6e22e">PersonError</span>
  <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">case</span> <span style="color:#66d9ef">object</span> <span style="color:#a6e22e">AgeError</span> <span style="color:#66d9ef">extends</span> <span style="color:#a6e22e">PersonError</span>

  <span style="color:#66d9ef">implicit</span> <span style="color:#66d9ef">val</span> showPersonError<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Show</span><span style="color:#f92672">[</span><span style="color:#66d9ef">PersonError</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">Show</span><span style="color:#f92672">.</span>show <span style="color:#f92672">{</span>
    <span style="color:#66d9ef">case</span> <span style="color:#a6e22e">FirstNameError</span> <span style="color:#66d9ef">=&gt;</span> <span style="color:#e6db74">&#34;There was an issue with the given first name&#34;</span>
    <span style="color:#66d9ef">case</span> <span style="color:#a6e22e">LastNameError</span>  <span style="color:#66d9ef">=&gt;</span> <span style="color:#e6db74">&#34;There was an issue with the given last name&#34;</span>
    <span style="color:#66d9ef">case</span> <span style="color:#a6e22e">AgeError</span>       <span style="color:#66d9ef">=&gt;</span> <span style="color:#e6db74">&#34;Age is not 18 or above&#34;</span>
  <span style="color:#f92672">}</span>
<span style="color:#f92672">}</span>

</code></pre></div><p>And we&rsquo;d be able to chain all three validations with the helpful <code>For Comprehensions</code> or simple <code>maps + flatMaps</code>:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">
  <span style="color:#66d9ef">import</span> cats.syntax.either._
  <span style="color:#66d9ef">import</span> com.validatedPost.PersonError._

  <span style="color:#66d9ef">val</span> person1 <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">Person</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Fares&#34;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;Ismail&#34;</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">23</span><span style="color:#f92672">)</span>

  <span style="color:#66d9ef">def</span> validatePerson<span style="color:#f92672">(</span>person<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Person</span><span style="color:#f92672">)</span> <span style="color:#66d9ef">=</span> <span style="color:#f92672">{</span>
    <span style="color:#66d9ef">for</span> <span style="color:#f92672">{</span>
      vFirstName <span style="color:#66d9ef">&lt;-</span> person<span style="color:#f92672">.</span>validateFirstName
      vLastName <span style="color:#66d9ef">&lt;-</span> person<span style="color:#f92672">.</span>validateLastName
      vAge <span style="color:#66d9ef">&lt;-</span> person<span style="color:#f92672">.</span>validateAge
    <span style="color:#f92672">}</span> <span style="color:#66d9ef">yield</span> <span style="color:#a6e22e">Person</span><span style="color:#f92672">(</span>vFirstName<span style="color:#f92672">,</span> vLastName<span style="color:#f92672">,</span> vAge<span style="color:#f92672">)</span>
  <span style="color:#f92672">}</span>
  <span style="color:#66d9ef">val</span> res<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Either</span><span style="color:#f92672">[</span><span style="color:#66d9ef">PersonError</span>, <span style="color:#66d9ef">Person</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span> validatePerson<span style="color:#f92672">(</span>person1<span style="color:#f92672">)</span>

  println<span style="color:#f92672">(</span>res<span style="color:#f92672">.</span>show<span style="color:#f92672">)</span>

</code></pre></div><p>This will output:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">
Right(
First Name: Fares
Last Name: Ismail
Age: 23
)

</code></pre></div><p>But what if the person instance had a few errors?</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">  <span style="color:#66d9ef">val</span> person2 <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">Person</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Fares&#34;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;&#34;</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">23</span><span style="color:#f92672">)</span>
  println<span style="color:#f92672">(</span>validatePerson<span style="color:#f92672">(</span>person2<span style="color:#f92672">).</span>show<span style="color:#f92672">)</span> <span style="color:#75715e">// Left(There was an issue with the given last name)
</span><span style="color:#75715e"></span>
</code></pre></div><p>Ok&hellip; so far so good. But what if there were multiple errors?</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">
  <span style="color:#66d9ef">val</span> person3 <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">Person</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;&#34;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;&#34;</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">10</span><span style="color:#f92672">)</span>
  println<span style="color:#f92672">(</span>validatePerson<span style="color:#f92672">(</span>person3<span style="color:#f92672">).</span>show<span style="color:#f92672">)</span> <span style="color:#75715e">//Left(There was an issue with the given first name)
</span><span style="color:#75715e"></span>
</code></pre></div><p>It outputs the first error only. ideally we would have liked the errors to be accumulated.</p>
<p>The reason it does this is because <code>Either</code> is fail fast. It will exit the for comprehension at the first <code>Left</code> it encounters.</p>
<h2 id="validated-for-error-accumulation">Validated For Error Accumulation</h2>
<p>If I talked about Either in an article about validated, its clearly not by coincidence.</p>
<p>While either is fail fast, <code>Validated</code> will allow us to accumulate the errors on the left side. We&rsquo;ve touched on this briefly in previous articles (including <code>Cats Ior</code> which accumulated warnings), but lets go over it again with <code>Validated</code></p>
<p>For that, well need to change our validation functions to return a <code>Validated</code></p>
<p>Validate has the following signature:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">
<span style="color:#66d9ef">sealed</span> <span style="color:#66d9ef">abstract</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Validated</span><span style="color:#f92672">[</span><span style="color:#66d9ef">+E</span>, <span style="color:#66d9ef">+A</span><span style="color:#f92672">]</span> <span style="color:#a6e22e">extends</span> <span style="color:#a6e22e">Product</span> <span style="color:#66d9ef">with</span> <span style="color:#a6e22e">Serializable</span> <span style="color:#f92672">{</span>
  <span style="color:#75715e">// Implementation elided
</span><span style="color:#75715e"></span><span style="color:#f92672">}</span>

<span style="color:#66d9ef">final</span> <span style="color:#66d9ef">case</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Valid</span><span style="color:#f92672">[</span><span style="color:#66d9ef">+A</span><span style="color:#f92672">](</span>a<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">A</span><span style="color:#f92672">)</span> <span style="color:#66d9ef">extends</span> <span style="color:#a6e22e">Validated</span><span style="color:#f92672">[</span><span style="color:#66d9ef">Nothing</span>, <span style="color:#66d9ef">A</span><span style="color:#f92672">]</span>
<span style="color:#66d9ef">final</span> <span style="color:#66d9ef">case</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Invalid</span><span style="color:#f92672">[</span><span style="color:#66d9ef">+E</span><span style="color:#f92672">](</span>e<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">E</span><span style="color:#f92672">)</span> <span style="color:#66d9ef">extends</span> <span style="color:#a6e22e">Validated</span><span style="color:#f92672">[</span><span style="color:#66d9ef">E</span>, <span style="color:#66d9ef">Nothing</span><span style="color:#f92672">]</span>

</code></pre></div><p>In our case, its going to be a <code>Validated[NonEmptyList[PersonError], Person]</code></p>
<p>The <code>NonEmptyList</code> is used to accumulate the possible errors since we can have more than one.</p>
<p>Conveniently, we have a type alias called <code>ValidatedNel[A,B]</code> that is short for <code>Validated[NoneEmptyList[A], B]</code></p>
<p>Person will look like this:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">
<span style="color:#66d9ef">import</span> cats.Show
<span style="color:#66d9ef">import</span> cats.data.<span style="color:#f92672">{</span><span style="color:#a6e22e">Validated</span><span style="color:#f92672">,</span> <span style="color:#a6e22e">ValidatedNel</span><span style="color:#f92672">}</span>
<span style="color:#66d9ef">import</span> cats.syntax.validated._
<span style="color:#66d9ef">import</span> com.validatedPost.PersonError._

<span style="color:#66d9ef">final</span> <span style="color:#66d9ef">case</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Person</span><span style="color:#f92672">(</span><span style="color:#66d9ef">private</span> <span style="color:#66d9ef">val</span> firstName<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">String</span><span style="color:#f92672">,</span>
                        <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">val</span> lastName<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">String</span><span style="color:#f92672">,</span>
                        <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">val</span> age<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Int</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
  <span style="color:#66d9ef">def</span> validateFirstName<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">ValidatedNel</span><span style="color:#f92672">[</span><span style="color:#66d9ef">PersonError</span>, <span style="color:#66d9ef">String</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span>
    <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>firstName<span style="color:#f92672">.</span>nonEmpty<span style="color:#f92672">)</span> firstName<span style="color:#f92672">.</span>validNel <span style="color:#66d9ef">else</span> <span style="color:#a6e22e">FirstNameError</span><span style="color:#f92672">.</span>invalidNel
  <span style="color:#66d9ef">def</span> validateLastName<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">ValidatedNel</span><span style="color:#f92672">[</span><span style="color:#66d9ef">PersonError</span>, <span style="color:#66d9ef">String</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span>
    <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>lastName<span style="color:#f92672">.</span>nonEmpty<span style="color:#f92672">)</span> lastName<span style="color:#f92672">.</span>validNel <span style="color:#66d9ef">else</span> <span style="color:#a6e22e">LastNameError</span><span style="color:#f92672">.</span>invalidNel
  <span style="color:#66d9ef">def</span> validateAge<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">ValidatedNel</span><span style="color:#f92672">[</span><span style="color:#66d9ef">PersonError</span>, <span style="color:#66d9ef">Int</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span>
    <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>age <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">18</span><span style="color:#f92672">)</span> age<span style="color:#f92672">.</span>validNel <span style="color:#66d9ef">else</span> <span style="color:#a6e22e">AgeError</span><span style="color:#f92672">.</span>invalidNel
<span style="color:#f92672">}</span>
<span style="color:#66d9ef">object</span> <span style="color:#a6e22e">Person</span> <span style="color:#f92672">{</span>
  <span style="color:#66d9ef">implicit</span> <span style="color:#66d9ef">val</span> showPersonError<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Show</span><span style="color:#f92672">[</span><span style="color:#66d9ef">Person</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">Show</span><span style="color:#f92672">.</span>show<span style="color:#f92672">(</span>person <span style="color:#66d9ef">=&gt;</span> <span style="color:#e6db74">s&#34;&#34;&#34;
</span><span style="color:#e6db74">      |First Name: </span><span style="color:#e6db74">${</span>person<span style="color:#f92672">.</span>firstName<span style="color:#e6db74">}</span><span style="color:#e6db74">
</span><span style="color:#e6db74">      |Last Name: </span><span style="color:#e6db74">${</span>person<span style="color:#f92672">.</span>lastName<span style="color:#e6db74">}</span><span style="color:#e6db74">
</span><span style="color:#e6db74">      |Age: </span><span style="color:#e6db74">${</span>person<span style="color:#f92672">.</span>age<span style="color:#e6db74">}</span><span style="color:#e6db74">
</span><span style="color:#e6db74">      |&#34;&#34;&#34;</span><span style="color:#f92672">.</span>stripMargin<span style="color:#f92672">)</span>
<span style="color:#f92672">}</span>

</code></pre></div><p>and our function calls:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">
  <span style="color:#66d9ef">val</span> person3 <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">Person</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;&#34;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;&#34;</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">10</span><span style="color:#f92672">)</span>

  <span style="color:#66d9ef">import</span> cats.data.NonEmptyList._
  <span style="color:#66d9ef">import</span> cats.syntax.apply._
  <span style="color:#66d9ef">import</span> cats.data.ValidatedNel

  <span style="color:#66d9ef">val</span> res<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">ValidatedNel</span><span style="color:#f92672">[</span><span style="color:#66d9ef">PersonError</span>, <span style="color:#66d9ef">Person</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span>
    <span style="color:#f92672">(</span>person3<span style="color:#f92672">.</span>validateFirstName<span style="color:#f92672">,</span> person3<span style="color:#f92672">.</span>validateLastName<span style="color:#f92672">,</span> person3<span style="color:#f92672">.</span>validateAge<span style="color:#f92672">)</span>
      <span style="color:#f92672">.</span>mapN<span style="color:#f92672">((</span>first<span style="color:#f92672">,</span> last<span style="color:#f92672">,</span> age<span style="color:#f92672">)</span> <span style="color:#66d9ef">=&gt;</span> <span style="color:#a6e22e">Person</span><span style="color:#f92672">(</span>first<span style="color:#f92672">,</span> last<span style="color:#f92672">,</span> age<span style="color:#f92672">))</span>

  println<span style="color:#f92672">(</span>res<span style="color:#f92672">.</span>show<span style="color:#f92672">)</span> <span style="color:#75715e">//Invalid(NonEmptyList(There was an issue with the given first name, There was an issue with the given last name, Age is not 18 or above))
</span><span style="color:#75715e"></span>
</code></pre></div><p>Note that depending on your version of cats, this can either be a <code>.mapN</code> or <code>.map3</code> and so on (replace N by the appropriate number)</p>
<p>We notice that the return of the validation function is all the errors accumulated in the NonEmptyList.</p>
<p>Also note that for this to work we need an implicit Semigroup in the scope for the left side. This is because <code>Validated</code> will use it to combine the error on the left.</p>
<p>Finally, if we wanted to use <code>Validated</code> in a fail fast manner, we still can by calling <code>.andThen</code></p>
]]></content>
        </item>
        
        <item>
            <title>Cats Ior</title>
            <link>https://fares.codes/posts/cats-ior/</link>
            <pubDate>Sat, 21 Mar 2020 10:00:00 +0000</pubDate>
            
            <guid>https://fares.codes/posts/cats-ior/</guid>
            <description>If you&amp;rsquo;ve gotten this far reading my blog, you&amp;rsquo;re probably very familiar with Either. Of course Im also assuming someone is reading this blog in the first place 😛
Anyway, Either[A,B] allows us to return either an A or a B depending on some conditions&amp;hellip; In other words, its a XOR (exclusive or) A value can either be A or it can be B but it cannot be both.
You probably see where this is going, IOR is a cats datatype that stands for Inclusive Or.</description>
            <content type="html"><![CDATA[<p>If you&rsquo;ve gotten this far reading my blog, you&rsquo;re probably very familiar with <code>Either</code>. Of course Im also assuming someone is reading this blog in the first place 😛</p>
<p>Anyway, <code>Either[A,B]</code> allows us to return either an <code>A</code> or a <code>B</code> depending on some conditions&hellip; In other words, its a XOR (exclusive or) A value can either be A or it can be B but it cannot be both.</p>
<p>You probably see where this is going, <code>IOR</code> is a cats datatype that stands for Inclusive Or. In other words, <code>Ior[A,B]</code> can either be <code>A</code> or it can be <code>B</code> or it can be <code>Both A and B</code>.</p>
<p>Another syntax for defining an Ior is: <code>A Ior B</code></p>
<p>Ior is often used when we want to handle errors and correct values as well as correct values but wth a warning.</p>
<h2 id="examples">Examples</h2>
<p>Here is an example using IOR:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">
  <span style="color:#66d9ef">import</span> cats.data.Ior

  <span style="color:#66d9ef">val</span> right<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Ior</span><span style="color:#f92672">[</span><span style="color:#66d9ef">String</span>, <span style="color:#66d9ef">Int</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">Ior</span><span style="color:#f92672">.</span>right<span style="color:#f92672">[</span><span style="color:#66d9ef">String</span>, <span style="color:#66d9ef">Int</span><span style="color:#f92672">](</span><span style="color:#ae81ff">3</span><span style="color:#f92672">)</span>
  <span style="color:#66d9ef">val</span> left<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Ior</span><span style="color:#f92672">[</span><span style="color:#66d9ef">String</span>, <span style="color:#66d9ef">Int</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">Ior</span><span style="color:#f92672">.</span>left<span style="color:#f92672">[</span><span style="color:#66d9ef">String</span>, <span style="color:#66d9ef">Int</span><span style="color:#f92672">](</span><span style="color:#e6db74">&#34;Error&#34;</span><span style="color:#f92672">)</span>
  <span style="color:#66d9ef">val</span> both<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Ior</span><span style="color:#f92672">[</span><span style="color:#66d9ef">String</span>, <span style="color:#66d9ef">Int</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">Ior</span><span style="color:#f92672">.</span>both<span style="color:#f92672">[</span><span style="color:#66d9ef">String</span>, <span style="color:#66d9ef">Int</span><span style="color:#f92672">](</span><span style="color:#e6db74">&#34;Warning&#34;</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">0</span><span style="color:#f92672">)</span>

</code></pre></div><p>Of course things can be made to look nicer when using the cats syntax:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">
  <span style="color:#66d9ef">import</span> cats.syntax.ior._

  <span style="color:#66d9ef">val</span> x<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Ior</span><span style="color:#f92672">[</span><span style="color:#66d9ef">String</span>, <span style="color:#66d9ef">Nothing</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span> <span style="color:#e6db74">&#34;NOPE&#34;</span><span style="color:#f92672">.</span>leftIor
  <span style="color:#75715e">// Or
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">val</span> z<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Ior</span><span style="color:#f92672">[</span><span style="color:#66d9ef">String</span>, <span style="color:#66d9ef">Int</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span> <span style="color:#e6db74">&#34;Better Nope&#34;</span><span style="color:#f92672">.</span>leftIor<span style="color:#f92672">[</span><span style="color:#66d9ef">Int</span><span style="color:#f92672">]</span>

</code></pre></div><h2 id="accumulating-errors">Accumulating Errors</h2>
<p>Another benefit of Ior is its ability to accumulate errors on the left side. Similar to Cats Validated (Will be discussed in a later article)</p>
<h3 id="how-does-it-work">How does it work</h3>
<p>Ior will accumulate warnings on the left side but will short circuit the computations as soon as it encounters a left only value.
Lets look at an example for a clearer image.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">
  <span style="color:#66d9ef">import</span> cats.data.Ior
  <span style="color:#66d9ef">import</span> cats.syntax.ior._
  <span style="color:#66d9ef">import</span> cats.data.<span style="color:#f92672">{</span><span style="color:#a6e22e">NonEmptyList</span> <span style="color:#66d9ef">=&gt;</span> <span style="color:#a6e22e">Nel</span><span style="color:#f92672">}</span>
  <span style="color:#66d9ef">type</span> <span style="color:#66d9ef">Failures</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">Nel</span><span style="color:#f92672">[</span><span style="color:#66d9ef">String</span><span style="color:#f92672">]</span>

  <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">case</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">UserName</span><span style="color:#f92672">(</span><span style="color:#66d9ef">private</span> <span style="color:#66d9ef">val</span> name<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">String</span><span style="color:#f92672">)</span> <span style="color:#66d9ef">extends</span> <span style="color:#a6e22e">AnyVal</span> <span style="color:#f92672">{</span>
    <span style="color:#66d9ef">def</span> validateUserName<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Failures</span> <span style="color:#66d9ef">Ior</span> <span style="color:#66d9ef">UserName</span> <span style="color:#f92672">=</span> <span style="color:#f92672">{</span>

      <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>name<span style="color:#f92672">.</span>isEmpty<span style="color:#f92672">)</span> <span style="color:#a6e22e">Nel</span><span style="color:#f92672">.</span>one<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Error, Username cannot be empty&#34;</span><span style="color:#f92672">).</span>leftIor
      <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>name <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;admin&#34;</span><span style="color:#f92672">)</span>
        <span style="color:#a6e22e">Ior</span><span style="color:#f92672">.</span>both<span style="color:#f92672">(</span>
          <span style="color:#a6e22e">Nel</span><span style="color:#f92672">.</span>one<span style="color:#f92672">(</span>
            <span style="color:#e6db74">&#34;In the future, protected words will no longer be considered valid&#34;</span><span style="color:#f92672">),</span>
          <span style="color:#a6e22e">UserName</span><span style="color:#f92672">(</span>name<span style="color:#f92672">))</span>
      <span style="color:#66d9ef">else</span> <span style="color:#a6e22e">UserName</span><span style="color:#f92672">(</span>name<span style="color:#f92672">).</span>rightIor
    <span style="color:#f92672">}</span>
  <span style="color:#f92672">}</span>

  <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">case</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">UserPassword</span><span style="color:#f92672">(</span><span style="color:#66d9ef">private</span> <span style="color:#66d9ef">val</span> value<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">String</span><span style="color:#f92672">)</span> <span style="color:#66d9ef">extends</span> <span style="color:#a6e22e">AnyVal</span> <span style="color:#f92672">{</span>
    <span style="color:#66d9ef">def</span> validatePassword<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Failures</span> <span style="color:#66d9ef">Ior</span> <span style="color:#66d9ef">UserPassword</span> <span style="color:#f92672">=</span> <span style="color:#f92672">{</span>
      <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>value<span style="color:#f92672">.</span>isEmpty<span style="color:#f92672">)</span> <span style="color:#a6e22e">Nel</span><span style="color:#f92672">.</span>one<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Passwords cannot be empty&#34;</span><span style="color:#f92672">).</span>leftIor
      <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>value<span style="color:#f92672">.</span>length <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">10</span><span style="color:#f92672">)</span>
        <span style="color:#a6e22e">Ior</span><span style="color:#f92672">.</span>both<span style="color:#f92672">(</span><span style="color:#a6e22e">Nel</span><span style="color:#f92672">.</span>one<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Password is not very secure&#34;</span><span style="color:#f92672">),</span> <span style="color:#a6e22e">UserPassword</span><span style="color:#f92672">(</span>value<span style="color:#f92672">))</span>
      <span style="color:#66d9ef">else</span> <span style="color:#a6e22e">UserPassword</span><span style="color:#f92672">(</span>value<span style="color:#f92672">).</span>rightIor
    <span style="color:#f92672">}</span>
  <span style="color:#f92672">}</span>

</code></pre></div><p>which would allow us to create a valid <code>User</code>:</p>
<p><strong>Note:</strong> If you&rsquo;re confused by mapN and the various imports, it&rsquo;ll be explained in another post along with validated and validatedN.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">  <span style="color:#66d9ef">import</span> cats.syntax.apply._

  <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">case</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">User</span><span style="color:#f92672">(</span>name<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">UserName</span><span style="color:#f92672">,</span> pass<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">UserPassword</span><span style="color:#f92672">)</span>

  <span style="color:#66d9ef">val</span> username1 <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">UserName</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Fares&#34;</span><span style="color:#f92672">)</span>
  <span style="color:#66d9ef">val</span> pass1 <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">UserPassword</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;qwertyazerty&#34;</span><span style="color:#f92672">)</span>
  <span style="color:#66d9ef">val</span> user1 <span style="color:#66d9ef">=</span> <span style="color:#f92672">(</span>username1<span style="color:#f92672">.</span>validateUserName<span style="color:#f92672">,</span> pass1<span style="color:#f92672">.</span>validatePassword<span style="color:#f92672">).</span>mapN<span style="color:#f92672">(</span><span style="color:#a6e22e">User</span><span style="color:#f92672">)</span>

  <span style="color:#75715e">// user1 ==&gt; Right(User(UserName(fares),UserPassword(qwertyazerty)))
</span></code></pre></div><p>But what if the username and password contained non blocking errors?</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">
  <span style="color:#66d9ef">val</span> username2 <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">UserName</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;admin&#34;</span><span style="color:#f92672">)</span>
  <span style="color:#66d9ef">val</span> pass2 <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">UserPassword</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;pass&#34;</span><span style="color:#f92672">)</span>
  <span style="color:#66d9ef">val</span> user2 <span style="color:#66d9ef">=</span> <span style="color:#f92672">(</span>username2<span style="color:#f92672">.</span>validateUserName<span style="color:#f92672">,</span> pass2<span style="color:#f92672">.</span>validatePassword<span style="color:#f92672">).</span>mapN<span style="color:#f92672">(</span><span style="color:#a6e22e">User</span><span style="color:#f92672">)</span>

  <span style="color:#75715e">//user2 ==&gt; Both(NonEmptyList(In the future, protected words will no longer be considered valid, Password is not very secure),User(UserName(admin),UserPassword(pass)))
</span><span style="color:#75715e"></span>
</code></pre></div><p>This is what we meant by accumulating warnings or nonblocking errors.</p>
<p>But what if we encountered a blocking error?</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">
  <span style="color:#66d9ef">val</span> username3 <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">UserName</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;&#34;</span><span style="color:#f92672">)</span>
  <span style="color:#66d9ef">val</span> pass3 <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">UserPassword</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;&#34;</span><span style="color:#f92672">)</span>
  <span style="color:#66d9ef">val</span> user3 <span style="color:#66d9ef">=</span> <span style="color:#f92672">(</span>username3<span style="color:#f92672">.</span>validateUserName<span style="color:#f92672">,</span> pass3<span style="color:#f92672">.</span>validatePassword<span style="color:#f92672">).</span>mapN<span style="color:#f92672">(</span><span style="color:#a6e22e">User</span><span style="color:#f92672">)</span>

  <span style="color:#75715e">//user3 ==&gt; Left(NonEmptyList(Error, Username cannot be empty))
</span><span style="color:#75715e"></span>
</code></pre></div><p>Notice it short circuited the computations without accumulating the errors on the left side (Password was empty but the error was not added to that of Username)</p>
<h2 id="conversion">Conversion</h2>
<p>Ior Can be converted to an <code>Either</code> a <code>Validate</code> or even an <code>Option</code>.</p>
<p>Keep in mind however that when doing so, the <code>Both</code> will drop its left side and only keep the right value and transform it to a <code>Some</code> or a <code>Right</code> ect&hellip;</p>
<p>Here are the transformation codes:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">
  <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">def</span> toEither<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Either</span><span style="color:#f92672">[</span><span style="color:#66d9ef">A</span>, <span style="color:#66d9ef">B</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span> fold<span style="color:#f92672">(</span><span style="color:#a6e22e">Left</span><span style="color:#f92672">(</span><span style="color:#66d9ef">_</span><span style="color:#f92672">),</span> <span style="color:#a6e22e">Right</span><span style="color:#f92672">(</span><span style="color:#66d9ef">_</span><span style="color:#f92672">),</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">_</span><span style="color:#f92672">,</span> b<span style="color:#f92672">)</span> <span style="color:#66d9ef">=&gt;</span> <span style="color:#a6e22e">Right</span><span style="color:#f92672">(</span>b<span style="color:#f92672">))</span>
  <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">def</span> toValidated<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Validated</span><span style="color:#f92672">[</span><span style="color:#66d9ef">A</span>, <span style="color:#66d9ef">B</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span> fold<span style="color:#f92672">(</span><span style="color:#a6e22e">Invalid</span><span style="color:#f92672">(</span><span style="color:#66d9ef">_</span><span style="color:#f92672">),</span> <span style="color:#a6e22e">Valid</span><span style="color:#f92672">(</span><span style="color:#66d9ef">_</span><span style="color:#f92672">),</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">_</span><span style="color:#f92672">,</span> b<span style="color:#f92672">)</span> <span style="color:#66d9ef">=&gt;</span> <span style="color:#a6e22e">Valid</span><span style="color:#f92672">(</span>b<span style="color:#f92672">))</span>
  <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">def</span> toOption<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Option</span><span style="color:#f92672">[</span><span style="color:#66d9ef">B</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span> fold<span style="color:#f92672">(</span><span style="color:#66d9ef">_</span> <span style="color:#66d9ef">=&gt;</span> <span style="color:#a6e22e">None</span><span style="color:#f92672">,</span> b <span style="color:#66d9ef">=&gt;</span> <span style="color:#a6e22e">Some</span><span style="color:#f92672">(</span>b<span style="color:#f92672">),</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">_</span><span style="color:#f92672">,</span> b<span style="color:#f92672">)</span> <span style="color:#66d9ef">=&gt;</span> <span style="color:#a6e22e">Some</span><span style="color:#f92672">(</span>b<span style="color:#f92672">))</span>

</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Cats Show</title>
            <link>https://fares.codes/posts/cats-show/</link>
            <pubDate>Fri, 20 Mar 2020 10:00:00 +0000</pubDate>
            
            <guid>https://fares.codes/posts/cats-show/</guid>
            <description>You can tell I&amp;rsquo;m not looking to write something serious by the topic I&amp;rsquo;ve chosen 😛
The first time I read about Show I instantly said to my self &amp;ldquo;its just a glorified toString&amp;rdquo;. I still struggle to see the difference&amp;hellip; Okay not really but they are pretty similar.
Backing up, Here is the signature of show:
/** creates an instance of [[Show]] using the provided function */ def show[A](f: A =&amp;gt; String): Show[A] = new Show[A] { def show(a: A): String = f(a) } So it takes a A as a type parameter and a function that takes an A and transforms it to a String.</description>
            <content type="html"><![CDATA[<p>You can tell I&rsquo;m not looking to write something serious by the topic I&rsquo;ve chosen 😛</p>
<p>The first time I read about <code>Show</code> I instantly said to my self &ldquo;its just a glorified toString&rdquo;. I still struggle to see the difference&hellip; Okay not really but they are pretty similar.</p>
<p>Backing up, Here is the signature of show:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">
  <span style="color:#75715e">/** creates an instance of [[Show]] using the provided function */</span>
  <span style="color:#66d9ef">def</span> show<span style="color:#f92672">[</span><span style="color:#66d9ef">A</span><span style="color:#f92672">](</span>f<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">A</span> <span style="color:#f92672">=&gt;</span> <span style="color:#a6e22e">String</span><span style="color:#f92672">)</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Show</span><span style="color:#f92672">[</span><span style="color:#66d9ef">A</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">Show</span><span style="color:#f92672">[</span><span style="color:#66d9ef">A</span><span style="color:#f92672">]</span> <span style="color:#f92672">{</span>
    <span style="color:#66d9ef">def</span> show<span style="color:#f92672">(</span>a<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">A</span><span style="color:#f92672">)</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">String</span> <span style="color:#f92672">=</span> f<span style="color:#f92672">(</span>a<span style="color:#f92672">)</span>
  <span style="color:#f92672">}</span>

</code></pre></div><p>So it takes a <code>A</code> as a type parameter and a function that takes an <code>A</code> and transforms it to a <code>String</code>. Kind of like a toString&hellip; but the difference is that show takes a type parameter while toString is defined on <code>Any</code> meaning everything has a toString and as bizarre as this might look, it actually works:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">
<span style="color:#f92672">(</span><span style="color:#66d9ef">new</span> <span style="color:#f92672">{}).</span>toString <span style="color:#75715e">// Would return  $anon$1@8641b7d ???
</span><span style="color:#75715e"></span>
</code></pre></div><p>While this would not work for show.</p>
<p>Show also safeguards against anyone randomly overriding the toString somewhere else and affecting your code.</p>
<h2 id="example-of-using-show">Example of using Show</h2>
<p>Assume we have our ADT:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">
<span style="color:#66d9ef">sealed</span> <span style="color:#66d9ef">abstract</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Animal</span> <span style="color:#66d9ef">extends</span> <span style="color:#a6e22e">Product</span> <span style="color:#66d9ef">with</span> <span style="color:#a6e22e">Serializable</span>

<span style="color:#66d9ef">object</span> <span style="color:#a6e22e">Animal</span> <span style="color:#f92672">{</span>

  <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">case</span> <span style="color:#66d9ef">object</span> <span style="color:#a6e22e">Dog</span> <span style="color:#66d9ef">extends</span> <span style="color:#a6e22e">Animal</span>
  <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">case</span> <span style="color:#66d9ef">object</span> <span style="color:#a6e22e">Cat</span> <span style="color:#66d9ef">extends</span> <span style="color:#a6e22e">Animal</span>

  <span style="color:#66d9ef">implicit</span> <span style="color:#66d9ef">val</span> showAnimal<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Show</span><span style="color:#f92672">[</span><span style="color:#66d9ef">Animal</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">Show</span><span style="color:#f92672">.</span>show <span style="color:#f92672">{</span>
    <span style="color:#66d9ef">case</span> <span style="color:#a6e22e">Dog</span> <span style="color:#66d9ef">=&gt;</span> <span style="color:#e6db74">&#34;The following is a Dog&#34;</span>
    <span style="color:#66d9ef">case</span> <span style="color:#a6e22e">Cat</span> <span style="color:#66d9ef">=&gt;</span> <span style="color:#e6db74">&#34;The following is a Cat&#34;</span>
  <span style="color:#f92672">}</span>
<span style="color:#f92672">}</span>

</code></pre></div><p>We defined an implicit val of type <code>Show[Animal]</code> in our ADT, allowing us to call the following from anywhere else in the code:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">
  <span style="color:#66d9ef">val</span> d<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Animal</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">Dog</span>
  d<span style="color:#f92672">.</span>show <span style="color:#75715e">// Would return &#34;The following is a Dog&#34;
</span><span style="color:#75715e"></span>
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Kafka HealthChecks</title>
            <link>https://fares.codes/posts/kafka-healthchecks/</link>
            <pubDate>Thu, 19 Mar 2020 10:00:00 +0000</pubDate>
            
            <guid>https://fares.codes/posts/kafka-healthchecks/</guid>
            <description>Ive been recently asked to write healthchecks for long running services that depend on kafka.
This article will not go into the need for healthchecks nor a &amp;ldquo;let it crash&amp;rdquo; design. Instead I&amp;rsquo;ll delve into the struggle I had to actually write those healthchecks and more specifically checking the status of our kafka brokers.
Its important to note that I do not have an in-depth knowledge of the inner workings of kafka, and this might have probably contributed to the difficulty I found implementing said healthchecks.</description>
            <content type="html"><![CDATA[<p>Ive been recently asked to write healthchecks for long running services that depend on kafka.</p>
<p>This article will not go into the need for healthchecks nor a &ldquo;let it crash&rdquo; design. Instead I&rsquo;ll delve into the struggle I had to actually write those healthchecks and more specifically checking the status of our kafka brokers.</p>
<p>Its important to note that I do not have an in-depth knowledge of the inner workings of kafka, and this might have probably contributed to the difficulty I found implementing said healthchecks.</p>
<p>Before we begin, here are some key points to keep in mind:</p>
<h2 id="what-are-brokers">What are brokers</h2>
<p>Message brokers make the process of exchanging messages simple and reliable.</p>
<p>A Kafka Message Broker is the central point where messages are published to.</p>
<p>A kafka broker receives messages from producers and stores them on disk by unique offsets. It then allows consumers to consume the messages.</p>
<h2 id="the-role-of-zookeeper-in-all-of-this">The role of Zookeeper in all of this</h2>
<p>Kafka uses zookeeper to store shared information about brokers, consumers ect&hellip;</p>
<p>For brokers, kafka determines the state of a particular broker as it sends regular heartbeat requests.</p>
<p>Zookeeper is also used by kafka for broker election. In the case where the leader on a specific partition fails, it will no longer be registered with zookeeper. Zookeeper will then alert the remaining brokers on that partition and will proceed with a new election.</p>
<p>For consumers, zookeeper keeps check of the offsets and maintains a consumer registry. They are ephemeral zNodes similar to brokers. When a consumer goes down, the node is destroyed.</p>
<h2 id="checking-the-health-of-zookeeper">Checking the &ldquo;Health&rdquo; of Zookeeper</h2>
<p>Checking the health of Zookeeper is simple:</p>
<p>A zookeeper client has a function <code>zk.getState.isConnected</code>. This will return a boolean if zk is <code>CONNECTED or CONNECTEDREADONLY</code>.</p>
<h2 id="checking-the-health-of-brokers">Checking the &ldquo;Health&rdquo; of brokers</h2>
<p>The first implementation of a healthcheck consisted of checking zookeeper for brokerIds (since brokers register with zookeeper). And making sure that all the brokers are indeed registered with zookeeper.</p>
<p>The idea came from the scaladoc in <code>KafkaHealthcheck</code>. Which mentions:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">
<span style="color:#75715e">/**
</span><span style="color:#75715e"> * This class registers the broker in zookeeper to allow
</span><span style="color:#75715e"> * other brokers and consumers to detect failures. It uses an ephemeral znode with the path:
</span><span style="color:#75715e"> *   /brokers/ids/[0...N] --&gt; advertisedHost:advertisedPort
</span><span style="color:#75715e"> * Right now our definition of health is fairly naive. If we register in zk we are healthy, otherwise
</span><span style="color:#75715e"> * we are dead.
</span><span style="color:#75715e"> */</span>

</code></pre></div><p>Note that I was using kafka 2.11 and that after checking more recent versions, this class disappears.</p>
<h3 id="the-problem-with-this-implementation">The problem with this implementation</h3>
<p>The problem here is that my previous implementation eliminates all the benefits of the fault tolerance of kafka.</p>
<p>Each topic in kafka can have one or more partition. And each partition can be replicated 1 or more times.</p>
<p>Each partition in Kafka will have a broker as it&rsquo;s leader. Meaning that this broker will handle receiving messages and dispatching this information to its followers. This broker (up until version 2.4.0) is also responsible to serving the consumers. <a href="https://cwiki.apache.org/confluence/display/KAFKA/KIP-392%3A+Allow+consumers+to+fetch+from+closest+replica">https://cwiki.apache.org/confluence/display/KAFKA/KIP-392%3A+Allow+consumers+to+fetch+from+closest+replica</a></p>
<p>At the same time, this broker will also maintain a list of ISR (In-Sync-Replicas). This is a list of other brokers that are in sync with the leader (In the case the topic has a replication factor). So if a leader fails, any broker from that list is a prime candidate to replacing that broker.</p>
<p>In other words, even if we lose a broker for a topic that is replicated, our application should not crash since we have other brokers that can step in.</p>
<h3 id="the-proposed-solution">The proposed solution</h3>
<p>The proposed solution is to: Retrieve the list of brokers from Zookeeper.
For each topic, retrieve the list of partitions, and for each partition, retrieve the list of ISR. If there is at least one broker in that list of ISR, the the partition is healthy. If all partitions for a topic are healthy and if all topics for a given application are healthy, then the application is healthy.</p>
<h3 id="additional-resources">Additional Resources</h3>
<p>Here is a series of articles I found that are useful to learning more about the functioning of Kafka and Event Streaming in general.</p>
<p>Part one: Storage Mechanics</p>
<ul>
<li><a href="https://bravenewgeek.com/building-a-distributed-log-from-scratch-part-1-storage-mechanics/">https://bravenewgeek.com/building-a-distributed-log-from-scratch-part-1-storage-mechanics/</a></li>
<li><a href="https://thehoard.blog/how-kafkas-storage-internals-work-3a29b02e026">https://thehoard.blog/how-kafkas-storage-internals-work-3a29b02e026</a>
Part two: Data Replication</li>
<li><a href="https://bravenewgeek.com/building-a-distributed-log-from-scratch-part-2-data-replication/">https://bravenewgeek.com/building-a-distributed-log-from-scratch-part-2-data-replication/</a>
Part Three: Scaling message delivery</li>
<li><a href="https://bravenewgeek.com/building-a-distributed-log-from-scratch-part-3-scaling-message-delivery/">https://bravenewgeek.com/building-a-distributed-log-from-scratch-part-3-scaling-message-delivery/</a>
Slightly outdated, does not mention the possibility of reading from replicas: <a href="https://cwiki.apache.org/confluence/display/KAFKA/KIP-392%3A+Allow+consumers+to+fetch+from+closest+replica">https://cwiki.apache.org/confluence/display/KAFKA/KIP-392%3A+Allow+consumers+to+fetch+from+closest+replica</a>
Part Four: Competing Goals and Lessons Learned (Plus NATS que Kafka)</li>
<li><a href="https://bravenewgeek.com/building-a-distributed-log-from-scratch-part-4-trade-offs-and-lessons-learned/">https://bravenewgeek.com/building-a-distributed-log-from-scratch-part-4-trade-offs-and-lessons-learned/</a>
Part 5: Sketching a New System</li>
<li><a href="https://bravenewgeek.com/building-a-distributed-log-from-scratch-part-5-sketching-a-new-system/">https://bravenewgeek.com/building-a-distributed-log-from-scratch-part-5-sketching-a-new-system/</a></li>
</ul>
<p>Understanding Consensus: <a href="https://bravenewgeek.com/understanding-consensus/">https://bravenewgeek.com/understanding-consensus/</a></p>
]]></content>
        </item>
        
        <item>
            <title>Cats Bifunctor</title>
            <link>https://fares.codes/posts/cats-bifunctor/</link>
            <pubDate>Sun, 09 Feb 2020 10:00:00 +0000</pubDate>
            
            <guid>https://fares.codes/posts/cats-bifunctor/</guid>
            <description>The following will be a short and rather simple article about a useful function I recently learned about: bimap by cats.
In cats and in some cases scala, types like Either, Validated, Option&amp;hellip; are right biased. which means that when we call .map on them, the function applied in the map is only applied on the case of a right.
Here are some examples:
val either: Either[String, Int] = Right(2) val result: Either[String, Int] = either.</description>
            <content type="html"><![CDATA[<p>The following will be a short and rather simple article about a useful function I recently learned about: <code>bimap</code> by cats.</p>
<p>In cats and in some cases scala, types like Either, Validated, Option&hellip; are right biased. which means that when we call <code>.map</code> on them, the function applied in the map is only applied on the case of a right.</p>
<p>Here are some examples:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">
<span style="color:#66d9ef">val</span> either<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Either</span><span style="color:#f92672">[</span><span style="color:#66d9ef">String</span>, <span style="color:#66d9ef">Int</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">Right</span><span style="color:#f92672">(</span><span style="color:#ae81ff">2</span><span style="color:#f92672">)</span>
<span style="color:#66d9ef">val</span> result<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Either</span><span style="color:#f92672">[</span><span style="color:#66d9ef">String</span>, <span style="color:#66d9ef">Int</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span> either<span style="color:#f92672">.</span>map<span style="color:#f92672">(</span>int <span style="color:#66d9ef">=&gt;</span> int <span style="color:#f92672">*</span> <span style="color:#ae81ff">2</span><span style="color:#f92672">)</span>

<span style="color:#66d9ef">val</span> option1<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Option</span><span style="color:#f92672">[</span><span style="color:#66d9ef">Int</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">Some</span><span style="color:#f92672">(</span><span style="color:#ae81ff">2</span><span style="color:#f92672">)</span>
<span style="color:#66d9ef">val</span> result1<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Option</span><span style="color:#f92672">[</span><span style="color:#66d9ef">Int</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span> option1<span style="color:#f92672">.</span>map<span style="color:#f92672">(</span>int <span style="color:#66d9ef">=&gt;</span> int <span style="color:#f92672">*</span> <span style="color:#ae81ff">2</span><span style="color:#f92672">)</span>
<span style="color:#75715e">// a map on a None returns a None.
</span><span style="color:#75715e"></span>
</code></pre></div><p>But what if we only wanted to apply a function on the left side? conveniently, cats offers us a <code>.leftMap</code> function. This does not apply in the case of an option.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#66d9ef">val</span> result <span style="color:#66d9ef">=</span> either<span style="color:#f92672">.</span>leftMap<span style="color:#f92672">(</span>str <span style="color:#66d9ef">=&gt;</span> <span style="color:#e6db74">&#34;Error: &#34;</span> <span style="color:#f92672">+</span> str<span style="color:#f92672">)</span>
</code></pre></div><p>In some cases, we find ourselves wanting to apply different functions in the case where the return is a right and when its a left. In that case we can use <code>bimap</code>.</p>
<p>bimap is defined by a <code>Bifunctor</code> and from the cats definition:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">Bifunctor takes two type parameters instead of one, and is a functor in both of these parameters. It defines a function bimap, which allows for mapping over both arguments at the same time. Its signature is as follows:
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#66d9ef">def</span> bimap<span style="color:#f92672">[</span><span style="color:#66d9ef">A</span>, <span style="color:#66d9ef">B</span>, <span style="color:#66d9ef">C</span>, <span style="color:#66d9ef">D</span><span style="color:#f92672">](</span>fab<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">F</span><span style="color:#f92672">[</span><span style="color:#66d9ef">A</span>, <span style="color:#66d9ef">B</span><span style="color:#f92672">])(</span>f<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">A</span> <span style="color:#f92672">=&gt;</span> C<span style="color:#f92672">,</span> g<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">B</span> <span style="color:#f92672">=&gt;</span> D<span style="color:#f92672">)</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">F</span><span style="color:#f92672">[</span><span style="color:#66d9ef">C</span>, <span style="color:#66d9ef">D</span><span style="color:#f92672">]</span>
</code></pre></div><p>here&rsquo;s an example:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">
  <span style="color:#66d9ef">import</span> cats.syntax.either._

  <span style="color:#66d9ef">val</span> either<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Either</span><span style="color:#f92672">[</span><span style="color:#66d9ef">String</span>, <span style="color:#66d9ef">Int</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span> <span style="color:#f92672">???</span>
  <span style="color:#66d9ef">def</span> function1<span style="color:#f92672">(</span>str<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">String</span><span style="color:#f92672">)</span> <span style="color:#66d9ef">=</span> <span style="color:#f92672">???</span>
  <span style="color:#66d9ef">def</span> function2<span style="color:#f92672">(</span>int<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Int</span><span style="color:#f92672">)</span> <span style="color:#66d9ef">=</span> <span style="color:#f92672">???</span>

  either<span style="color:#f92672">.</span>bimap<span style="color:#f92672">(</span>function1<span style="color:#f92672">,</span> function2<span style="color:#f92672">)</span>

</code></pre></div><p>In the case where the value <code>either</code> is of type Right then <code>function2</code> will be applied. In the case its a Left, <code>function1</code> would be applied.</p>
<p>Here is the implementation of <code>bimap</code> on an either:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">
  <span style="color:#66d9ef">def</span> bimap<span style="color:#f92672">[</span><span style="color:#66d9ef">C</span>, <span style="color:#66d9ef">D</span><span style="color:#f92672">](</span>fa<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">A</span> <span style="color:#f92672">=&gt;</span> C<span style="color:#f92672">,</span> fb<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">B</span> <span style="color:#f92672">=&gt;</span> D<span style="color:#f92672">)</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Either</span><span style="color:#f92672">[</span><span style="color:#66d9ef">C</span>, <span style="color:#66d9ef">D</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span> eab <span style="color:#66d9ef">match</span> <span style="color:#f92672">{</span>
    <span style="color:#66d9ef">case</span> <span style="color:#a6e22e">Left</span><span style="color:#f92672">(</span>a<span style="color:#f92672">)</span>  <span style="color:#66d9ef">=&gt;</span> <span style="color:#a6e22e">Left</span><span style="color:#f92672">(</span>fa<span style="color:#f92672">(</span>a<span style="color:#f92672">))</span>
    <span style="color:#66d9ef">case</span> <span style="color:#a6e22e">Right</span><span style="color:#f92672">(</span>b<span style="color:#f92672">)</span> <span style="color:#66d9ef">=&gt;</span> <span style="color:#a6e22e">Right</span><span style="color:#f92672">(</span>fb<span style="color:#f92672">(</span>b<span style="color:#f92672">))</span>
  <span style="color:#f92672">}</span>

</code></pre></div><p>In case this behavior is a bit familiar its because scala offers a very similar function: <code>fold</code></p>
<p>Similarly to <code>bimap</code>, fold takes 2 functions and applies them on the left and the right.</p>
<p>Here is the scala doc along with the function definition:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">
  <span style="color:#75715e">/** Applies `fa` if this is a `Left` or `fb` if this is a `Right`.
</span><span style="color:#75715e">   *
</span><span style="color:#75715e">   *  @example {{{
</span><span style="color:#75715e">   *  val result = util.Try(&#34;42&#34;.toInt).toEither
</span><span style="color:#75715e">   *  result.fold(
</span><span style="color:#75715e">   *    e =&gt; s&#34;Operation failed with $e&#34;,
</span><span style="color:#75715e">   *    v =&gt; s&#34;Operation produced value: $v&#34;
</span><span style="color:#75715e">   *  )
</span><span style="color:#75715e">   *  }}}
</span><span style="color:#75715e">   *
</span><span style="color:#75715e">   *  @param fa the function to apply if this is a `Left`
</span><span style="color:#75715e">   *  @param fb the function to apply if this is a `Right`
</span><span style="color:#75715e">   *  @return the results of applying the function
</span><span style="color:#75715e">   */</span>
  <span style="color:#66d9ef">def</span> fold<span style="color:#f92672">[</span><span style="color:#66d9ef">C</span><span style="color:#f92672">](</span>fa<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">A</span> <span style="color:#f92672">=&gt;</span> C<span style="color:#f92672">,</span> fb<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">B</span> <span style="color:#f92672">=&gt;</span> C<span style="color:#f92672">)</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">C</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">this</span> <span style="color:#66d9ef">match</span> <span style="color:#f92672">{</span>
    <span style="color:#66d9ef">case</span> <span style="color:#a6e22e">Right</span><span style="color:#f92672">(</span>b<span style="color:#f92672">)</span> <span style="color:#66d9ef">=&gt;</span> fb<span style="color:#f92672">(</span>b<span style="color:#f92672">)</span>
    <span style="color:#66d9ef">case</span> <span style="color:#a6e22e">Left</span><span style="color:#f92672">(</span>a<span style="color:#f92672">)</span>  <span style="color:#66d9ef">=&gt;</span> fa<span style="color:#f92672">(</span>a<span style="color:#f92672">)</span>
  <span style="color:#f92672">}</span>

</code></pre></div><p>The difference between both is in the return and in the return types of the function they take.</p>
<p>In the case of <code>bimap</code> on an Either, the return type will compulsorily be an Either. So its as its name suggests, its a map in both directions. The return type is an Either and the 2 type parameters can be different from one another and from the initial type parameters.</p>
<p>But in the case of <code>fold</code>, the return type will depend on the functions passed to the fold. In the same time, both functions will have to have the same return type (<code>C in the scala doc</code>)</p>
<p>So to summarize the main differences between a bimap and a fold:</p>
<ol>
<li><code>bimap</code> returns an Either while <code>fold</code>'s return type depends on the functions passed to it.</li>
<li>The functions passed to the bimap can have different return types. while the functions passed to the fold needs to have the same return type.</li>
</ol>
]]></content>
        </item>
        
        <item>
            <title>Spark Odd Behavior with Nulls</title>
            <link>https://fares.codes/posts/spark-odd-behavior-with-nulls/</link>
            <pubDate>Sun, 19 Jan 2020 10:00:00 +0000</pubDate>
            
            <guid>https://fares.codes/posts/spark-odd-behavior-with-nulls/</guid>
            <description>Once again, I will put a 5 hour flight into good use to detail an interesting/odd behavior encountered with spark while dealing with nulls.
Any basic spark tutorial will tell you that there are a couple ways to create dataframes.
Some of which are:
  Transforming existing dataframes.
  Reading a file.
  Parallelizing over a collection.
  The first two will not be in the scope of this article.</description>
            <content type="html"><![CDATA[<p>Once again, I will put a 5 hour flight into good use to detail an interesting/odd behavior encountered with spark while dealing with nulls.</p>
<p>Any basic spark tutorial will tell you that there are a couple ways to create dataframes.</p>
<p>Some of which are:</p>
<ol>
<li>
<p>Transforming existing dataframes.</p>
</li>
<li>
<p>Reading a file.</p>
</li>
<li>
<p>Parallelizing over a collection.</p>
</li>
</ol>
<p>The first two will not be in the scope of this article. Instead I will focus on an odd behavior encountered while creating a dataframe. More specifically, the behavior is in regards to null values and how they are treated.</p>
<p>Let me start with a little bit of context:</p>
<p>I was reading a row and a specific schema and creating a dataframe, I noticed that the resulting DataFrame would differ for the same inputs depending on the underlying <code>createDataFrame</code> function that is being called.</p>
<p>Lets start with something simple:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">
    <span style="color:#66d9ef">val</span> schema<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">StructType</span> <span style="color:#f92672">=</span>
      <span style="color:#a6e22e">StructType</span><span style="color:#f92672">(</span>
        <span style="color:#a6e22e">List</span><span style="color:#f92672">(</span>
          <span style="color:#a6e22e">StructField</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Name&#34;</span><span style="color:#f92672">,</span> <span style="color:#a6e22e">StringType</span><span style="color:#f92672">,</span> nullable <span style="color:#66d9ef">=</span> <span style="color:#66d9ef">false</span><span style="color:#f92672">),</span>
          <span style="color:#a6e22e">StructField</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Age&#34;</span><span style="color:#f92672">,</span> <span style="color:#a6e22e">IntegerType</span><span style="color:#f92672">,</span> nullable <span style="color:#66d9ef">=</span> <span style="color:#66d9ef">false</span><span style="color:#f92672">)</span>
        <span style="color:#f92672">)</span>
      <span style="color:#f92672">)</span>

    <span style="color:#66d9ef">val</span> nestedRows<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Row</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">Row</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Fares&#34;</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">23</span><span style="color:#f92672">)</span>
    <span style="color:#66d9ef">import</span> scala.collection.JavaConverters._
    <span style="color:#66d9ef">val</span> data <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">List</span><span style="color:#f92672">(</span>nestedRows<span style="color:#f92672">).</span>asJava
    <span style="color:#66d9ef">val</span> df<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">DataFrame</span> <span style="color:#f92672">=</span> spark<span style="color:#f92672">.</span>createDataFrame<span style="color:#f92672">(</span>data<span style="color:#f92672">,</span> schema<span style="color:#f92672">)</span>

    df<span style="color:#f92672">.</span>show<span style="color:#f92672">()</span>

</code></pre></div><p>We would expect the dataframe to look like this:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">
+-----+---+
| Name|Age|
+-----+---+
|Fares| 23|
+-----+---+

</code></pre></div><p>Alright now assume the age was <code>null</code>. Looking at the Schema (Age is required and cannot be null), we would expect the <code>createDataFrame</code> to throw a null pointer exception.</p>
<p>Except that when we run the below code:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">
    <span style="color:#66d9ef">val</span> schema<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">StructType</span> <span style="color:#f92672">=</span>
      <span style="color:#a6e22e">StructType</span><span style="color:#f92672">(</span>
        <span style="color:#a6e22e">List</span><span style="color:#f92672">(</span>
          <span style="color:#a6e22e">StructField</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Name&#34;</span><span style="color:#f92672">,</span> <span style="color:#a6e22e">StringType</span><span style="color:#f92672">,</span> nullable <span style="color:#66d9ef">=</span> <span style="color:#66d9ef">false</span><span style="color:#f92672">),</span>
          <span style="color:#a6e22e">StructField</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Age&#34;</span><span style="color:#f92672">,</span> <span style="color:#a6e22e">IntegerType</span><span style="color:#f92672">,</span> nullable <span style="color:#66d9ef">=</span> <span style="color:#66d9ef">false</span><span style="color:#f92672">)</span>
        <span style="color:#f92672">)</span>
      <span style="color:#f92672">)</span>

    <span style="color:#66d9ef">val</span> nestedRows<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Row</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">Row</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Fares&#34;</span><span style="color:#f92672">,</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">)</span>
    <span style="color:#66d9ef">import</span> scala.collection.JavaConverters._
    <span style="color:#66d9ef">val</span> data <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">List</span><span style="color:#f92672">(</span>nestedRows<span style="color:#f92672">).</span>asJava
    <span style="color:#66d9ef">val</span> df<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">DataFrame</span> <span style="color:#f92672">=</span> spark<span style="color:#f92672">.</span>createDataFrame<span style="color:#f92672">(</span>data<span style="color:#f92672">,</span> schema<span style="color:#f92672">)</span>

    df<span style="color:#f92672">.</span>show<span style="color:#f92672">()</span>

</code></pre></div><p>we get:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">
+-----+---+
| Name|Age|
+-----+---+
|Fares|  0|
+-----+---+

</code></pre></div><p>The reason behind this has the do with the underlying functions being called by this specific <code>createDataFrame</code>. In the example of TimestampType, the underlying function being called is: <code>fromExternalRows</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">
  <span style="color:#66d9ef">def</span> fromExternalRows<span style="color:#f92672">(</span>output<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Seq</span><span style="color:#f92672">[</span><span style="color:#66d9ef">Attribute</span><span style="color:#f92672">],</span> data<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Seq</span><span style="color:#f92672">[</span><span style="color:#66d9ef">Row</span><span style="color:#f92672">])</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">LocalRelation</span> <span style="color:#f92672">=</span> <span style="color:#f92672">{</span>
    <span style="color:#66d9ef">val</span> schema <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">StructType</span><span style="color:#f92672">.</span>fromAttributes<span style="color:#f92672">(</span>output<span style="color:#f92672">)</span>
    <span style="color:#66d9ef">val</span> converter <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">CatalystTypeConverters</span><span style="color:#f92672">.</span>createToCatalystConverter<span style="color:#f92672">(</span>schema<span style="color:#f92672">)</span>
    <span style="color:#a6e22e">LocalRelation</span><span style="color:#f92672">(</span>output<span style="color:#f92672">,</span> data<span style="color:#f92672">.</span>map<span style="color:#f92672">(</span>converter<span style="color:#f92672">(</span><span style="color:#66d9ef">_</span><span style="color:#f92672">).</span>asInstanceOf<span style="color:#f92672">[</span><span style="color:#66d9ef">InternalRow</span><span style="color:#f92672">]))</span>
  <span style="color:#f92672">}</span>

</code></pre></div><p>This will in turn call: <code>CatalystTypeConverters.createToCatalystConverter(schema)</code></p>
<p>and in the case of a timestamp type, we end up calling:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">
  <span style="color:#75715e">/**
</span><span style="color:#75715e">   * Returns the number of micros since epoch from java.sql.Timestamp.
</span><span style="color:#75715e">   */</span>
  <span style="color:#66d9ef">def</span> fromJavaTimestamp<span style="color:#f92672">(</span>t<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Timestamp</span><span style="color:#f92672">)</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">SQLTimestamp</span> <span style="color:#f92672">=</span> <span style="color:#f92672">{</span>
    <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>t <span style="color:#f92672">!=</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
      t<span style="color:#f92672">.</span>getTime<span style="color:#f92672">()</span> <span style="color:#f92672">*</span> <span style="color:#ae81ff">1000L</span> <span style="color:#f92672">+</span> <span style="color:#f92672">(</span>t<span style="color:#f92672">.</span>getNanos<span style="color:#f92672">().</span>toLong <span style="color:#f92672">/</span> <span style="color:#ae81ff">1000</span><span style="color:#f92672">)</span> <span style="color:#f92672">%</span> <span style="color:#ae81ff">1000L</span>
    <span style="color:#f92672">}</span> <span style="color:#66d9ef">else</span> <span style="color:#f92672">{</span>
      <span style="color:#ae81ff">0L</span>
    <span style="color:#f92672">}</span>
  <span style="color:#f92672">}</span>

</code></pre></div><p>So when we execute a code like the one below:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">
    <span style="color:#66d9ef">val</span> schema<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">StructType</span> <span style="color:#f92672">=</span>
      <span style="color:#a6e22e">StructType</span><span style="color:#f92672">(</span>
        <span style="color:#a6e22e">List</span><span style="color:#f92672">(</span>
          <span style="color:#a6e22e">StructField</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;TS&#34;</span><span style="color:#f92672">,</span> <span style="color:#a6e22e">TimestampType</span><span style="color:#f92672">,</span> nullable <span style="color:#66d9ef">=</span> <span style="color:#66d9ef">false</span><span style="color:#f92672">)</span>
        <span style="color:#f92672">)</span>
      <span style="color:#f92672">)</span>

    <span style="color:#66d9ef">val</span> nestedRows<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Row</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">Row</span><span style="color:#f92672">(</span><span style="color:#66d9ef">null</span><span style="color:#f92672">)</span>
    <span style="color:#66d9ef">import</span> scala.collection.JavaConverters._
    <span style="color:#66d9ef">val</span> data <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">List</span><span style="color:#f92672">(</span>nestedRows<span style="color:#f92672">).</span>asJava
    <span style="color:#66d9ef">val</span> df<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">DataFrame</span> <span style="color:#f92672">=</span> spark<span style="color:#f92672">.</span>createDataFrame<span style="color:#f92672">(</span>data<span style="color:#f92672">,</span> schema<span style="color:#f92672">)</span>

    df<span style="color:#f92672">.</span>show<span style="color:#f92672">()</span>

</code></pre></div><p>We end up with:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">
+-------------------+
|                 TS|
+-------------------+
|1970-01-01 02:00:00|
+-------------------+

</code></pre></div><p>The same &ldquo;Default Value&rdquo; case can be encountered with <code>IntegerType</code>, <code>BooleanType</code>, <code>LongType</code>, <code>DoubleType</code> ect&hellip;</p>
<h2 id="what-if-we-do-not-want-this-behavior">What if we do not want this behavior</h2>
<p>This only happens when we call a specific instance of the <code>createDataFrame</code> passing it a java list. If such a behavior is to be avoided, one simply has to use another instance of the function. For example, we can call in the following manner:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">
    <span style="color:#66d9ef">val</span> schema<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">StructType</span> <span style="color:#f92672">=</span>
      <span style="color:#a6e22e">StructType</span><span style="color:#f92672">(</span>
        <span style="color:#a6e22e">List</span><span style="color:#f92672">(</span>
          <span style="color:#a6e22e">StructField</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;TS&#34;</span><span style="color:#f92672">,</span> <span style="color:#a6e22e">TimestampType</span><span style="color:#f92672">,</span> nullable <span style="color:#66d9ef">=</span> <span style="color:#66d9ef">false</span><span style="color:#f92672">)</span>
        <span style="color:#f92672">)</span>
      <span style="color:#f92672">)</span>

    <span style="color:#66d9ef">val</span> nestedRows<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Row</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">Row</span><span style="color:#f92672">(</span><span style="color:#66d9ef">null</span><span style="color:#f92672">)</span>
    <span style="color:#66d9ef">val</span> df<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">DataFrame</span> <span style="color:#f92672">=</span> spark<span style="color:#f92672">.</span>createDataFrame<span style="color:#f92672">(</span>spark<span style="color:#f92672">.</span>sparkContext<span style="color:#f92672">.</span>parallelize<span style="color:#f92672">(</span><span style="color:#a6e22e">List</span><span style="color:#f92672">(</span>nestedRows<span style="color:#f92672">)),</span> schema<span style="color:#f92672">)</span>

    df<span style="color:#f92672">.</span>show<span style="color:#f92672">()</span>

</code></pre></div><p>And end up with the expected error:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">
  The 0th field &#39;TS&#39; of input row cannot be null.

</code></pre></div><p>The reason for that is due to the instance of the function being called. in the case of the latter its:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">
  <span style="color:#75715e">/**
</span><span style="color:#75715e">   * Creates a `DataFrame` from an RDD[Row].
</span><span style="color:#75715e">   * User can specify whether the input rows should be converted to Catalyst rows.
</span><span style="color:#75715e">   */</span>
  <span style="color:#66d9ef">private</span><span style="color:#f92672">[</span><span style="color:#66d9ef">sql</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">def</span> createDataFrame<span style="color:#f92672">(</span>
      rowRDD<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">RDD</span><span style="color:#f92672">[</span><span style="color:#66d9ef">Row</span><span style="color:#f92672">],</span>
      schema<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">StructType</span><span style="color:#f92672">,</span>
      needsConversion<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Boolean</span><span style="color:#f92672">)</span> <span style="color:#66d9ef">=</span> <span style="color:#f92672">{</span>
    <span style="color:#75715e">// TODO: use MutableProjection when rowRDD is another DataFrame and the applied
</span><span style="color:#75715e"></span>    <span style="color:#75715e">// schema differs from the existing schema on any field data type.
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">val</span> catalystRows <span style="color:#66d9ef">=</span> <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>needsConversion<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
      <span style="color:#66d9ef">val</span> encoder <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">RowEncoder</span><span style="color:#f92672">(</span>schema<span style="color:#f92672">)</span>
      rowRDD<span style="color:#f92672">.</span>map<span style="color:#f92672">(</span>encoder<span style="color:#f92672">.</span>toRow<span style="color:#f92672">)</span>
    <span style="color:#f92672">}</span> <span style="color:#66d9ef">else</span> <span style="color:#f92672">{</span>
      rowRDD<span style="color:#f92672">.</span>map<span style="color:#f92672">{</span>r<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Row</span> <span style="color:#f92672">=&gt;</span> <span style="color:#a6e22e">InternalRow</span><span style="color:#f92672">.</span>fromSeq<span style="color:#f92672">(</span>r<span style="color:#f92672">.</span>toSeq<span style="color:#f92672">)}</span>
    <span style="color:#f92672">}</span>
    <span style="color:#66d9ef">val</span> logicalPlan <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">LogicalRDD</span><span style="color:#f92672">(</span>schema<span style="color:#f92672">.</span>toAttributes<span style="color:#f92672">,</span> catalystRows<span style="color:#f92672">)(</span>self<span style="color:#f92672">)</span>
    <span style="color:#a6e22e">Dataset</span><span style="color:#f92672">.</span>ofRows<span style="color:#f92672">(</span>self<span style="color:#f92672">,</span> logicalPlan<span style="color:#f92672">)</span>
  <span style="color:#f92672">}</span>

</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Stack Safe Mutual Recursion with Eval</title>
            <link>https://fares.codes/posts/stack-safe-mutual-recursion-with-eval/</link>
            <pubDate>Wed, 15 Jan 2020 10:00:00 +0000</pubDate>
            
            <guid>https://fares.codes/posts/stack-safe-mutual-recursion-with-eval/</guid>
            <description>The first time I heard someone say: &amp;ldquo;Stack Safe Mutual Recursion using cats Eval DataType and Trampolining&amp;rdquo; I figured I&amp;rsquo;d found the ONE thing I wouldn&amp;rsquo;t be able to write about, on the count of how complex it sounded.
To start with, mutual recursion is not a topic I&amp;rsquo;m comfortable with, let alone Stack Safety&amp;hellip;
But with some time and a small exercise, the idea is getting clearer in my head.</description>
            <content type="html"><![CDATA[<p>The first time I heard someone say: &ldquo;Stack Safe Mutual Recursion using cats Eval DataType and Trampolining&rdquo; I figured I&rsquo;d found the ONE thing I wouldn&rsquo;t be able to write about, on the count of how complex it sounded.</p>
<p>To start with, mutual recursion is not a topic I&rsquo;m comfortable with, let alone Stack Safety&hellip;</p>
<p>But with some time and a small exercise, the idea is getting clearer in my head. So Imma take advantage of the 5 hour flight I&rsquo;m currently on to concretize the information in my head through this article 😛</p>
<p>From the cats documentation: <code>Eval is a data type for controlling synchronous evaluation. Its implementation is designed to provide stack-safety at all times using a technique called trampolining.</code></p>
<p>Alright so we just added more words to explain 🤦‍♂️</p>
<p><code>Mutual Recursion</code>: Function A calling function B who in turn will call function A that will once again call function B till the end of times&hellip; Or until a certain condition is met or value is reached.</p>
<p><code>Trampolining</code>: trampolining is replacing recursive function calls with objects representing these calls. This way the recursive computation is built up in the heap instead of the stack, and it is possible to represent much deeper recursive calls just because of the bigger size of the heap.</p>
<p>There are 3 functions in Eval we will look into but first a quick recap on 2 notions:</p>
<ol>
<li>
<p><code>Lazy Evaluation</code>: Lazy evaluations refers to an expression being evaluated the first time it is used instead of the first time it is defined. The opposite is called eager evaluation. in Scala: <code>lazy val</code> is lazy (obviously&hellip;) and <code>val</code> is eager.</p>
</li>
<li>
<p><code>Memoization</code>: Refers to the “memorization“ of the evaluated value. If a value is used twice, will it be evaluated twice or will it be evaluated once and its value memorized? In scala, <code>def</code> is not memoized, every time we call the function, it will be evaluated. In contrast, <code>val</code> is memoized. We only define a value once and then use it as many times as we&rsquo;d like without having to recompute the value every single time.</p>
</li>
</ol>
<h2 id="evaluation-strategies">Evaluation Strategies</h2>
<h3 id="eval-now">Eval Now</h3>
<p>Eval.now is an eager computation of the value. and its value is memoized.</p>
<p>From the cats documentation:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">
<span style="color:#66d9ef">val</span> eager <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">Eval</span><span style="color:#f92672">.</span>now <span style="color:#f92672">{</span>
  println<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Running expensive calculation...&#34;</span><span style="color:#f92672">)</span>
  <span style="color:#ae81ff">1</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">*</span> <span style="color:#ae81ff">3</span>
<span style="color:#f92672">}</span>
<span style="color:#75715e">// Running expensive calculation...
</span><span style="color:#75715e">// eager: cats.Eval[Int] = Now(7)
</span><span style="color:#75715e"></span>
eager<span style="color:#f92672">.</span>value
<span style="color:#75715e">// res0: Int = 7
</span></code></pre></div><h3 id="eval-later">Eval Later</h3>
<p>Eval.later is a lazy evaluation. The value is only evaluated once we call <code>.value</code> on the Later type.
Keep in mind that the result of the Later is memoized, so it is lazily evaluated but only evaluated once. (Think of lazy val)</p>
<p>From the cats documentation:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">
<span style="color:#66d9ef">val</span> lazyEval <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">Eval</span><span style="color:#f92672">.</span>later <span style="color:#f92672">{</span>
  println<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Running expensive calculation...&#34;</span><span style="color:#f92672">)</span>
  <span style="color:#ae81ff">1</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">*</span> <span style="color:#ae81ff">3</span>
<span style="color:#f92672">}</span>
<span style="color:#75715e">// lazyEval: cats.Eval[Int] = cats.Later@6c2b03e9
</span><span style="color:#75715e"></span>
lazyEval<span style="color:#f92672">.</span>value
<span style="color:#75715e">// Running expensive calculation...
</span><span style="color:#75715e">// res1: Int = 7
</span><span style="color:#75715e"></span>
lazyEval<span style="color:#f92672">.</span>value
<span style="color:#75715e">// res2: Int = 7
</span><span style="color:#75715e"></span>
</code></pre></div><h3 id="eval-always">Eval Always</h3>
<p>Eval.always is the equivalent of a def in scala. In other words, it is lazy and its value is not memoized.</p>
<p>From the cats documentation:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">
<span style="color:#66d9ef">val</span> always <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">Eval</span><span style="color:#f92672">.</span>always <span style="color:#f92672">{</span>
  println<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Running expensive calculation...&#34;</span><span style="color:#f92672">)</span>
  <span style="color:#ae81ff">1</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">*</span> <span style="color:#ae81ff">3</span>
<span style="color:#f92672">}</span>
<span style="color:#75715e">// always: cats.Eval[Int] = cats.Always@6a9ffee8
</span><span style="color:#75715e"></span>
always<span style="color:#f92672">.</span>value
<span style="color:#75715e">// Running expensive calculation...
</span><span style="color:#75715e">// res3: Int = 7
</span><span style="color:#75715e"></span>
always<span style="color:#f92672">.</span>value
<span style="color:#75715e">// Running expensive calculation...
</span><span style="color:#75715e">// res4: Int = 7
</span><span style="color:#75715e"></span>
</code></pre></div><h2 id="so-when-do-we-use-each-strategy">So When Do We Use Each Strategy</h2>
<ul>
<li>Eval.now should be used when the value to be used in the Now is already in hand or if its computation is pure and fast.</li>
</ul>
<p>Example, assume we are delving into a spark Json object to find the Simple Values.</p>
<p>Keep in mind that a json object can be a Struct containing field names and other Json Objects, an Array of Json Objects or simply a Json Value (denoted JValue).</p>
<p>During a Lazy recursion over that object, if we reach a JValue (an object where the value is already in hand) we can call the Now.
In other cases, we&rsquo;d have to go one level deeper and repeat.</p>
<p>As a rule of thumb, when there is no computation required, use the <code>Now</code></p>
<ul>
<li>
<p>Eval.later will evaluate the computation and cache the value.</p>
</li>
<li>
<p>Eval.always will evaluate the computation every time value is required. It should only be used when we need laziness without caching. Otherwise use Later.</p>
</li>
</ul>
<h2 id="important-note-about-stack-safety">Important note about stack safety</h2>
<p>When we chain multiple computations using <code>flatMap</code>, we are still stack safe as long as we don&rsquo;t nest calls to <code>.value</code> inside the Eval otherwise we will no longer be stack safe.</p>
<h2 id="practical-example">Practical Example</h2>
<p>So how does any of this help us? whats cool is that we can chain computations each returning an Eval and leave the actual evaluation till the end.</p>
<p>I mentioned Json Objects above&hellip; so why not use that as an example:</p>
<p>A Json Object can be:</p>
<ul>
<li>
<p>JValue (JString, JInt, JDouble&hellip;)</p>
</li>
<li>
<p>JArray (An Array of JObjects)</p>
</li>
<li>
<p>JStruct (Containing a List [(FieldName, JObject)] so a list of tuple: FieldNames and the associated JObject)</p>
</li>
</ul>
<h3 id="requirement">Requirement</h3>
<p>Assume that for some unknown and obscene reason, we were asked to traverse a Json Object and increment all the Integers by 1 and transform all the strings to: &ldquo;String: &quot; + the actual String content.</p>
<p>I know its weird but humor me 🤡</p>
<p>Our Domain would look like this:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">
<span style="color:#66d9ef">sealed</span> <span style="color:#66d9ef">trait</span> <span style="color:#a6e22e">JObject</span>
<span style="color:#66d9ef">sealed</span> <span style="color:#66d9ef">trait</span> <span style="color:#a6e22e">JValue</span> <span style="color:#66d9ef">extends</span> <span style="color:#a6e22e">JObject</span>
<span style="color:#66d9ef">final</span> <span style="color:#66d9ef">case</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">JString</span><span style="color:#f92672">(</span>value<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">String</span><span style="color:#f92672">)</span> <span style="color:#66d9ef">extends</span> <span style="color:#a6e22e">JValue</span>
<span style="color:#66d9ef">final</span> <span style="color:#66d9ef">case</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">JInt</span><span style="color:#f92672">(</span>value<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Int</span><span style="color:#f92672">)</span> <span style="color:#66d9ef">extends</span> <span style="color:#a6e22e">JValue</span>

<span style="color:#66d9ef">final</span> <span style="color:#66d9ef">case</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">JArray</span><span style="color:#f92672">(</span>elems<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Seq</span><span style="color:#f92672">[</span><span style="color:#66d9ef">JObject</span><span style="color:#f92672">])</span> <span style="color:#66d9ef">extends</span> <span style="color:#a6e22e">JObject</span>

<span style="color:#66d9ef">final</span> <span style="color:#66d9ef">case</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">JStruct</span><span style="color:#f92672">(</span>fields<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Seq</span><span style="color:#f92672">[(</span><span style="color:#66d9ef">String</span>, <span style="color:#66d9ef">JObject</span><span style="color:#f92672">)])</span> <span style="color:#66d9ef">extends</span> <span style="color:#a6e22e">JObject</span>

</code></pre></div><p>One easy way to achieve the requirement is to do a simple recursion over the initial JObject value</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">
  <span style="color:#66d9ef">def</span> transform<span style="color:#f92672">(</span>value<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">JObject</span><span style="color:#f92672">)</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">JObject</span> <span style="color:#f92672">=</span> <span style="color:#f92672">{</span>
    value <span style="color:#66d9ef">match</span> <span style="color:#f92672">{</span>
      <span style="color:#66d9ef">case</span> <span style="color:#a6e22e">JArray</span><span style="color:#f92672">(</span>elems<span style="color:#f92672">)</span> <span style="color:#66d9ef">=&gt;</span> <span style="color:#a6e22e">JArray</span><span style="color:#f92672">(</span>elems<span style="color:#f92672">.</span>map<span style="color:#f92672">(</span>v <span style="color:#66d9ef">=&gt;</span> transform<span style="color:#f92672">(</span>v<span style="color:#f92672">)))</span>
      <span style="color:#66d9ef">case</span> <span style="color:#a6e22e">JStruct</span><span style="color:#f92672">(</span>fields<span style="color:#f92672">)</span> <span style="color:#66d9ef">=&gt;</span>
        <span style="color:#a6e22e">JStruct</span><span style="color:#f92672">(</span>fields<span style="color:#f92672">.</span>map <span style="color:#f92672">{</span>
          <span style="color:#66d9ef">case</span> <span style="color:#f92672">(</span>str<span style="color:#f92672">,</span> jObject<span style="color:#f92672">)</span> <span style="color:#66d9ef">=&gt;</span> <span style="color:#f92672">(</span>str<span style="color:#f92672">,</span> transform<span style="color:#f92672">(</span>jObject<span style="color:#f92672">))</span>
        <span style="color:#f92672">})</span>
      <span style="color:#66d9ef">case</span> value<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">JValue</span> <span style="color:#f92672">=&gt;</span>
        value <span style="color:#66d9ef">match</span> <span style="color:#f92672">{</span>
          <span style="color:#66d9ef">case</span> <span style="color:#a6e22e">JString</span><span style="color:#f92672">(</span>value<span style="color:#f92672">)</span> <span style="color:#66d9ef">=&gt;</span> <span style="color:#a6e22e">JString</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;String: &#34;</span> <span style="color:#f92672">+</span> value<span style="color:#f92672">)</span>
          <span style="color:#66d9ef">case</span> <span style="color:#a6e22e">JInt</span><span style="color:#f92672">(</span>value<span style="color:#f92672">)</span>    <span style="color:#66d9ef">=&gt;</span> <span style="color:#a6e22e">JInt</span><span style="color:#f92672">(</span>value <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span><span style="color:#f92672">)</span>
        <span style="color:#f92672">}</span>
    <span style="color:#f92672">}</span>
  <span style="color:#f92672">}</span>

</code></pre></div><p>Took about 5 min to write and simple to read&hellip;</p>
<p>But the issue here is that I do not have control over the initial Json Object ill be traversing. Each call to transform will create a new stack frame and for deeply nested JObjects, we will end up with a stack overflow problem.</p>
<p>The more proper way of doing this is using Eval.</p>
<p>From what we&rsquo;ve discussed earlier, the Eval.now should be used when we have reached a expected value.</p>
<p>for the rest we will continue going one level deeper searching for the JValues</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">
  <span style="color:#66d9ef">def</span> updateJObject<span style="color:#f92672">(</span>jo<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">JObject</span><span style="color:#f92672">)</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">JObject</span> <span style="color:#f92672">=</span> <span style="color:#f92672">{</span>
    <span style="color:#66d9ef">def</span> iterate<span style="color:#f92672">(</span>elems<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Seq</span><span style="color:#f92672">[</span><span style="color:#66d9ef">JObject</span><span style="color:#f92672">])</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Eval</span><span style="color:#f92672">[</span><span style="color:#66d9ef">Seq</span><span style="color:#f92672">[</span><span style="color:#66d9ef">JObject</span><span style="color:#f92672">]]</span> <span style="color:#66d9ef">=</span> <span style="color:#f92672">{</span>
      <span style="color:#a6e22e">Eval</span><span style="color:#f92672">.</span>always<span style="color:#f92672">(</span>elems<span style="color:#f92672">).</span>flatMap <span style="color:#f92672">{</span>
        <span style="color:#66d9ef">case</span> x <span style="color:#f92672">+:</span> xs <span style="color:#66d9ef">=&gt;</span> deepMap<span style="color:#f92672">(</span>x<span style="color:#f92672">).</span>flatMap<span style="color:#f92672">(</span>x <span style="color:#66d9ef">=&gt;</span> iterate<span style="color:#f92672">(</span>xs<span style="color:#f92672">).</span>map<span style="color:#f92672">(</span>l <span style="color:#66d9ef">=&gt;</span> x <span style="color:#f92672">+:</span> l<span style="color:#f92672">))</span>
        <span style="color:#66d9ef">case</span> <span style="color:#a6e22e">Nil</span>     <span style="color:#66d9ef">=&gt;</span> <span style="color:#a6e22e">Eval</span><span style="color:#f92672">.</span>now<span style="color:#f92672">(</span><span style="color:#a6e22e">Nil</span><span style="color:#f92672">)</span>
      <span style="color:#f92672">}</span>
    <span style="color:#f92672">}</span>

    <span style="color:#66d9ef">def</span> deepMap<span style="color:#f92672">(</span>value<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">JObject</span><span style="color:#f92672">)</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Eval</span><span style="color:#f92672">[</span><span style="color:#66d9ef">JObject</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span> <span style="color:#f92672">{</span>
      <span style="color:#a6e22e">Eval</span><span style="color:#f92672">.</span>always<span style="color:#f92672">(</span>value<span style="color:#f92672">).</span>flatMap <span style="color:#f92672">{</span>
        <span style="color:#66d9ef">case</span> value<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">JValue</span> <span style="color:#f92672">=&gt;</span>
          value <span style="color:#66d9ef">match</span> <span style="color:#f92672">{</span>
            <span style="color:#66d9ef">case</span> <span style="color:#a6e22e">JString</span><span style="color:#f92672">(</span>value<span style="color:#f92672">)</span> <span style="color:#66d9ef">=&gt;</span> <span style="color:#a6e22e">Eval</span><span style="color:#f92672">.</span>now<span style="color:#f92672">(</span><span style="color:#a6e22e">JString</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;String: &#34;</span> <span style="color:#f92672">+</span> value<span style="color:#f92672">))</span>
            <span style="color:#66d9ef">case</span> <span style="color:#a6e22e">JInt</span><span style="color:#f92672">(</span>value<span style="color:#f92672">)</span>    <span style="color:#66d9ef">=&gt;</span> <span style="color:#a6e22e">Eval</span><span style="color:#f92672">.</span>now<span style="color:#f92672">(</span><span style="color:#a6e22e">JInt</span><span style="color:#f92672">(</span>value <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span><span style="color:#f92672">))</span>
          <span style="color:#f92672">}</span>
        <span style="color:#66d9ef">case</span> <span style="color:#a6e22e">JArray</span><span style="color:#f92672">(</span>elems<span style="color:#f92672">)</span> <span style="color:#66d9ef">=&gt;</span> iterate<span style="color:#f92672">(</span>elems<span style="color:#f92672">).</span>map<span style="color:#f92672">(</span><span style="color:#a6e22e">JArray</span><span style="color:#f92672">)</span>
        <span style="color:#66d9ef">case</span> jstruct<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">JStruct</span> <span style="color:#f92672">=&gt;</span>
          <span style="color:#66d9ef">val</span> <span style="color:#f92672">(</span>fieldNames<span style="color:#f92672">,</span> jobject<span style="color:#f92672">)</span> <span style="color:#66d9ef">=</span> jstruct<span style="color:#f92672">.</span>fields<span style="color:#f92672">.</span>unzip
          iterate<span style="color:#f92672">(</span>jobject<span style="color:#f92672">).</span>map<span style="color:#f92672">(</span>ob <span style="color:#66d9ef">=&gt;</span> <span style="color:#a6e22e">JStruct</span><span style="color:#f92672">(</span>fieldNames<span style="color:#f92672">.</span>zip<span style="color:#f92672">(</span>ob<span style="color:#f92672">)))</span>
      <span style="color:#f92672">}</span>
    <span style="color:#f92672">}</span>

    deepMap<span style="color:#f92672">(</span>jo<span style="color:#f92672">).</span>value
  <span style="color:#f92672">}</span>

</code></pre></div><h3 id="code-breakdown">Code Breakdown</h3>
<p>From a high level point of view, we notice there are two functions now&hellip; instead of one.</p>
<p>and each functions calls the other function and so on and so forth.</p>
<p>I&rsquo;ve found it helpful when dealing with recursion to start with the stopping criteria.</p>
<p>In this case, we can look at the places where we call the Eval.now, and thats in the deepMap whenever we find a JValue. This is expected given the task at hand. notice that we could have abstracted the transformations applied on the Int or the String to another function (and it would have been better and more readable)&hellip;</p>
<p>Functionally speaking, we are given a JObject and we would like to traverse it and all its sub structures in order to find the JString or the JInt.</p>
<p>This is where the case of JArray and of JStruct come into play.</p>
<p>In case we have an array, we would like to go one level deeper into every element of said array, and apply the function on that element.</p>
<p>Calling <code>deepMap</code> does not help because of the accepted params. deepMap takes a JObject, but we need to pass that function a List of JObjects.</p>
<p>Additionally, we cannot map over every element of the Array and apply deepMap on each element, because we need to conserve the initial structure: an Array of JObjects in order to return an <code>Eval[JArray[JObject]]</code>. Applying the map on every element would have resulted in a:
<code>Eval[JArray[Eval[JObject]]]</code> which would no longer be compatible with the main return type of <code>Eval[JObject]</code></p>
<p>This is why we had to create another function <code>iterate</code>.</p>
<p>Iterate takes a sequence of JObects and decomposes it into head and tail. It applies the <code>deepMap</code> function to the head, and then calls itself one more tail but this time only passing the tail as a param. Eventually, we would have applied deepMap on every element of the Seq&hellip; we append all the elements together and return an <code>Eval[Seq[JObject]]</code></p>
<p>In the case of JArray, the return of <code>iterate</code> is inserted into the Object JArray making the final return type <code>Eval[JArray[JObject]]</code></p>
<p>As for the JStruct, the idea is pretty similar to that of the JArray, but we had to add a small manipulation in order to be able to reconstruct the Struct using the FieldNames so we unzipped the data and re-zipped it after applying the transformations. Note that the map on an eval will retrieve the entire JObject inside the Eval, not every element of the JObject.</p>
<p>And this was how <code>Eval</code> can be used to achieve stack safe mutual recursion.</p>
<h2 id="to-test-this-out">To Test This Out</h2>
<p>Run the below example to test the functions above:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">
  <span style="color:#66d9ef">val</span> identity<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">JObject</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">JStruct</span><span style="color:#f92672">(</span>
    <span style="color:#a6e22e">List</span><span style="color:#f92672">[(</span><span style="color:#66d9ef">String</span>, <span style="color:#66d9ef">JObject</span><span style="color:#f92672">)](</span>
      <span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Name&#34;</span><span style="color:#f92672">,</span> <span style="color:#a6e22e">JString</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Fares&#34;</span><span style="color:#f92672">)),</span>
      <span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Age&#34;</span><span style="color:#f92672">,</span> <span style="color:#a6e22e">JInt</span><span style="color:#f92672">(</span><span style="color:#ae81ff">23</span><span style="color:#f92672">)),</span>
      <span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Profession&#34;</span><span style="color:#f92672">,</span>
       <span style="color:#a6e22e">JArray</span><span style="color:#f92672">(</span><span style="color:#a6e22e">List</span><span style="color:#f92672">[</span><span style="color:#66d9ef">JObject</span><span style="color:#f92672">](</span><span style="color:#a6e22e">JString</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Google Cloud Professional Data Engineer&#34;</span><span style="color:#f92672">),</span>
                            <span style="color:#a6e22e">JString</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Apache Spark Developer&#34;</span><span style="color:#f92672">))))</span>
    <span style="color:#f92672">))</span>

  println<span style="color:#f92672">(</span>updateJObject<span style="color:#f92672">(</span>identity<span style="color:#f92672">))</span>

  <span style="color:#75715e">// JStruct(List((Name,JString(String: Fares)), (Age,JInt(24)), (Profession,JArray(List(JString(String: Google Cloud Professional Data Engineer), JString(String: Apache Spark Developer))))))
</span><span style="color:#75715e"></span>
</code></pre></div><h2 id="some-metrics">Some Metrics</h2>
<p>Erik Osheim (@non) ran a benchmark to compare <code>Eval</code>, <code>TailRec library</code> and <code>Trampoline technic</code>. Here are the results (Sep. 2015):</p>
<table>
<thead>
<tr>
<th align="center">Benchmark</th>
<th align="center">Mode</th>
<th align="center">Cnt</th>
<th align="center">Score</th>
<th align="center">Error</th>
<th align="center">Units</th>
</tr>
</thead>
<tbody>
<tr>
<td align="center">TrampolineBench.eval</td>
<td align="center">thrpt</td>
<td align="center">3</td>
<td align="center">23049.351</td>
<td align="center">± 3891.576</td>
<td align="center">ops/s</td>
</tr>
<tr>
<td align="center">TrampolineBench.stdlib</td>
<td align="center">thrpt</td>
<td align="center">3</td>
<td align="center">11827.608</td>
<td align="center">± 1919.654</td>
<td align="center">ops/s</td>
</tr>
<tr>
<td align="center">TrampolineBench.trampoline</td>
<td align="center">thrpt</td>
<td align="center">3</td>
<td align="center">5743.017</td>
<td align="center">±  197.309</td>
<td align="center">ops/s</td>
</tr>
</tbody>
</table>
<p>Source: <a href="https://github.com/non/cats/tree/topic/eval-call-bench">https://github.com/non/cats/tree/topic/eval-call-bench</a> and <a href="https://gitter.im/typelevel/cats?at=55f07c1ce30ef74f74f95d3a">https://gitter.im/typelevel/cats?at=55f07c1ce30ef74f74f95d3a</a></p>
]]></content>
        </item>
        
        <item>
            <title>Crash Course in Machine Learning</title>
            <link>https://fares.codes/posts/crash-course-in-machine-learning/</link>
            <pubDate>Mon, 09 Dec 2019 10:00:00 +0000</pubDate>
            
            <guid>https://fares.codes/posts/crash-course-in-machine-learning/</guid>
            <description>I take article requests now&amp;hellip; 😛
The following article will be a quick overview of classical machine learning and the different types and algorithms out there.
Don&amp;rsquo;t expect any code implementation or a hands-on lab this is just to provide an overview of the types of machine learning algorithms and when those can be used.
On a high level, we can think of a machine learning model as a black box.</description>
            <content type="html"><![CDATA[<p>I take article requests now&hellip; 😛</p>
<p>The following article will be a quick overview of classical machine learning and the different types and algorithms out there.</p>
<p>Don&rsquo;t expect any code implementation or a hands-on lab this is just to provide an overview of the types of machine learning algorithms and when those can be used.</p>
<p>On a high level, we can think of a machine learning model as a black box. One that will take in some input data, do something with that data and then spit out some output data.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">                    +-------------------------+
Input Data ------&gt;  | Machine Learning Model  | ------&gt; Output Data
                    +-------------------------+

</code></pre></div><p>This black box however needs to be trained. This is where the word <code>Learning</code> comes from.</p>
<p>Similarly, on a very high level, Machine learning models can be broken down into two categories: <code>Supervised</code> and <code>Unsupervised</code>. Those categories relate to how this model will be trained.</p>
<hr>
<h2 id="supervised-learning">Supervised Learning</h2>
<p>In supervised machine learning, We rely on a <code>training dataset</code> to teach the ML model how to make accurate future predictions. We say that we have a labeled dataset. That is a dataset containing both the input data (features) and for each input data, the corresponding output data (prediction).</p>
<p>Supervised Learning looks like this:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">
                    +-------------------------+
Input Data  -----&gt;  |     Machine learning    | ------&gt; Machine Learning
Output Data -----&gt;  |        Algorithm        |             Model
                    +-------------------------+


   Real             +-------------------------+            Real
Input Data ------&gt;  | Machine Learning Model  | ------&gt; Output Data
                    +-------------------------+

</code></pre></div><p>Here&rsquo;s an example for a more concrete understanding.</p>
<p>Assume this is out training data:</p>
<table>
<thead>
<tr>
<th align="center">Name</th>
<th align="center">Age</th>
<th align="center">Profession</th>
<th align="center">Car</th>
<th align="center">Salary</th>
</tr>
</thead>
<tbody>
<tr>
<td align="center">Danny</td>
<td align="center">36</td>
<td align="center">HR Manager</td>
<td align="center">Mercedes</td>
<td align="center">126,000</td>
</tr>
<tr>
<td align="center">Eric</td>
<td align="center">25</td>
<td align="center">Software Engineer</td>
<td align="center">Toyota</td>
<td align="center">45,000</td>
</tr>
<tr>
<td align="center">Sarah</td>
<td align="center">45</td>
<td align="center">CEO</td>
<td align="center">BMW</td>
<td align="center">170,000</td>
</tr>
<tr>
<td align="center">Emily</td>
<td align="center">21</td>
<td align="center">Art Major</td>
<td align="center">N/A</td>
<td align="center">10,000</td>
</tr>
</tbody>
</table>
<p>If I were to hide the last column and ask you to predict who has the highest salary&hellip; Intuitively you&rsquo;d say that that person is most likely in some sort of managerial position, is a bit older in age and drives a nice car&hellip; I&rsquo;m not saying its always the case (Kylie Jenner became the youngest billionaire ever at 21&hellip; 🤦‍♂️) ok pardon the digression&hellip; It&rsquo;s not always the case but it is the case in general&hellip;</p>
<p>This is exactly what we&rsquo;ll be doing with our model. We will give it the input data called features, well give it a lot of data (10,000 to 100,000) and for each row of feature, well give the model the correct prediction (in this case the salary). We will then ask our model to learn what makes people have a high salary.</p>
<p>Later on, we will use that trained model to make actual prediction for people whose salaries are truly unknown to us.</p>
<p>But how can we trust our model and more importantly how can we trust its predictions&hellip; There are a lot of techniques to validate a trained model, but the simplest is this:</p>
<p>Split the labeled data into two different sets. A training set that we will feed to the machine learning algorithm, and a testing set that we will use to validate the predictions of the models.
Once the model is trained, we will hide the <code>Salary</code> Column of the testing set and we will ask the model to predict the salaries of the testing data. Then we will compare the results of the model with our actual results.</p>
<hr>
<p>There are two subcategories in <code>Supervised Learning</code>: <code>Classification</code> and <code>Regression</code>. Those depend on the nature of the value to be predicted.</p>
<h3 id="classification">Classification</h3>
<p>Like the name indicates, in classification, we class features into a specific category (also called classes). For example, if we&rsquo;re predicting if a certain credit card transaction is fraudulent or not, we&rsquo;d be training a classification model. More specifically, a two class classification model: A transaction can be <code>Fraudulent</code> or it can be <code>Non Fraudulent</code>.
If We were predicting if an email is <code>Spam</code> or <code>Personal</code> or <code>Business</code> then we&rsquo;d also be training a classification model. But this time, it&rsquo;ll be a three class classification model, because an email can fall into one of three categories.</p>
<h4 id="some-classification-algorithms">Some Classification Algorithms</h4>
<ul>
<li>
<p>Support Vector Machines (SVM)</p>
</li>
<li>
<p>Decision Trees</p>
</li>
<li>
<p>Logistic Regression (despite its name 😝)</p>
</li>
<li>
<p>K Nearest Neighbor (KNN)</p>
</li>
<li>
<p>Naive Bayes Classifier</p>
</li>
</ul>
<h3 id="regression">Regression</h3>
<p>Unlike Classification, regression is where we try to predict a continuous value instead of a category.</p>
<p>For example, out previous case with the predictions of salaries is a regression problem. We are not trying to classify people as rich or not, we are attempting to predict the numerical value representing their salaries. Another example can be the prediction of the cost of a house based on X criteria.</p>
<h4 id="some-regression-algorithms">Some Regression Algorithms</h4>
<p>The most well known and easy to understand algorithm is the <code>Linear Regression</code>. Its when we try to model the data to a specific trend line. Using the famous: <code>y= a.X +b</code></p>
<p>Other algos include:</p>
<ul>
<li>
<p>Non Linear Regression</p>
</li>
<li>
<p>Ridge Regression</p>
</li>
<li>
<p>Lasso Regression</p>
</li>
<li>
<p>Elastic Regression</p>
</li>
</ul>
<hr>
<h2 id="unsupervised-learning">Unsupervised Learning</h2>
<p>In unsupervised learning, the dataset is not labeled. The ML algorithm will attempt to find certain patterns or groups in the dataset.
With unsupervised learning, we are also unsure of the expected outcome.</p>
<p>So why is unsupervised learning useful? because sometimes, we simply don&rsquo;t really know what the correct output is. In other times, it can be too costly to label a specific dataset with 10,000 or 100,000 rows&hellip; Unsupervised learning is also very useful in anomaly detection, finding the outliers.</p>
<p>Unsupervised learning can be grouped into 3 categories:</p>
<ul>
<li>
<p>Clustering</p>
</li>
<li>
<p>Association Rules</p>
</li>
<li>
<p>Dimensionality Reduction</p>
</li>
</ul>
<h3 id="clustering">Clustering</h3>
<p>In Clustering models, we attempt to find groups of data points that are similar to one another.</p>
<h4 id="some-clustering-algorithms">Some Clustering Algorithms</h4>
<ul>
<li>
<p>K-Means Clustering</p>
</li>
<li>
<p>K-NN Clustering</p>
</li>
<li>
<p>Hierarchical Clustering</p>
</li>
</ul>
<h3 id="association-rules">Association Rules</h3>
<p>I bet you&rsquo;ve done one of the following: bought a item off Amazon, watched a YouTube video, binged watched a series on Netflix, listened to a playlist on Spotify&hellip;</p>
<p>They all have one thing in common, they all recommend us even more products.</p>
<p>How do they do it?</p>
<p>Humans are inherently predictable. If 5 people watched the same 10 series on Netflix, odds are they have similar taste in series&hellip; So if one of those 5 people started watching a new series, we could recommend it to others as well.</p>
<p>Similarly for supermarkets and Amazon&hellip; Someone who recently bought a printer will most likely also buy some paper to go with it.</p>
<p>Those are called association rules. We associate product A with product B because we assume that if a person buys product A, he is most likely to also buy product B. Keep in mind that it might not work the other way around: If I recently bought a printer, ill most likely buy paper. But if I recently bought some paper, I might not need a printer to go with them.</p>
<p>From a marketing perspective, association rules are interesting because they&rsquo;re a way to increase sales.</p>
<h4 id="some-association-rules-algorithms">Some Association Rules Algorithms</h4>
<ul>
<li>
<p>Apriori Algorithm</p>
</li>
<li>
<p>FP Growth Algorithm</p>
</li>
</ul>
<h3 id="dimensionality-reduction">Dimensionality Reduction</h3>
<p>From a mathematical perspective, dimensionality reduction is the process of reducing the number of random variables under consideration by obtaining a set of principal variables.</p>
<p>If this doesn&rsquo;t make any sense, its ok&hellip; here&rsquo;s a more concrete example:</p>
<table>
<thead>
<tr>
<th align="center">Name</th>
<th align="center">Age</th>
<th align="center">Profession</th>
<th align="center">Car</th>
<th align="center">Salary in $</th>
<th align="center">Salary in €</th>
</tr>
</thead>
<tbody>
<tr>
<td align="center">Danny</td>
<td align="center">36</td>
<td align="center">HR Manager</td>
<td align="center">Mercedes</td>
<td align="center">126,000</td>
<td align="center">113309.36</td>
</tr>
<tr>
<td align="center">Eric</td>
<td align="center">25</td>
<td align="center">Software Engineer</td>
<td align="center">Toyota</td>
<td align="center">45,000</td>
<td align="center">40467.63</td>
</tr>
<tr>
<td align="center">Sarah</td>
<td align="center">45</td>
<td align="center">CEO</td>
<td align="center">BMW</td>
<td align="center">170,000</td>
<td align="center">152877.70</td>
</tr>
<tr>
<td align="center">Emily</td>
<td align="center">21</td>
<td align="center">Art Major</td>
<td align="center">N/A</td>
<td align="center">10,000</td>
<td align="center">8992.81</td>
</tr>
</tbody>
</table>
<p>There is a linear correlation between the two columns <code>Salaries in $</code> and <code>Salaries in €</code>. One of the two columns does not bring in any new information and so its just noise in the data.</p>
<p>With Dimensionality Reduction, this type of correlation can be detected and removed.</p>
<h4 id="some-dimensionality-reduction-algorithms">Some Dimensionality Reduction Algorithms</h4>
<ul>
<li>
<p>Principal Component Analysis (PCA)</p>
</li>
<li>
<p>Linear Discriminant Analysis (LDA)</p>
</li>
<li>
<p>Generalized Discriminant Analysis (GDA)</p>
</li>
</ul>
<hr>
]]></content>
        </item>
        
        <item>
            <title>Passing the Scrum Master Certification</title>
            <link>https://fares.codes/posts/passing-the-scrum-master-certification/</link>
            <pubDate>Sun, 03 Nov 2019 12:00:00 +0000</pubDate>
            
            <guid>https://fares.codes/posts/passing-the-scrum-master-certification/</guid>
            <description>The Professional Scrum Master Certification level 1 is one of those easy certifications you can easily obtain by reading a little bit about scrum and doing a couple mock tests.
This article will compile a list of useful resources that will help learn more about the scrum framework and eventually pass the certification.
I highly suggest reading the official scrum guide. It is short and simple to read. With that said I will outline below the most important parts of each section and then mention important points to keep in mind while passing the scrum certification.</description>
            <content type="html"><![CDATA[<p>The Professional Scrum Master Certification level 1 is one of those easy certifications you can easily obtain by reading a little bit about scrum and doing a couple mock tests.</p>
<p>This article will compile a list of useful resources that will help learn more about the scrum framework and eventually pass the certification.</p>
<p>I highly suggest reading the official scrum guide. It is short and simple to read. With that said I will outline below the most important parts of each section and then mention important points to keep in mind while passing the scrum certification.</p>
<h2 id="highlights-from-the-scrum-guide">Highlights from the Scrum Guide</h2>
<h3 id="definition-of-scrum">Definition of SCRUM</h3>
<p>Scrum is a <code>lightweight framework</code>that is based on <code>empirical process control theory</code>. This framework is used to create and maintain complex products.
Being empirical, means that scrum extracts its knowledge from experience.</p>
<p>Scrum relies on small teams of people that are <code>highly flexible</code> and <code>adaptive</code></p>
<h3 id="scrum-theory">Scrum Theory</h3>
<p>Scrum is built on three main pillars:</p>
<ol>
<li>
<p>Transparency:</p>
<p>The work of everyone is visible to all the people in the organization.</p>
<p>Some example of where we find transparency in scrum:</p>
<ul>
<li>
<p>During the daily stand up meeting, every member of the dev team talks about his work and issues he is having. this allows everyone to have an idea of what everyone else is doing, and potentially helping solve some of the encountered issues</p>
</li>
<li>
<p>The Definition of Done (DOD) is another example of transparency in scrum. it allows the dev team and the PO to have an idea about what will be done.</p>
</li>
</ul>
</li>
<li>
<p>Inspection</p>
<p>Inspection should be done frequently to make sure there are no unwanted variances from the sprint goal.
An example of inspection is the sprint review during which a team can hold a demo.</p>
</li>
<li>
<p>Adaptation</p>
<p>If a person detects that a particular process has deviated outside of acceptable limits (and that the resulting product will be impacted/unacceptable) then that process must be adjusted <em>as soon as possible</em> to minimize further deviations.</p>
<p>There are 4 official opportunities to inspect and adapt in scrum:</p>
<ul>
<li>Sprint Planning</li>
<li>Daily Scrum</li>
<li>Sprint Review</li>
<li>Sprint Retrospective</li>
</ul>
</li>
</ol>
<h3 id="scrum-values">Scrum Values</h3>
<p>The 5 Scrum Values are:</p>
<ul>
<li>Commitment</li>
<li>Courage</li>
<li>Focus</li>
<li>Openness</li>
<li>Respect</li>
</ul>
<h3 id="the-scrum-team">The Scrum Team</h3>
<p>The Scrum Teams are self organizing (They chose how to best accomplish the work and not directed by someone) and cross functional (they have the necessary skills to accomplish all the work without depending on others outside the scrum team).
The Scrum Team consists of:</p>
<h4 id="the-product-owner">The Product Owner</h4>
<p>The product owners job is to maximize the value of the work done by the development team. He is the only person responsible for managing the product backlog by:</p>
<ul>
<li>Clearly expressing P.B items</li>
<li>Ordering the P.B by priority</li>
<li>The P.B items should be visible, transparent and clear to all.</li>
</ul>
<h4 id="the-development-team">The Development Team</h4>
<p>The Dev team is responsible for doing the work and delivering a potentially releasable increment of the product.</p>
<p>A done increment is required at the Sprint Review.</p>
<p>The dev team should have the following characteristics:</p>
<ul>
<li><em>Self Organizing</em> They organize amongst themselves to turn product backlog item to a product increment</li>
<li><em>Cross Functional</em> The Dev team should have the skills necessary to create the product increment</li>
<li><em>No Titles</em> There are no titles inside the dev team</li>
<li><em>No Sub-Teams</em> regardless of the work being done. No testing team, business analysts&hellip;</li>
<li><em>Accountability belongs to the entire Dev Team</em></li>
</ul>
<p>The Dev team should be between 3 and 9 people. Making the scrum team between 5 and 11 people</p>
<h4 id="the-scrum-master">The Scrum Master</h4>
<p>The keywords that you will often hear associated to the scrum master are:</p>
<ul>
<li>Facilitator</li>
<li>Removes Impediments</li>
</ul>
<p>The scrum masters role is also to support the theory of scrum and help everyone apply it correctly.</p>
<p>The Scrum Master can support the PO by finding techniques to effectively manage the product backlog, maximize the value of the work and facilitate scrum events.</p>
<p>The Scrum Master can also support the dev team by teaching them to be self organized and cross functional as well as create a high value product.</p>
<p>The Scrum Master also supports the Organization as a whole by coaching it in its scrum adoption, increasing the productivity of the scrum team and working with other scrum masters to increase the effectiveness of scrum within the organization.</p>
<h3 id="scrum-events">Scrum Events</h3>
<p>All events in Scrum are time boxed. A Sprint has a fixed duration and cannot be shortened or lengthened.
Each event in scrum is an opportunity to inspect and adapt. They are designed to make the work more transparent. So omitting one of those events will lead to a loss in transparency and an inability to inspect and adapt.</p>
<h4 id="the-sprint">The Sprint</h4>
<p>A Sprint is time boxed at one month or less. Its duration is fixed and does not change during a sprint. During a sprint a Done increment of a potentially releasable software is created.</p>
<p>During a Sprint:</p>
<ul>
<li>No change is allowed if it endangers the Sprint goal</li>
<li>Quality goal does not decrease</li>
<li>Scope may be changed and re-negotiated between the PO and the Dev Team as more is learned</li>
</ul>
<p>A Sprint may be cancelled by the product owner (only the product owner) if the sprint goal becomes obsolete.
When a Sprint is cancelled, any completed &ldquo;Done&rdquo; items are reviewed and if it is potentially releasable, the PO typically accepts it. All incomplete work is re-estimated and put back in the Product Backlog.</p>
<h4 id="sprint-planning">Sprint Planning</h4>
<p>The entire Scrum Team collaborated to create a plan for the Sprint.</p>
<p>The Sprint Planning is Time-Boxed to 8 hours for a one month Sprint. The scrum master has to make sure the event takes place and that it remains within its allocated time box.</p>
<p>The input of the sprint planning are:</p>
<ul>
<li>The Product Backlog</li>
<li>The latest done increment</li>
<li>The projected capacity of the dev team</li>
<li>The past performance of the dev team</li>
</ul>
<p>During the Sprint Planning, only the dev team can assess what can be done. The items to be selected are solely up to the dev team.</p>
<p>The sprint goal provide guidance to the dev team as to why it is building the increment.</p>
<p>The dev team may invite other (external) people to the sprint planning to provide expert advice.</p>
<h4 id="daily-scrum">Daily Scrum</h4>
<p>The daily scrum is time boxed to 15 minutes. It is held at the same time and place everyday to reduce complexity.</p>
<p>The daily scrum should be organized in a way to better achieve the sprint goal. Scrum suggests the following format:</p>
<ul>
<li>What did I do yesterday that helped achieve the sprint goal?</li>
<li>What will I do today to help achieve the sprint goal?</li>
<li>Do I see any impediments that prevent me from achieving the sprint goal?</li>
</ul>
<p>The scrum master is only responsible for insuring the dev team holds the meeting and that the latter is kept within its time boxed.
The daily scrum is an internal meeting for the dev team. if others are present, the scrum master makes sure they do not disturb the meeting.</p>
<h4 id="sprint-review">Sprint Review</h4>
<p>The sprint review is held at the end of every sprint and is time boxed at 4 hours for a one month sprint. During this ceremony, the scrum team and the stakeholders collaborate on what was done during the sprint and on the next thing that could be done to optimize value.</p>
<p>The result of the sprint review is a revised product backlog that define the probable items for the sprint planning.</p>
<h4 id="sprint-retrospective">Sprint Retrospective</h4>
<p>The sprint retrospective is an opportunity for inspection and adaptation. It is time-boxed at 3 hours for a one month sprint.</p>
<p>The scrum master insures that this meeting is positive and productive and participates as a peer team member.</p>
<p>The purpose is to:</p>
<ul>
<li>Inspect how the last sprint went</li>
<li>Identify and order the major items that went well and identify potential improvements</li>
<li>Create a plan for implementing improvements</li>
</ul>
<h3 id="scrum-artifacts">Scrum Artifacts</h3>
<p>Artifacts by scrum are designed to maximize transparency.</p>
<h4 id="product-backlog">Product Backlog</h4>
<p>The Product backlog is an ordered list of everything that is known to be needed in the product.
The PO is responsible for the product backlog including its ordering and content. It is never complete, it evolves as the product evolves. as long as a product exists, the PB also exits.</p>
<p>If multiple scrum teams are working on the same product, they all share the same product backlog but different Sprint Backlog. If that is the case, it becomes imperative that everyone has a clear understanding of what is to be done in the increment.</p>
<p>No more than 10% of the Dev Team capacity should be spent on the product backlog refinement.</p>
<h4 id="sprint-backlog">Sprint Backlog</h4>
<p>The Sprint Backlog is the set of product backlog items selected for the sprint. It is owned by the Dev team and can contain items that are not related to the product backlog. It includes at least one high priority process improvement identified in the previous retrospective.</p>
<p>Monitoring Sprint progress in the sole responsibility of the Development Team.</p>
<h4 id="the-increment">The Increment</h4>
<p>The increment is the sum of all the product backlog item completed during a spring and the value of all previous increments.</p>
<h3 id="the-definition-of-done">The Definition of Done</h3>
<p>The definition of &ldquo;Done&rdquo; is a shared understanding of what it means for a work to be done. It helps provide transparency and guide the dev teams in picking the number of product backlog items to select for the upcoming sprint.</p>
<p>All scrum team working on the same product must follow the same definition of done (to a minimum)</p>
<h2 id="list-of-key-points-for-the-test">List of Key Points for the Test</h2>
<p>There are some key points you need to keep in mind that will allow you to pass the test.</p>
<ul>
<li>
<p>Scrum is based on <code>Empirical Process Control Theory</code></p>
</li>
<li>
<p>The scrum team: consists of the Dev team + the product owner (PO) + the Scrum Master</p>
</li>
<li>
<p>Scrum is a light framework for developing and maintaining complex products (not necessarily software)</p>
</li>
<li>
<p>You cannot pick an choose components from scrum as you please. every component is essential</p>
</li>
<li>
<p>The Dev team is a self organizing unit</p>
</li>
<li>
<p>Scrum recognizes no specialized roles in the dev team (tester, front, back&hellip;) and no hierarchy.</p>
</li>
<li>
<p>The Dev team as a whole should have all the skills necessary to accomplish the &ldquo;work&rdquo; (commonly known as User Stories/Features&hellip;)</p>
</li>
<li>
<p>The Dev team should do all the work on the task including the tests. (everything in the definition of done). which means that the scrum framework does not recognize teams such as &ldquo;Integration Testers&rdquo;, &ldquo;quality assurance&rdquo; ect&hellip;</p>
</li>
<li>
<p>Know the time limits of the different scrum ceremonies. A new sprint starts when the time limit of the previous sprint expires.</p>
</li>
<li>
<p>The scrum master is here to facilitate. His job is not to attend all the dailies and make sure its below 15 min (time-box) his job is to facilitate the work of the dev team and po. he should also insure that the dev team do hold the daily.</p>
</li>
<li>
<p>The Dev team delivers the product in small increments. at the end of the sprint, the increment should be potentially releasable to production. but it doest have to be released (only when it makes sense to do so)</p>
</li>
<li>
<p>When multiple dev teams are working on the same product, they should:</p>
<ul>
<li>Make sure they have a clear definition of the requirements.</li>
<li>It is highly advisable that their work be integrated at the end of each sprint so that the PO can inspect the work done by the dev team</li>
</ul>
</li>
<li>
<p>The dev team determines how the work will be done as well as the amount of work to take on (with the coordination of the PO)</p>
</li>
<li>
<p>Adding a new member to the dev team will decrease the velocity for a short amount of time before the latter starts picking up again.</p>
</li>
<li>
<p>Product backlog is ordered by priority</p>
</li>
<li>
<p>The Product Owner is the expert in the business part of the product</p>
</li>
<li>
<p>The PO has a final say in matters of product backlog. Dev teams have a final say in matters of Sprint Backlog</p>
</li>
<li>
<p>A dev team member cannot <code>own</code> a sprint backlog item. The entire dev team is responsible for all the items on the sprint backlog.</p>
</li>
</ul>
<h2 id="update-additional-resources">Update: Additional Resources</h2>
<p>Of the 2 or 3 people that actually read this blog (from time to time), someone asked me to add some additional resources. More specifically mock tests that can be used to further complete one&rsquo;s understanding of the subject and make sure that one is ready to pass the exam. So here&rsquo;s a short list of useful resources:</p>
<ul>
<li>
<p><a href="https://mlapshin.com/index.php/scrum-quizzes">https://mlapshin.com/index.php/scrum-quizzes</a> (both learning mode and real mode)</p>
</li>
<li>
<p><a href="https://www.examtopics.com/exams/scrum/psm-i/">https://www.examtopics.com/exams/scrum/psm-i/</a></p>
</li>
<li>
<p><a href="https://quizlet.com/261765971/scrum-master-flash-cards/">https://quizlet.com/261765971/scrum-master-flash-cards/</a> Fun flashcards for your daily commute 🙃</p>
</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Refined Types In Scala</title>
            <link>https://fares.codes/posts/refined-types-in-scala/</link>
            <pubDate>Mon, 14 Oct 2019 13:00:00 +0000</pubDate>
            
            <guid>https://fares.codes/posts/refined-types-in-scala/</guid>
            <description>The following is my interpretation of the Refined Types presentation
In previous articles, I wrote about some issues surrounding the use of String parameters (passing an accountId instead of a userId and so on&amp;hellip;)
Lets quickly recap:
final case class UserBankAccount(userId: String, accountId: String, amount: Double) UserBankAccount(&amp;#34;user_10023&amp;#34;, &amp;#34;account_28179&amp;#34;, 2000) // Ok UserBankAccount(&amp;#34;account_28179&amp;#34;, &amp;#34;user_10023&amp;#34;, 2000) // Possible bug It would be cool if we had a type safe solution that would prevent the code from compiling&amp;hellip;</description>
            <content type="html"><![CDATA[<p>The following is my interpretation of the <a href="http://fthomas.github.io/talks/2016-05-04-refined/">Refined Types presentation</a></p>
<p>In previous articles, I wrote about some issues surrounding the use of <code>String</code> parameters (passing an accountId instead of a userId and so on&hellip;)</p>
<p>Lets quickly recap:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#66d9ef">final</span> <span style="color:#66d9ef">case</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">UserBankAccount</span><span style="color:#f92672">(</span>userId<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">String</span><span style="color:#f92672">,</span> accountId<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">String</span><span style="color:#f92672">,</span> amount<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Double</span><span style="color:#f92672">)</span>

<span style="color:#a6e22e">UserBankAccount</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;user_10023&#34;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;account_28179&#34;</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">2000</span><span style="color:#f92672">)</span> <span style="color:#75715e">// Ok
</span><span style="color:#75715e"></span><span style="color:#a6e22e">UserBankAccount</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;account_28179&#34;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;user_10023&#34;</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">2000</span><span style="color:#f92672">)</span> <span style="color:#75715e">// Possible bug
</span></code></pre></div><p>It would be cool if we had a type safe solution that would prevent the code from compiling&hellip;</p>
<p>This is where value classes come in (discussed in an earlier post):</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#66d9ef">final</span> <span style="color:#66d9ef">case</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">UserBankAccount</span><span style="color:#f92672">(</span>userId<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">UserId</span><span style="color:#f92672">,</span> accountId<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">AccountId</span><span style="color:#f92672">,</span> amount<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Double</span><span style="color:#f92672">)</span>

<span style="color:#66d9ef">final</span> <span style="color:#66d9ef">case</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">UserId</span><span style="color:#f92672">(</span>id<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">String</span><span style="color:#f92672">)</span> <span style="color:#66d9ef">extends</span> <span style="color:#a6e22e">AnyVal</span>
<span style="color:#66d9ef">final</span> <span style="color:#66d9ef">case</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">AccountId</span><span style="color:#f92672">(</span>id<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">String</span><span style="color:#f92672">)</span> <span style="color:#66d9ef">extends</span> <span style="color:#a6e22e">AnyVal</span>
</code></pre></div><p>With this implementation, the following would no longer compile:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#a6e22e">UserBankAccount</span><span style="color:#f92672">(</span><span style="color:#a6e22e">AccountId</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;account_28179&#34;</span><span style="color:#f92672">),</span> <span style="color:#a6e22e">UserId</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;user_10023&#34;</span><span style="color:#f92672">),</span> <span style="color:#ae81ff">2000</span><span style="color:#f92672">)</span>
</code></pre></div><p>And its great&hellip; provides compile time safety and we already know that value classes do not instantiate.
But we still run the risk of messing things up, since value classes are wrappers around simple types.</p>
<p>So we could still end up writing something like this:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#a6e22e">UserBankAccount</span><span style="color:#f92672">(</span><span style="color:#a6e22e">UserId</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;account_28179&#34;</span><span style="color:#f92672">),</span> <span style="color:#a6e22e">AccountId</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;user_10023&#34;</span><span style="color:#f92672">),</span> <span style="color:#ae81ff">2000</span><span style="color:#f92672">)</span>
</code></pre></div><p>&hellip; We could add some extra validation:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">
  <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">case</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">UserId</span><span style="color:#f92672">(</span>id<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">String</span><span style="color:#f92672">)</span> <span style="color:#66d9ef">extends</span> <span style="color:#a6e22e">AnyVal</span>
  <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">case</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">AccountId</span><span style="color:#f92672">(</span>id<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">String</span><span style="color:#f92672">)</span> <span style="color:#66d9ef">extends</span> <span style="color:#a6e22e">AnyVal</span>

  <span style="color:#66d9ef">object</span> <span style="color:#a6e22e">UserId</span> <span style="color:#f92672">{</span>
    <span style="color:#66d9ef">def</span> fromString<span style="color:#f92672">(</span>s<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">String</span><span style="color:#f92672">)</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Option</span><span style="color:#f92672">[</span><span style="color:#66d9ef">UserId</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span> <span style="color:#f92672">{</span>
      <span style="color:#66d9ef">def</span> isUserId<span style="color:#f92672">(</span>s<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">String</span><span style="color:#f92672">)</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Boolean</span> <span style="color:#f92672">=</span> s<span style="color:#f92672">.</span>startsWith<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;user_&#34;</span><span style="color:#f92672">)</span>

      <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>isUserId<span style="color:#f92672">(</span>s<span style="color:#f92672">))</span> <span style="color:#a6e22e">Some</span><span style="color:#f92672">(</span><span style="color:#a6e22e">UserId</span><span style="color:#f92672">(</span>s<span style="color:#f92672">))</span> <span style="color:#66d9ef">else</span> <span style="color:#a6e22e">None</span>
    <span style="color:#f92672">}</span>
  <span style="color:#f92672">}</span>

  <span style="color:#66d9ef">object</span> <span style="color:#a6e22e">AccountId</span> <span style="color:#f92672">{</span>
    <span style="color:#66d9ef">def</span> fromString<span style="color:#f92672">(</span>s<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">String</span><span style="color:#f92672">)</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Option</span><span style="color:#f92672">[</span><span style="color:#66d9ef">AccountId</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span> <span style="color:#f92672">{</span>
      <span style="color:#66d9ef">def</span> isAccountId<span style="color:#f92672">(</span>s<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">String</span><span style="color:#f92672">)</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Boolean</span> <span style="color:#f92672">=</span> s<span style="color:#f92672">.</span>startsWith<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;account_&#34;</span><span style="color:#f92672">)</span>

      <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>isAccountId<span style="color:#f92672">(</span>s<span style="color:#f92672">))</span> <span style="color:#a6e22e">Some</span><span style="color:#f92672">(</span><span style="color:#a6e22e">AccountId</span><span style="color:#f92672">(</span>s<span style="color:#f92672">))</span> <span style="color:#66d9ef">else</span> <span style="color:#a6e22e">None</span>
    <span style="color:#f92672">}</span>
  <span style="color:#f92672">}</span>

</code></pre></div><p>This does indeed provide extra security and insures compile time type safety we would have to end up dealing with Options are return values and so on&hellip;</p>
<p>The above code could also benefit from using a for-comprehension but nevertheless, you get my point&hellip;</p>
<p>Clearly there must be a better way.</p>
<h2 id="refined-types">Refined Types</h2>
<p>Refined Types are simply:
a <code>base type</code> and a <code>predicate</code></p>
<p>It is a way to simply <code>Reduce</code> the <code>domain of our type</code></p>
<p>so the instances of a refined types are the instances of that base type that satisfy the predicate.</p>
<p>Example:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#66d9ef">type</span> <span style="color:#66d9ef">PositiveInt</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">Int</span> <span style="color:#a6e22e">Refined</span> <span style="color:#a6e22e">Positive</span>
</code></pre></div><p>Where PositiveInt is a subset of the type Int containing only positive numbers.</p>
<p>for this to work, we would have to add the following library to our <code>build.sbt</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">libraryDependencies <span style="color:#f92672">++=</span> <span style="color:#a6e22e">Seq</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;eu.timepit&#34;</span> <span style="color:#f92672">%%</span> <span style="color:#e6db74">&#34;refined&#34;</span> <span style="color:#f92672">%</span> <span style="color:#e6db74">&#34;0.9.10&#34;</span><span style="color:#f92672">)</span>
</code></pre></div><p>This would allow us to simply write:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#66d9ef">val</span> x<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">PositiveInt</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>
</code></pre></div><p>but what is we wrote:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#66d9ef">val</span> x<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">PositiveInt</span> <span style="color:#f92672">=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">2</span> <span style="color:#75715e">// would not compile
</span></code></pre></div><p>we would end up with the following error:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#a6e22e">Error</span><span style="color:#66d9ef">:</span><span style="color:#f92672">(</span><span style="color:#960050;background-color:#1e0010">46</span><span style="color:#f92672">,</span> <span style="color:#960050;background-color:#1e0010">25</span><span style="color:#f92672">)</span> <span style="color:#a6e22e">Predicate</span> failed<span style="color:#66d9ef">:</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">-</span><span style="color:#960050;background-color:#1e0010">2</span> <span style="color:#66d9ef">&gt;</span> <span style="color:#960050;background-color:#1e0010">0</span><span style="color:#f92672">)</span><span style="color:#66d9ef">.</span>
  <span style="color:#66d9ef">val</span> <span style="color:#66d9ef">y:</span> <span style="color:#66d9ef">PositiveInt</span> <span style="color:#f92672">=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">2</span>
</code></pre></div><p>Under the hood the actual code translates into:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#66d9ef">val</span> x<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">PositiveInt</span> <span style="color:#f92672">=</span> auto<span style="color:#f92672">.</span>autoRefineV<span style="color:#f92672">(</span><span style="color:#ae81ff">2</span><span style="color:#f92672">)(</span>refinedRefType<span style="color:#f92672">,</span> greaterValidate<span style="color:#f92672">(</span>natWitnessAs<span style="color:#f92672">(</span>witness0<span style="color:#f92672">,</span> toInt0<span style="color:#f92672">,</span> <span style="color:#a6e22e">IntIsIntegral</span><span style="color:#f92672">),</span> <span style="color:#a6e22e">IntIsIntegral</span><span style="color:#f92672">))</span>
</code></pre></div><p>But I think everyone prefers the implicit version :p</p>
<p>The library goes a lot further, you could write your own validation functions as well as use prebuilt ones.</p>
<p>Example of PreBuilt functions:</p>
<ul>
<li>
<p>Contains[U]: checks if a Traversable contains a value equal to U</p>
</li>
<li>
<p>Count[PA, PC]: counts the number of elements in a Traversable which satisfy the predicate PA and passes the result to the predicate PC</p>
</li>
<li>
<p>Empty: checks if a Traversable is empty</p>
</li>
<li>
<p>Forall[P]: checks if the predicate P holds for all elements of a Traversable</p>
</li>
<li>
<p>Exists[P]: checks if the predicate P holds for some elements of a Traversable</p>
</li>
<li>
<p>MinSize[N]: checks if the size of a Traversable is greater than or equal to N</p>
</li>
<li>
<p>MaxSize[N]: checks if the size of a Traversable is less than or equal to N</p>
</li>
<li>
<p>True: constant predicate that is always true</p>
</li>
<li>
<p>Not[P]: negation of the predicate P</p>
</li>
<li>
<p>And[A, B]: conjunction of the predicates A and B</p>
</li>
<li>
<p>Or[A, B]: disjunction of the predicates A and B</p>
</li>
<li>
<p>AllOf[PS]: conjunction of all predicates in PS</p>
</li>
<li>
<p>AnyOf[PS]: disjunction of all predicates in PS</p>
</li>
<li>
<p>OneOf[PS]: exclusive disjunction of all predicates in PS</p>
</li>
<li>
<p>Less[N]: checks if a numeric value is less than N</p>
</li>
<li>
<p>LessEqual[N]: checks if a numeric value is less than or equal to N</p>
</li>
<li>
<p>Greater[N]: checks if a numeric value is greater than N</p>
</li>
<li>
<p>GreaterEqual[N]: checks if a numeric value is greater than or equal to N</p>
</li>
<li>
<p>Positive: checks if a numeric value is greater than zero</p>
</li>
<li>
<p>Interval.Open[L, H]: checks if a numeric value is in the interval (L, H)</p>
</li>
<li>
<p>Interval.Closed[L, H]: checks if a numeric value is in the interval [L, H]</p>
</li>
<li>
<p>EndsWith[S]: checks if a String ends with the suffix S</p>
</li>
<li>
<p>MatchesRegex[S]: checks if a String matches the regular expression S</p>
</li>
<li>
<p>Regex: checks if a String is a valid regular expression</p>
</li>
<li>
<p>StartsWith[S]: checks if a String starts with the prefix S</p>
</li>
<li>
<p>Uri: checks if a String is a valid URI</p>
</li>
<li>
<p>Url: checks if a String is a valid URL</p>
</li>
</ul>
<p>So going back to our example, we would simply need to write:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">  <span style="color:#66d9ef">type</span> <span style="color:#66d9ef">UserId</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">String</span> <span style="color:#a6e22e">Refined</span> <span style="color:#a6e22e">StartsWith</span><span style="color:#f92672">[</span><span style="color:#66d9ef">W.`&#34;user_&#34;`.T</span><span style="color:#f92672">]</span>
  <span style="color:#66d9ef">type</span> <span style="color:#66d9ef">AccountId</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">String</span> <span style="color:#a6e22e">Refined</span> <span style="color:#a6e22e">StartsWith</span><span style="color:#f92672">[</span><span style="color:#66d9ef">W.`&#34;account_&#34;`.T</span><span style="color:#f92672">]</span>
  <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">case</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">UserBankAccount</span><span style="color:#f92672">(</span>userId<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">UserId</span><span style="color:#f92672">,</span>
                                   accountId<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">AccountId</span><span style="color:#f92672">,</span>
                                   amount<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Double</span><span style="color:#f92672">)</span>
</code></pre></div><p>and the code will cause a compile time error if a <code>user</code> or if an <code>account</code> do not meet the conditions set by the predicate.</p>
<p>source:</p>
<ol>
<li><a href="http://fthomas.github.io/talks/2016-05-04-refined/#1">Refined Types presentation</a></li>
<li><a href="https://medium.com/@Methrat0n/wtf-is-refined-5008eb233194">WTF is Refined</a></li>
</ol>
]]></content>
        </item>
        
        <item>
            <title>Value Classes in Scala</title>
            <link>https://fares.codes/posts/value-classes-in-scala/</link>
            <pubDate>Fri, 04 Oct 2019 20:55:00 +0000</pubDate>
            
            <guid>https://fares.codes/posts/value-classes-in-scala/</guid>
            <description>Before we look into value classes, lets start by why we might need them in the first place.
case class Client(id: Int, name: String) case class BankAccount(id: Int, clientId: Int, amount: Double) val account1 = BankAccount(1,1,100) val account2 = BankAccount(2,1,200) val account3 = BankAccount(1,2,1000) val client1 = Client(1,&amp;#34;Danny&amp;#34;) val client2 = Client(2, &amp;#34;Emily&amp;#34;) In this example, we have three bank accounts, two belonging to Danny and one to Emily.
Now we add a function that checks if two bank accounts belong to the same client:</description>
            <content type="html"><![CDATA[<p>Before we look into value classes, lets start by why we might need them in the first place.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#66d9ef">case</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Client</span><span style="color:#f92672">(</span>id<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Int</span><span style="color:#f92672">,</span> name<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">String</span><span style="color:#f92672">)</span>
<span style="color:#66d9ef">case</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">BankAccount</span><span style="color:#f92672">(</span>id<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Int</span><span style="color:#f92672">,</span> clientId<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Int</span><span style="color:#f92672">,</span> amount<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Double</span><span style="color:#f92672">)</span>

<span style="color:#66d9ef">val</span> account1 <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">BankAccount</span><span style="color:#f92672">(</span><span style="color:#ae81ff">1</span><span style="color:#f92672">,</span><span style="color:#ae81ff">1</span><span style="color:#f92672">,</span><span style="color:#ae81ff">100</span><span style="color:#f92672">)</span>
<span style="color:#66d9ef">val</span> account2 <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">BankAccount</span><span style="color:#f92672">(</span><span style="color:#ae81ff">2</span><span style="color:#f92672">,</span><span style="color:#ae81ff">1</span><span style="color:#f92672">,</span><span style="color:#ae81ff">200</span><span style="color:#f92672">)</span>
<span style="color:#66d9ef">val</span> account3 <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">BankAccount</span><span style="color:#f92672">(</span><span style="color:#ae81ff">1</span><span style="color:#f92672">,</span><span style="color:#ae81ff">2</span><span style="color:#f92672">,</span><span style="color:#ae81ff">1000</span><span style="color:#f92672">)</span>

<span style="color:#66d9ef">val</span> client1 <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">Client</span><span style="color:#f92672">(</span><span style="color:#ae81ff">1</span><span style="color:#f92672">,</span><span style="color:#e6db74">&#34;Danny&#34;</span><span style="color:#f92672">)</span>
<span style="color:#66d9ef">val</span> client2 <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">Client</span><span style="color:#f92672">(</span><span style="color:#ae81ff">2</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;Emily&#34;</span><span style="color:#f92672">)</span>
</code></pre></div><p>In this example, we have three bank accounts, two belonging to Danny and one to Emily.</p>
<p>Now we add a function that checks if two bank accounts belong to the same client:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#66d9ef">def</span> isSameOwner<span style="color:#f92672">(</span>bankAccountId1<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Int</span><span style="color:#f92672">,</span> bankAccountId2<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Int</span><span style="color:#f92672">)</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Boolean</span> <span style="color:#f92672">=</span> <span style="color:#f92672">???</span>
</code></pre></div><p>Now if we were to call the function with these parameters, the code will compile normally:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">isSameOwner<span style="color:#f92672">(</span>account1<span style="color:#f92672">.</span>id<span style="color:#f92672">,</span> client1<span style="color:#f92672">.</span>id<span style="color:#f92672">)</span>
<span style="color:#75715e">//or even
</span><span style="color:#75715e"></span>isSameOwner<span style="color:#f92672">(</span>account1<span style="color:#f92672">.</span>id<span style="color:#f92672">,</span> account2<span style="color:#f92672">.</span>clientId<span style="color:#f92672">)</span>
</code></pre></div><p>The reason this compiles is obvious, the function <code>isSameOwner</code> takes Int for parameters.</p>
<p>One possible solution would be to use tiny types in scala:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#66d9ef">case</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">ClientId</span><span style="color:#f92672">(</span>id<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Int</span><span style="color:#f92672">)</span>
<span style="color:#66d9ef">case</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">AccountId</span><span style="color:#f92672">(</span>id<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Int</span><span style="color:#f92672">)</span>

<span style="color:#66d9ef">case</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Client</span><span style="color:#f92672">(</span>clientId<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">ClientId</span><span style="color:#f92672">,</span> name<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">String</span><span style="color:#f92672">)</span>
<span style="color:#66d9ef">case</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">BankAccount</span><span style="color:#f92672">(</span>accountId<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">AccountId</span><span style="color:#f92672">,</span> clientId<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">ClientId</span><span style="color:#f92672">,</span> amount<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Double</span><span style="color:#f92672">)</span>

<span style="color:#66d9ef">def</span> isSameOwner<span style="color:#f92672">(</span>account1<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">AccountId</span><span style="color:#f92672">,</span> account2<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">AccountId</span><span style="color:#f92672">)</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Boolean</span> <span style="color:#f92672">=</span> <span style="color:#f92672">???</span>
</code></pre></div><p>The issue with this solutions becomes memory allocation at runtime.</p>
<p>Which is where value classes come in. The main benefit is avoiding allocating runtime objects. At compile time, we would have the case case and at runtime we would have the underlying data type.</p>
<p>So what are value classes officially?</p>
<p>Value classes are a new mechanism in Scala to avoid allocating runtime objects. This is accomplished through the definition of new AnyVal subclasses. (<a href="https://docs.scala-lang.org/overviews/core/value-classes.html)">https://docs.scala-lang.org/overviews/core/value-classes.html)</a></p>
<p>This means that value classes:</p>
<ol>
<li>
<p>Can only extend universal traits (ones that extend Any) and cannot be extended itself.</p>
</li>
<li>
<p>Can define a def but no val or var or classes&hellip;</p>
</li>
</ol>
<p>lets look at a very simple example:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">
<span style="color:#66d9ef">class</span> <span style="color:#a6e22e">User</span><span style="color:#f92672">(</span><span style="color:#66d9ef">val</span> userId<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Int</span><span style="color:#f92672">)</span> <span style="color:#66d9ef">extends</span> <span style="color:#a6e22e">AnyVal</span>

</code></pre></div><p>As we can see in this example, value classes contain one simple underlying data type and extend AnyVal.</p>
<p>Now lets look at the byte code generated by our example:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">int</span> <span style="color:#a6e22e">fares</span><span style="color:#f92672">();</span>
</code></pre></div><p>This practically means that at compile time we can use the class User, but are runtime, the value class is replaced by its underlying value of type int.</p>
<p>So How is this useful?</p>
<p>instead of writing the following lines:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#66d9ef">def</span> getAccountInfo<span style="color:#f92672">(</span>clientId<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Int</span><span style="color:#f92672">,</span> accountId<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Int</span><span style="color:#f92672">)</span> <span style="color:#66d9ef">=</span> <span style="color:#f92672">???</span>
</code></pre></div><p>and then running the risk of calling the function with accountId as the first param instead of the second (code would still compile)</p>
<p>We could use the refined types and transform it into something that is type-safe:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">  <span style="color:#66d9ef">case</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">ClientId</span><span style="color:#f92672">(</span><span style="color:#66d9ef">val</span> clientId<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Int</span><span style="color:#f92672">)</span> <span style="color:#66d9ef">extends</span> <span style="color:#a6e22e">AnyVal</span>
  <span style="color:#66d9ef">case</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">AccountId</span><span style="color:#f92672">(</span><span style="color:#66d9ef">val</span> accountId<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Int</span><span style="color:#f92672">)</span> <span style="color:#66d9ef">extends</span> <span style="color:#a6e22e">AnyVal</span>

  <span style="color:#66d9ef">def</span> getAccountInfo<span style="color:#f92672">(</span>clientId<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">ClientId</span><span style="color:#f92672">,</span> accountId<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">AccountId</span><span style="color:#f92672">)</span> <span style="color:#66d9ef">=</span> <span style="color:#f92672">???</span>

</code></pre></div><p>The second implementation would cause a compile time error if we try to call the function with the params inverted all while still giving us the same runtime performance.</p>
<h2 id="clearly-value-classes-are-great-but-whats-the-catch">Clearly Value Classes are great&hellip; but whats the catch</h2>
<p>from the scala documentation: Because the JVM does not support value classes, Scala sometimes needs to actually instantiate a value class.</p>
<p>There are 3 cases during which a value class is actually instantiated:</p>
<ul>
<li>a value class is treated as another type.</li>
<li>a value class is assigned to an array.</li>
<li>doing runtime type tests, such as pattern matching.</li>
</ul>
<p>The third case is rather simple, so lets look into the first two:</p>
<h3 id="when-a-value-class-is-treated-as-another-type">when a value class is treated as another type</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">
  <span style="color:#66d9ef">trait</span> <span style="color:#a6e22e">Person</span> <span style="color:#66d9ef">extends</span> <span style="color:#a6e22e">Any</span>

  <span style="color:#66d9ef">case</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Student</span><span style="color:#f92672">(</span><span style="color:#66d9ef">val</span> name<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">String</span><span style="color:#f92672">)</span> <span style="color:#66d9ef">extends</span> <span style="color:#a6e22e">AnyVal</span> <span style="color:#66d9ef">with</span> <span style="color:#a6e22e">Person</span>

  <span style="color:#66d9ef">def</span> getName<span style="color:#f92672">(</span>person<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Person</span><span style="color:#f92672">)</span> <span style="color:#66d9ef">=</span> <span style="color:#f92672">???</span>
  
  <span style="color:#66d9ef">val</span> student1<span style="color:#66d9ef">=</span> <span style="color:#a6e22e">Student</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Emily&#34;</span><span style="color:#f92672">)</span>
  
  getName<span style="color:#f92672">(</span>student1<span style="color:#f92672">)</span>

</code></pre></div><p>Because we are calling a function that takes a Person and we are then passing it a Student that extends Person, the value class will be instantiated.</p>
<h3 id="when-a-value-class-is-assigned-to-an-array">when a value class is assigned to an array</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">
<span style="color:#66d9ef">val</span> classroom <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">Array</span><span style="color:#f92672">[</span><span style="color:#66d9ef">Student</span><span style="color:#f92672">](</span>student1<span style="color:#f92672">)</span>

</code></pre></div><p>In that case, the array <code>classroom</code>, will actually contain the instances of <code>Student</code> and not just the underlying datatype <code>String</code></p>
<hr>
<p>Overall, value classes can prove to be very useful and their use could bring significant improvement to your code.</p>
]]></content>
        </item>
        
        <item>
            <title>Interactive Rebase for a Cleaner Git Commit History</title>
            <link>https://fares.codes/posts/interactive-rebase-for-a-cleaner-git-commit-history/</link>
            <pubDate>Tue, 03 Sep 2019 20:55:00 +0000</pubDate>
            
            <guid>https://fares.codes/posts/interactive-rebase-for-a-cleaner-git-commit-history/</guid>
            <description>Any article you read online about maintaining a clean project will mention a version control system (usually git) and will then talk about maintaining a clean commit history through atomic commits, meaningful commit messages and so on.
This article wont go into all the techniques above, instead Im going to focus on a single technique that I have recently learned: Interactive Rebase.
No matter how hard we try to keep our commit messages clean and clear, we often end up with something looking like this:</description>
            <content type="html"><![CDATA[<p>Any article you read online about maintaining a clean project will mention a version control system (usually git) and will then talk about maintaining a clean commit history through atomic commits, meaningful commit messages and so on.</p>
<p>This article wont go into all the techniques above, instead Im going to focus on a single technique that I have recently learned: <code>Interactive Rebase</code>.</p>
<p>No matter how hard we try to keep our commit messages clean and clear, we often end up with something looking like this:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">commit 89b4001bd1176243c6c338e18cf0039f2e1556a9 (HEAD -&gt; master)
Author: Fares Ismail
Date:   Mon Sep 2 22:32:18 2019 +0200

    How About Now?

commit ba2998d748c30d2c334f688eb9900c6e3508548a
Author: Fares Ismail
Date:   Mon Sep 2 22:31:48 2019 +0200

    Hope My tests Pass now...

commit 8416c111d95c8cbcfa1f34deef515ca67676aecf
Author: Fares Ismail
Date:   Mon Sep 2 22:31:25 2019 +0200

    Added Unit Tests

commit efe7e3fad95af4c9b9edf780d5f7a5666662f099
Author: Fares Ismail
Date:   Mon Sep 2 22:30:53 2019 +0200

    Fixed Main Function

commit 5946d2e49a073e2d20c7f0bb97fa4ae2c8393dbc
Author: Fares Ismail
Date:   Mon Sep 2 22:30:05 2019 +0200

    Fixed typo in Main Function

commit 537dd485e5afbd8754a2ba5b68bf39a9580a6342
Author: Fares Ismail
Date:   Mon Sep 2 22:29:23 2019 +0200

    Added Man function

commit 5aedeb40a8c8f09b6ec876f1ef625108a2a9ad27
Author: Fares Ismail
Date:   Mon Sep 2 22:21:41 2019 +0200

    Initial Commit

</code></pre></div><p>Clearly this is not ideal&hellip; it starts off good and then its a slippery slope back to chaos.</p>
<p>So whats wrong with my Commit History?
Well the 2nd, 3rd and 4th commits are practically the same thing and could have been done in a single commit.</p>
<p>The same can be said about commits number 5, 6 and 7. Although commit 7 is just sad&hellip;</p>
<p>So here comes the interactive rebase to the rescue. More specifically, the Fixup.</p>
<p><code>ﬁ rebase -i HEAD~6</code> to interactively rebase the last 6 commits.</p>
<p>This will generally open up your git editor, by default its vim.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">pick 537dd48 Added Man function
pick 5946d2e Fixed typo in Main Function
pick efe7e3f Fixed Main Function
pick 8416c11 Added Unit Tests
pick ba2998d Hope My tests Pass now...
pick 89b4001 How About Now?

# Rebase 5aedeb4..89b4001 onto 5aedeb4 (6 commands)
#
# Commands:
# p, pick &lt;commit&gt; = use commit
# r, reword &lt;commit&gt; = use commit, but edit the commit message
# e, edit &lt;commit&gt; = use commit, but stop for amending
# s, squash &lt;commit&gt; = use commit, but meld into previous commit
# f, fixup &lt;commit&gt; = like &#34;squash&#34;, but discard this commit&#39;s log message
# x, exec &lt;command&gt; = run command (the rest of the line) using shell
# b, break = stop here (continue rebase later with &#39;git rebase --continue&#39;)
# d, drop &lt;commit&gt; = remove commit
# l, label &lt;label&gt; = label current HEAD with a name
# t, reset &lt;label&gt; = reset HEAD to a label
# m, merge [-C &lt;commit&gt; | -c &lt;commit&gt;] &lt;label&gt; [# &lt;oneline&gt;]
# .       create a merge commit using the original merge commit&#39;s
# .       message (or the oneline, if no original merge commit was
# .       specified). Use -c &lt;commit&gt; to reword the commit message.
#
# These lines can be re-ordered; they are executed from top to bottom.
#
# If you remove a line here THAT COMMIT WILL BE LOST.
</code></pre></div><p>At the top we see our last six commits. later we see the possible transformations we can apply on them.</p>
<p>Most of the options are pretty self explanatory, but Ill be focusing on 3 in particular:</p>
<ul>
<li>
<p>Reword</p>
</li>
<li>
<p>Fixup</p>
</li>
<li>
<p>Squash</p>
</li>
</ul>
<p>To start with the simplest case:</p>
<h3 id="reword">Reword</h3>
<p>Reword is my chance to tell the world that I actually do know how to write <code>Main</code> (If you haven&rsquo;t caught it by now, check my first commit&hellip; it says Man :/)</p>
<p>Simply erase the pick prior to the first commit and replace it with <code>r</code> or <code>reword</code>.
press :x and a new page will show up:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">
Added Man function

# Please enter the commit message for your changes. Lines starting
# with &#39;#&#39; will be ignored, and an empty message aborts the commit.
#

</code></pre></div><h3 id="fixup">Fixup</h3>
<p>Alright, so on to more interesting stuff, as mentioned before some of my commits can be combined into one all while dropping the useless commit messages. This is exactly what fixup does. it re-writes the commits to the closest previous commit.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">pick 33ff399 Added Main function
pick da9cc20 Fixed typo in Main Function
pick 5db3c38 Fixed Main Function
pick 1092c6e Added Unit Tests
f 0206a22 Hope My tests Pass now...
f 6728363 How About Now???
</code></pre></div><p>The following will re-write the last two commits onto the last previous one (<code>Added Unit Tests</code>)
The result ends up looking like this:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">commit 6fc9e00fe20ff2c487cb14cfb20ad758cec7e771 (HEAD -&gt; master)
Author: Fares Ismail
Date:   Mon Sep 2 22:31:25 2019 +0200

    Added Unit Tests

commit 5db3c38ff0a4566776b42c01a6775f83f3123191
Author: Fares Ismail
Date:   Mon Sep 2 22:30:53 2019 +0200

    Fixed Main Function

commit da9cc2021c2e7bf75673a2ed99b8d8a1cc0cdb1a
Author: Fares Ismail
Date:   Mon Sep 2 22:30:05 2019 +0200

    Fixed typo in Main Function

commit 33ff39916c98340fd4dab11f5dbf1a07fd6e35fd
Author: Fares Ismail
Date:   Mon Sep 2 22:29:23 2019 +0200

    Added Main function

commit 5aedeb40a8c8f09b6ec876f1ef625108a2a9ad27
Author: Fares Ismail
Date:   Mon Sep 2 22:21:41 2019 +0200

    Initial Commit
</code></pre></div><p>a bit cleaner no?</p>
<p>Those with a keen eye will notice that the commit hash for <code>Added Unit Tests</code> changed, this is because the commit was modified to include the two other commits.
Note that when pushing this to the remote branch, you might need to use <code>--force-with-lease</code> or <code>--force</code> since the local commit history no longer matches the remote version</p>
<h3 id="squash">Squash</h3>
<p>Squash is a bit similar to fixup only that it doesn&rsquo;t discard the commit messages, instead it melds them together.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">pick 33ff399 Added Main function
s da9cc20 Fixed typo in Main Function
s 5db3c38 Fixed Main Function
pick 6fc9e00 Added Unit Tests
</code></pre></div><p>executing this will pop the following:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text"># This is a combination of 3 commits.
# This is the 1st commit message:

Added Main function

# This is the commit message #2:

Fixed typo in Main Function

# This is the commit message #3:

Fixed Main Function

</code></pre></div><p>This allows us to make a modification to each commit message.</p>
<p>applying the above will yield the following commit history:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">commit b9d8ce4bd94bdec74b81782e5d684a5207287a03 (HEAD -&gt; master)
Author: Fares Ismail
Date:   Mon Sep 2 22:31:25 2019 +0200

    Added Unit Tests

commit 7641555428b5abe903667f799a0deeefb21b2027
Author: Fares Ismail
Date:   Mon Sep 2 22:29:23 2019 +0200

    Added Main functions

    Fixed typo in Main Functions

    Fixed Main Functions

commit 5aedeb40a8c8f09b6ec876f1ef625108a2a9ad27
Author: Fares Ismail
Date:   Mon Sep 2 22:21:41 2019 +0200

    Initial Commit
</code></pre></div><p>Much cleaner than what we originally started with no?</p>
]]></content>
        </item>
        
        <item>
            <title>Fold vs Pattern Matching and Matching on Options</title>
            <link>https://fares.codes/posts/fold-vs-pattern-matching-and-matching-on-options/</link>
            <pubDate>Sun, 01 Sep 2019 10:00:00 +0000</pubDate>
            
            <guid>https://fares.codes/posts/fold-vs-pattern-matching-and-matching-on-options/</guid>
            <description>The following article is a summary of the Lambda Conf 2015 talk: Idiomatic Scala Your Options Do Not Match by Marconi Lanna https://www.youtube.com/watch?v=ol2AB5UN1IA&amp;amp;t=1s
 Often when dealing with Options, we have a case where we want to check if a value is defined and if it is, apply a specific treatment on the value inside the option. So we end up with a code that looks something like this:
value match { case Some(a) =&amp;gt; foo(a) case None =&amp;gt; bar } In this example, we patten match on the Option value.</description>
            <content type="html"><![CDATA[<p>The following article is a summary of the Lambda Conf 2015 talk: Idiomatic Scala Your Options Do Not Match by Marconi Lanna <a href="https://www.youtube.com/watch?v=ol2AB5UN1IA&amp;t=1s">https://www.youtube.com/watch?v=ol2AB5UN1IA&amp;t=1s</a></p>
<hr>
<p>Often when dealing with Options, we have a case where we want to check if a value is defined and if it is, apply a specific treatment on the value inside the option. So we end up with a code that looks something like this:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">value <span style="color:#66d9ef">match</span> <span style="color:#f92672">{</span>
    <span style="color:#66d9ef">case</span> <span style="color:#a6e22e">Some</span><span style="color:#f92672">(</span>a<span style="color:#f92672">)</span> <span style="color:#66d9ef">=&gt;</span> foo<span style="color:#f92672">(</span>a<span style="color:#f92672">)</span>
    <span style="color:#66d9ef">case</span> <span style="color:#a6e22e">None</span> <span style="color:#66d9ef">=&gt;</span> bar
<span style="color:#f92672">}</span>
</code></pre></div><p>In this example, we patten match on the Option value. if it is defined, we call the function foo on the value inside the Some, otherwise we call bar.</p>
<p>and this is technically correct, however: the scala doc states that:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">The most idiomatic way to use an Option instance is to treat it as a collection or monad and use map,flatMap, filter, or foreach
</code></pre></div><p>and that:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">A less-idiomatic way to use Option values is via pattern matching:
</code></pre></div><p>with this in mind; the above can be re-written as:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#66d9ef">val</span> res <span style="color:#66d9ef">=</span> value<span style="color:#f92672">.</span>map<span style="color:#f92672">(</span>foo<span style="color:#f92672">).</span>getOrElse<span style="color:#f92672">(</span>bar<span style="color:#f92672">)</span>
</code></pre></div><p>another, more readable way would be using the <code>fold</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">value<span style="color:#f92672">.</span>fold<span style="color:#f92672">(</span>bar<span style="color:#f92672">)(</span>foo<span style="color:#f92672">)</span>
</code></pre></div><p><code>fold</code> has the following definition and impl:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">  <span style="color:#75715e">/** Returns the result of applying $f to this $option&#39;s
</span><span style="color:#75715e">   *  value if the $option is nonempty.  Otherwise, evaluates
</span><span style="color:#75715e">   *  expression `ifEmpty`.
</span><span style="color:#75715e">   *
</span><span style="color:#75715e">   *  @note This is equivalent to `$option map f getOrElse ifEmpty`.
</span><span style="color:#75715e">   *
</span><span style="color:#75715e">   *  @param  ifEmpty the expression to evaluate if empty.
</span><span style="color:#75715e">   *  @param  f       the function to apply if nonempty.
</span><span style="color:#75715e">   */</span>
  <span style="color:#a6e22e">@inline</span> <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">def</span> fold<span style="color:#f92672">[</span><span style="color:#66d9ef">B</span><span style="color:#f92672">](</span>ifEmpty<span style="color:#66d9ef">:</span> <span style="color:#f92672">=&gt;</span> B<span style="color:#f92672">)(</span>f<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">A</span> <span style="color:#f92672">=&gt;</span> B<span style="color:#f92672">)</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">B</span> <span style="color:#f92672">=</span>
    <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>isEmpty<span style="color:#f92672">)</span> ifEmpty <span style="color:#66d9ef">else</span> f<span style="color:#f92672">(</span><span style="color:#66d9ef">this</span><span style="color:#f92672">.</span>get<span style="color:#f92672">)</span>
</code></pre></div><p>In other words, the value on the left (<code>bar</code> in our case) will be applied if <code>value</code> is <code>None</code>, otherwise if it is <code>Some</code>, the function of the right (<code>foo</code> in our case) will be invoked on the value inside the Option.</p>
<h2 id="is-there-an-even-better-way-to-do-things">Is there an even better way to do things</h2>
<p>I wont go into the details, but <code>Marconi Lanna</code> does in his video or his article <a href="https://www.originate.com/thinking/stories/idiomatic-scala-your-options-do-not-match/">https://www.originate.com/thinking/stories/idiomatic-scala-your-options-do-not-match/</a>, but here are a few examples of code that can be better written. The below examples are taken/inspired by the video of <code>Marconi Lanna</code>.</p>
<p>This is a silly example and uncommon, but:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#66d9ef">if</span><span style="color:#f92672">(</span>something<span style="color:#f92672">==</span><span style="color:#66d9ef">true</span><span style="color:#f92672">){</span>
 <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">true</span>
<span style="color:#f92672">}</span>
<span style="color:#66d9ef">else</span> <span style="color:#f92672">{</span>
 <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">false</span>
<span style="color:#f92672">}</span>
</code></pre></div><p>which can easily be re-written as:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#66d9ef">return</span> something
</code></pre></div><h3 id="pattern-matching-on-boolean">Pattern Matching on boolean</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">condition <span style="color:#66d9ef">match</span> <span style="color:#f92672">{</span>
    <span style="color:#66d9ef">case</span> <span style="color:#66d9ef">true</span> <span style="color:#66d9ef">=&gt;</span> <span style="color:#e6db74">&#34;Okay&#34;</span>
    <span style="color:#66d9ef">case</span> <span style="color:#66d9ef">false</span> <span style="color:#66d9ef">=&gt;</span> <span style="color:#e6db74">&#34;Not Okay&#34;</span>
<span style="color:#f92672">}</span>
</code></pre></div><p>can be re-written as:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#66d9ef">if</span><span style="color:#f92672">(</span>condition<span style="color:#f92672">)</span> <span style="color:#e6db74">&#34;Okay&#34;</span> <span style="color:#66d9ef">else</span> <span style="color:#e6db74">&#34;Not Okay&#34;</span>
</code></pre></div><h3 id="checking-if-an-option-is-defined">Checking if an Option is Defined</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">value <span style="color:#66d9ef">match</span> <span style="color:#f92672">{</span>
    <span style="color:#66d9ef">case</span> <span style="color:#a6e22e">Some</span><span style="color:#f92672">(</span><span style="color:#66d9ef">_</span><span style="color:#f92672">)</span>    <span style="color:#66d9ef">=&gt;</span> <span style="color:#66d9ef">true</span>
    <span style="color:#66d9ef">case</span> <span style="color:#a6e22e">None</span>       <span style="color:#66d9ef">=&gt;</span> <span style="color:#66d9ef">false</span>
<span style="color:#f92672">}</span>
</code></pre></div><p>can simply be re-written as:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">value<span style="color:#f92672">.</span>isDefined
<span style="color:#75715e">//or its alias .nonEmpty (as of scala 2.10)
</span></code></pre></div><p>To check the inverse, you can use: <code>.isEmpty</code></p>
<h3 id="filtering-values">Filtering Values</h3>
<p>What is we wanted to filter on an option?</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#75715e">// given predicate p
</span><span style="color:#75715e"></span>value <span style="color:#66d9ef">match</span> <span style="color:#f92672">{</span>
    <span style="color:#66d9ef">case</span> <span style="color:#a6e22e">Some</span><span style="color:#f92672">(</span>a<span style="color:#f92672">)</span><span style="color:#66d9ef">=&gt;</span> <span style="color:#66d9ef">if</span><span style="color:#f92672">(</span>p<span style="color:#f92672">(</span>a<span style="color:#f92672">))</span> <span style="color:#a6e22e">Some</span><span style="color:#f92672">(</span>a<span style="color:#f92672">)</span> <span style="color:#66d9ef">else</span> <span style="color:#a6e22e">None</span>
    <span style="color:#66d9ef">case</span> <span style="color:#a6e22e">None</span>   <span style="color:#66d9ef">=&gt;</span> <span style="color:#a6e22e">None</span>
<span style="color:#f92672">}</span>
</code></pre></div><p>can be simplified by calling:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">value<span style="color:#f92672">.</span>filter<span style="color:#f92672">(</span>p<span style="color:#f92672">)</span>
<span style="color:#75715e">// Note, Find also works in the same manner.
</span></code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Passing the DataBricks Apache Spark Certification</title>
            <link>https://fares.codes/posts/passing-the-databricks-apache-spark-certification/</link>
            <pubDate>Wed, 21 Aug 2019 20:00:00 +0000</pubDate>
            
            <guid>https://fares.codes/posts/passing-the-databricks-apache-spark-certification/</guid>
            <description>The following is a compilation of all the resources I&amp;rsquo;ve used to pass the Databricks 2.X Spark Certification, as well as some questions that came up.
Background on the Exam The exam databricks spark 2.x spark with scala certification is made up of 40 MCQ questions, 3 hours to answer them in total. The registration grants you 2 trials, meaning if you fail the first attempt, you have to wait 15 days and then you can apply for a second trial.</description>
            <content type="html"><![CDATA[<p>The following is a compilation of all the resources I&rsquo;ve used to pass the Databricks 2.X Spark Certification, as well as some questions that came up.</p>
<h2 id="background-on-the-exam">Background on the Exam</h2>
<p>The exam databricks spark 2.x spark with scala certification is made up of 40 MCQ questions, 3 hours to answer them in total.
The registration grants you 2 trials, meaning if you fail the first attempt, you have to wait 15 days and then you can apply for a second trial.
The focus of the exam is spark DataFrames. The question distribution is outlined very well in the LinkedIn article in REX.</p>
<h2 id="books">Books</h2>
<ul>
<li>Spark in Action</li>
<li>Learning Spark: Outdated but has useful information regarding RDDs.</li>
<li>Spark: The Definitive guide (Either Spark in Action or this).</li>
</ul>
<h2 id="rex">Rex</h2>
<ul>
<li>LinkedIn article with GitHub repository associated: <a href="https://www.linkedin.com/pulse/5-tips-cracking-databricks-apache-spark-certification-vivek-bombatkar/">https://www.linkedin.com/pulse/5-tips-cracking-databricks-apache-spark-certification-vivek-bombatkar/</a> and <a href="https://github.com/vivek-bombatkar/Databricks-Apache-Spark-2X-Certified-Developer">https://github.com/vivek-bombatkar/Databricks-Apache-Spark-2X-Certified-Developer</a> Note that in the github repo there is a sample exam. 2 of the provided answers are not correct.</li>
<li>Medium article <a href="https://link.medium.com/l5Sw4zn5WY">https://link.medium.com/l5Sw4zn5WY</a></li>
</ul>
<h2 id="sample-exam">Sample Exam</h2>
<p>The following was sent to me by someone from databricks&rsquo; learning center:
<a href="https://databricks-prod-cloudfront.cloud.databricks.com/public/793177bc53e528530b06c78a4fa0e086/0/6221173/100020/latest.html">https://databricks-prod-cloudfront.cloud.databricks.com/public/793177bc53e528530b06c78a4fa0e086/0/6221173/100020/latest.html</a>
The sample exam shows the format of the questions.</p>
<h2 id="some-questions">Some Questions</h2>
<ol>
<li>
<p><code>coalesce</code> vs <code>repartition</code></p>
</li>
<li>
<p>Which line will trigger the physical plan?</p>
</li>
<li>
<p>Action vs Transformation</p>
</li>
<li>
<p>Default storage level for rdds vs DataFrames (using cache) MEMORY_ONLY and MEMORY_AND_DISK respectively.</p>
</li>
<li>
<p>Of all the blocks of code, which one has the least bottleneck. (know what <code>ReduceByKeyLocal</code> does.)</p>
</li>
<li>
<p>Does using an accumulator prevent us from using the catalyst optimizations?</p>
</li>
<li>
<p>What are the consequences of increasing the number of partitions?</p>
</li>
<li>
<p>For structured streaming review fault tolerance for every sink. no questions on spark streaming. one windowing question but it was very simple (need to know that the sliding should be smaller than the window time).</p>
</li>
<li>
<p>Apply BFS with GraphFrames.</p>
</li>
<li>
<p>CrossJoin and know that is does a cartesian product so can be memory exhaustive.</p>
</li>
<li>
<p>Broadcast is done automatically as long as the DataSet to be broadcasted is less than 10MB</p>
</li>
<li>
<p>What can we do if we want to handle a file format that is not supported by the DataFrame API</p>
</li>
<li>
<p>UDF questions. and how to call them. (parameters of <code>register</code> method, how to call the registered udf and the function that will be invoked).</p>
</li>
<li>
<p>FooBarBaz question. (printing something based on multiples of 3 or 5 or both. 4 or 5 code blocks and we need to guess the one with the correct output.)</p>
</li>
</ol>
]]></content>
        </item>
        
        <item>
            <title>Dynamic Scaling and Backpressure</title>
            <link>https://fares.codes/posts/dynamic-scaling-and-backpressure/</link>
            <pubDate>Sat, 10 Aug 2019 09:00:00 +0000</pubDate>
            
            <guid>https://fares.codes/posts/dynamic-scaling-and-backpressure/</guid>
            <description>Taking a little break from Scala to review some interesting features of spark streaming.
This article has been updated to reflect recently gained knowledge with spark streaming both in theory and practice.
An important note: This article is about backpressure and dynamic allocation in spark streaming and not normal batch jobs.
Dynamic Allocation in Spark Streaming Dynamic Allocation also called Elastic Scaling is a feature that lets spark dynamically adjust the number of executors to match the workload.</description>
            <content type="html"><![CDATA[<p>Taking a little break from Scala to review some interesting features of spark streaming.</p>
<p>This article has been updated to reflect recently gained knowledge with spark streaming both in theory and practice.</p>
<p>An important note: This article is about backpressure and dynamic allocation in spark streaming and not normal batch jobs.</p>
<h2 id="dynamic-allocation-in-spark-streaming">Dynamic Allocation in Spark Streaming</h2>
<p>Dynamic Allocation also called Elastic Scaling is a feature that lets spark dynamically adjust the number of executors to match the workload.</p>
<p>Spark streaming can dynamically scale up or down the number of executors based on a few configurations.</p>
<ol>
<li>
<p><code>spark.streaming.dynamicAllocation.enabled</code></p>
<pre><code>This enables dynamic allocation with spark streaming. needs to be true.
</code></pre>
</li>
<li>
<p><code>spark.dynamicAllocation.initialExecutors</code></p>
<pre><code>Initial number of executors to start with.
</code></pre>
</li>
<li>
<p><code>spark.streaming.dynamicAllocation.scalingUpRatio</code> and <code>spark.streaming.dynamicAllocation.scalingDownRatio</code></p>
<pre><code>The two configs specify when we would scale up or down the
number of executors based on processing time and interval time.
    
Default values are set to 0.9 and 0.3
</code></pre>
</li>
</ol>
<h2 id="back-pressure">Back Pressure</h2>
<p>Back Pressure is spark streamings ability to adjust the ingestion rate dynamically so that when a system is receiving data at a higher rate than it can process, we wouldnt have tasks queue up and slow down the stream.</p>
<p>The ingestion rate is adjusted dynamically based on previous microbatch processing time.</p>
<p>What about the initial ingestion rate? well this depends on the version of spark you are running.</p>
<ul>
<li>
<p>Prior to <strong>Spark 2.4</strong>: there was a bug that caused <code>spark.streaming.kafka.maxRatePerPartition</code> to be used as the initial rate AND the maximum rate per partition.</p>
</li>
<li>
<p>As of <strong>Spark 2.4</strong>: We can use <code>spark.streaming.backpressure.initialRate</code> for the initial rate of ingestion. as maximum rate per partition can be set using: <code>spark.streaming.kafka.maxRatePerPartition</code></p>
</li>
</ul>
<p>If the input events is too high and spark streaming cannot process it in time, after the first batch is completed, spark will notice that the batch processing time is longer than the interval time and that is when backpressure will kick in to reduce the input rate.</p>
<p>A one sentence summary of backpressure (and an interesting article):</p>
<pre><code>Backpressure shifts the trouble of buffering input records to the
sender so it keeps records until they could be processed
by a streaming application.
</code></pre>
<hr>
<h2 id="what-about-the-practical-side-of-things">What about the practical side of things</h2>
<p>This is where things might get a bit more complicated or hazy.</p>
<p>The following is a summary of what I learned recently from various sources online and the spark source code. Surprisingly the spark streaming documentation can be rather thin on the subject of dynamic allocation and backpressure.</p>
<h2 id="spark-streaming-backpressure">Spark Streaming Backpressure</h2>
<ul>
<li>
<p><code>spark.streaming.backpressure.enabled</code>:</p>
<pre><code>  Enables backpressure in spark streaming
</code></pre>
</li>
<li>
<p><code>spark.streaming.kafka.maxRatePerPartition</code>:</p>
<pre><code>  This is the maximum rate per partition to read kafka records.
</code></pre>
</li>
<li>
<p><code>spark.streaming.kafka.minRatePerPartition</code>:</p>
<pre><code>  Similar to max rate per partition but this sets the min...
</code></pre>
</li>
<li>
<p><code>spark.streaming.backpressure.initialRate</code>:</p>
<pre><code>  The initial rate to start with. this only works 
  on spark versions 2.4 and above. 
  Otherwise, spark streaming will use the 
  kafka max rate per partition as the initial rate.
</code></pre>
</li>
</ul>
<h2 id="spark-streaming-dynamic-allocation">Spark Streaming Dynamic Allocation</h2>
<ul>
<li>
<p><code>spark.streaming.dynamicAllocation.enabled</code>:</p>
<pre><code>  Enables DA for spark streaming
</code></pre>
</li>
<li>
<p><code>spark.streaming.dynamicAllocation.scalingUpRatio</code>:</p>
<pre><code>  Scales up when the ratio between the ProcessingTime and the 
  BatchTime is above x value.
</code></pre>
</li>
<li>
<p><code>spark.streaming.dynamicAllocation.scalingDownRatio</code>:</p>
<pre><code>  Similar as above but for scaling down.
</code></pre>
</li>
<li>
<p><code>streaming.dynamicAllocation.scalingInterval</code>:</p>
<pre><code>  Interval in seconds to apply scaling.
</code></pre>
</li>
<li>
<p><code>spark.streaming.dynamicAllocation.maxExecutors</code>:</p>
<pre><code>  The name of this conf is very misleading and it took me a 
  while to figure it out...

  The name might imply that this represents the maximum number 
  of executors we can scale up to... but it is not.
  The maximum number of executors we can reach is the `spark.cores.max` 
  divided by the `spark.executor.core` setting.
    
  This configuration, is the number of executors spark streaming 
  will request from the cluster manager (mesos, yarn...)
  which is why we can see the following in the logs:
            
          &quot;Capping the total amount of executors to X&quot;
          &quot;Requested total X executors&quot;
    
  But dont take my word for it... let us quickly check the spark 
  source code for verification:
</code></pre>
</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#75715e">/** Request the specified number of
</span><span style="color:#75715e">executors over the currently active one */</span>
<span style="color:#66d9ef">private</span> <span style="color:#66d9ef">def</span> requestExecutors<span style="color:#f92672">(</span>numNewExecutors<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Int</span><span style="color:#f92672">)</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Unit</span> <span style="color:#f92672">=</span> <span style="color:#f92672">{</span>
       require<span style="color:#f92672">(</span>numNewExecutors <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">1</span><span style="color:#f92672">)</span>
       <span style="color:#66d9ef">val</span> allExecIds <span style="color:#66d9ef">=</span> client<span style="color:#f92672">.</span>getExecutorIds<span style="color:#f92672">()</span>
       logDebug<span style="color:#f92672">(</span><span style="color:#e6db74">s&#34;Executors (</span><span style="color:#e6db74">${</span>allExecIds<span style="color:#f92672">.</span>size<span style="color:#e6db74">}</span><span style="color:#e6db74">) = </span><span style="color:#e6db74">${</span>allExecIds<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span><span style="color:#f92672">)</span>
       <span style="color:#66d9ef">val</span> targetTotalExecutors <span style="color:#66d9ef">=</span>
       math<span style="color:#f92672">.</span>max<span style="color:#f92672">(</span>
       math<span style="color:#f92672">.</span>min<span style="color:#f92672">(</span>maxNumExecutors<span style="color:#f92672">,</span> allExecIds<span style="color:#f92672">.</span>size <span style="color:#f92672">+</span> numNewExecutors<span style="color:#f92672">),</span>
       minNumExecutors<span style="color:#f92672">)</span>
       client<span style="color:#f92672">.</span>requestTotalExecutors<span style="color:#f92672">(</span>targetTotalExecutors<span style="color:#f92672">,</span> <span style="color:#ae81ff">0</span><span style="color:#f92672">,</span> <span style="color:#a6e22e">Map</span><span style="color:#f92672">.</span>empty<span style="color:#f92672">)</span>
       logInfo<span style="color:#f92672">(</span><span style="color:#e6db74">s&#34;Requested total </span><span style="color:#e6db74">$targetTotalExecutors</span><span style="color:#e6db74"> executors&#34;</span><span style="color:#f92672">)</span>
<span style="color:#f92672">}</span>
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#66d9ef">val</span> <span style="color:#a6e22e">MAX_EXECUTORS_KEY</span> <span style="color:#66d9ef">=</span>
 <span style="color:#e6db74">&#34;spark.streaming.dynamicAllocation.maxExecutors&#34;</span>

<span style="color:#75715e">// AND
</span><span style="color:#75715e"></span>
<span style="color:#66d9ef">private</span> <span style="color:#66d9ef">val</span> maxNumExecutors <span style="color:#66d9ef">=</span>
conf<span style="color:#f92672">.</span>getInt<span style="color:#f92672">(</span><span style="color:#a6e22e">MAX_EXECUTORS_KEY</span><span style="color:#f92672">,</span> <span style="color:#a6e22e">Integer</span><span style="color:#f92672">.</span><span style="color:#a6e22e">MAX_VALUE</span><span style="color:#f92672">)</span>
</code></pre></div><p>So what does this tell us?</p>
<p>First an foremost, maxNumExecutors is the <code>spark.streaming.dynamicAllocation.maxExecutors</code>
or by default it is the <code>Integer.MAX_VALUE</code>.</p>
<p>alright&hellip; but what about the algorithm?
it tells us:
the targetTotalExecutors to request is the maximum number between: the minNumExecutors and the min of (maxNumExecutors, <code>allAvailableExec + math.max(math.round(ratio).toInt, 1)</code>)</p>
<blockquote>
<p>where allAvailableExec is the size of all the executorIds.
newNumExecutors is the max between one and the rounded ratio.
ratio is defined as</p>
</blockquote>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#66d9ef">val</span> ratio <span style="color:#66d9ef">=</span> averageBatchProcTime<span style="color:#f92672">.</span>toDouble <span style="color:#f92672">/</span> batchDurationMs
</code></pre></div><p>I get things might have gotten a bit confusing&hellip; but let us go back to what is important, configuring our cluster.</p>
<p>in order to do so, we need to know based on what will our cluster scale up or scale down.</p>
<p>there are two things to know:</p>
<p><code>batch time</code>: this is a fixed amount in seconds. this represents the interval of time during which we will be processing data.
from the spark structured streaming official doc:</p>
<pre><code>    If the previous micro-batch completes within the interval,
    then the engine will wait until the interval is over before
    kicking off the next micro-batch.


    If the previous micro-batch takes longer than the interval
    to complete (i.e. if an interval boundary is missed), then the
    next micro-batch will start as soon as the previous one completes
    (i.e., it will not wait for the next interval boundary).


    If no new data is available, then no micro-batch will be kicked off.
</code></pre>
<p>The first scenario implies idle time.</p>
<p>The second scenario implies queued tasks.</p>
<p><code>processing time</code>: the time it takes us to process the data. this can be less, equal or greater than batch time as seen in the example above.</p>
<p>Let us look at some use cases:</p>
<table>
<thead>
<tr>
<th align="left">Case</th>
<th align="center">Processing Time</th>
<th align="left">Batch Time</th>
<th align="center">Ratio</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left">1</td>
<td align="center">2s</td>
<td align="left">60s</td>
<td align="center">0.033</td>
</tr>
<tr>
<td align="left">2</td>
<td align="center">10s</td>
<td align="left">60s</td>
<td align="center">0.166</td>
</tr>
<tr>
<td align="left">3</td>
<td align="center">20s</td>
<td align="left">60s</td>
<td align="center">0.333</td>
</tr>
<tr>
<td align="left">4</td>
<td align="center">30s</td>
<td align="left">60s</td>
<td align="center">0.5</td>
</tr>
<tr>
<td align="left">5</td>
<td align="center">45s</td>
<td align="left">60s</td>
<td align="center">0.75</td>
</tr>
<tr>
<td align="left">6</td>
<td align="center">60s</td>
<td align="left">60s</td>
<td align="center">1</td>
</tr>
<tr>
<td align="left">7</td>
<td align="center">80s</td>
<td align="left">60s</td>
<td align="center">1.33</td>
</tr>
</tbody>
</table>
<p>Now assume our <code>ScalingUp</code> ratio is 0.9 and <code>ScalingDown</code> ratio is 0.3</p>
<p>what happens in each case?</p>
<ol>
<li>
<p>Case 1 and 2: <strong>ratio &lt;= ScalingDown</strong> so spark will request to kill x executors. (x is calculated based on the maxExecutor or the algorithm shown above)</p>
<pre><code>the reason behind this is because the processing time is 
significantly smaller than the batch time, so there is a lot 
of idle time and so we probably have more resources than we need.
</code></pre>
</li>
<li>
<p>Case 3, 4, 5: <strong>ratio is neither smaller than ScalingDown nor bigger than ScalingUp</strong>, so we do nothing.</p>
</li>
<li>
<p>Case 6 and 7: <strong>ratio &gt;= ScalingUp</strong> so spark will request additional executors based on the algorithm mentioned above.</p>
<pre><code>The reason behind this is because the processing time is 
close to or bigger than the Batch time, so most likely 
additional resources are needed.
</code></pre>
</li>
</ol>
<h2 id="some-additional-resources">Some additional resources</h2>
<ul>
<li>
<p>Spark Source Code (more specifically: <code>ExecutorAllocationManager.scala</code>):</p>
<p><a href="https://github.com/apache/spark/blob/branch-2.4/streaming/src/main/scala/org/apache/spark/streaming/scheduler/ExecutorAllocationManager.scala">https://github.com/apache/spark/blob/branch-2.4/streaming/src/main/scala/org/apache/spark/streaming/scheduler/ExecutorAllocationManager.scala</a></p>
</li>
<li>
<p>Building Robust Scalable and Adaptive Applications on Spark Streaming talk during Spark Summit 2016</p>
<p><a href="https://databricks.com/session/building-robust-scalable-and-adaptive-applications-on-spark-streaming">https://databricks.com/session/building-robust-scalable-and-adaptive-applications-on-spark-streaming</a></p>
</li>
<li>
<p>Dynamic Allocation JIRA Design Document</p>
<p><a href="https://issues.apache.org/jira/secure/attachment/12775710/dynamic-allocation-streaming-design.pdf">https://issues.apache.org/jira/secure/attachment/12775710/dynamic-allocation-streaming-design.pdf</a></p>
</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>SemigroupK and CombineK</title>
            <link>https://fares.codes/posts/semigroupk-and-combinek/</link>
            <pubDate>Sat, 03 Aug 2019 15:00:00 +0000</pubDate>
            
            <guid>https://fares.codes/posts/semigroupk-and-combinek/</guid>
            <description>Before we get into SemigroupKand combineK let us first quickly recap what a semigroup is.
 Semigroup A Semigroup for a given type A has a single operation that takes two values of type A and returns a single value of the same type. This operation needs to be associative. We will call this operation combine for simplicity.
from algebra.Semigroup we have:
/** * A semigroup is any set `A` with an associative operation (`combine`).</description>
            <content type="html"><![CDATA[<p>Before we get into <code>SemigroupK</code>and <code>combineK</code> let us first quickly recap what a <code>semigroup</code> is.</p>
<hr>
<h2 id="semigroup">Semigroup</h2>
<p>A Semigroup for a given type <code>A</code> has a single operation that takes two values of type A and returns a single value of the same type. This operation needs to be associative.
We will call this operation combine for simplicity.</p>
<p>from <code>algebra.Semigroup</code> we have:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#75715e">/**
</span><span style="color:#75715e"> * A semigroup is any set `A` with an associative operation (`combine`).
</span><span style="color:#75715e"> */</span>
<span style="color:#66d9ef">trait</span> <span style="color:#a6e22e">Semigroup</span><span style="color:#f92672">[</span><span style="color:#66d9ef">@sp</span><span style="color:#f92672">(</span><span style="color:#66d9ef">Int</span>, <span style="color:#66d9ef">Long</span>, <span style="color:#66d9ef">Float</span>, <span style="color:#66d9ef">Double</span><span style="color:#f92672">)</span> <span style="color:#66d9ef">A</span><span style="color:#f92672">]</span> <span style="color:#a6e22e">extends</span> <span style="color:#a6e22e">Any</span> <span style="color:#66d9ef">with</span> <span style="color:#a6e22e">Serializable</span> <span style="color:#f92672">{</span>

  <span style="color:#75715e">/**
</span><span style="color:#75715e">   * Associative operation taking which combines two values.
</span><span style="color:#75715e">   */</span>
  <span style="color:#66d9ef">def</span> combine<span style="color:#f92672">(</span>x<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">A</span><span style="color:#f92672">,</span> y<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">A</span><span style="color:#f92672">)</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">A</span>

</code></pre></div><p>This might be a bit abstract, so lets look at a more concrete example:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">  <span style="color:#66d9ef">val</span> classOneGrades<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">List</span><span style="color:#f92672">[</span><span style="color:#66d9ef">Int</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">List</span><span style="color:#f92672">(</span><span style="color:#ae81ff">75</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">80</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">78</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">90</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">100</span><span style="color:#f92672">)</span>
  <span style="color:#66d9ef">val</span> classTwoGrades<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">List</span><span style="color:#f92672">[</span><span style="color:#66d9ef">Int</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">List</span><span style="color:#f92672">(</span><span style="color:#ae81ff">50</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">68</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">90</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">98</span><span style="color:#f92672">)</span>

  <span style="color:#66d9ef">val</span> allGrades <span style="color:#66d9ef">=</span> classOneGrades<span style="color:#f92672">.</span>combine<span style="color:#f92672">(</span>classTwoGrades<span style="color:#f92672">)</span>
</code></pre></div><p>the result is as you&rsquo;d expect: <code>List(75, 80, 78, 90, 100, 50, 68, 90, 98)</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-md" data-lang="md">Note:  We could have also called <span style="color:#e6db74">`classOneGrades |+| classTwoGrades`</span>
since the sign |+| is a <span style="color:#e6db74">`SemigroupOps`</span> that calls combine.
</code></pre></div><p>So where is the utility of semigroups?</p>
<p>Assume we had a <code>List[A]</code> and we wished to combine all the elements in that list into one, we could easily call:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">  <span style="color:#66d9ef">val</span> result<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">A</span> <span style="color:#f92672">=</span> list<span style="color:#f92672">.</span>foldLeft<span style="color:#f92672">(???)(</span><span style="color:#66d9ef">_</span> <span style="color:#f92672">|+|</span> <span style="color:#66d9ef">_</span><span style="color:#f92672">)</span>
</code></pre></div><p>this starts out with an initial single value (??? in this case) and traverses the list combining every 2 elements together and appending previous value.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">Note: the only issue in the above example is that we do not have an &#34;empty&#34; value to put in instead of the ??? (in the case the list is empty for example...)

This however is taken care of by the Monoid which is a semigroup plus an &#39;empty&#39; value that acts as the identity of the combine.
</code></pre></div><hr>
<h2 id="semigroupk">SemigroupK</h2>
<p>For Lists, the Semigroup&rsquo;s combine and the SemigroupK&rsquo;s combineK operate in the same way i.e: they return a concatenated list consisting of both lists&rsquo; elements.</p>
<p>so where is the difference?</p>
<p>Here is an excerpt from cats&rsquo; official documentation:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">SemigroupK has a very similar structure to Semigroup, the difference is that SemigroupK operates on type constructors of one argument. So, for example, whereas you can find a Semigroup for types which are fully specified like Int or List[Int] or Option[Int], you will find SemigroupK for type constructors like List and Option.
</code></pre></div><p>But what does SemigroupK do differently?</p>
<p>Well assume you have two <code>Option[A]</code> combineK would return the the first Some of the two&hellip;</p>
<p>assume you have a function that takes a <code>previousValue</code> and a <code>currentValue</code>.
you would like to return currentValue but if this is none, then you would like to return previousValue else return None.</p>
<p>If we did not use SemigroupK, our solution would have to look like this:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">
  <span style="color:#66d9ef">val</span> res<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Option</span><span style="color:#f92672">[</span><span style="color:#66d9ef">Int</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span> <span style="color:#f92672">(</span>curr<span style="color:#f92672">,</span> prev<span style="color:#f92672">)</span> <span style="color:#66d9ef">match</span> <span style="color:#f92672">{</span>
    <span style="color:#66d9ef">case</span> <span style="color:#f92672">(</span><span style="color:#a6e22e">Some</span><span style="color:#f92672">(</span>a<span style="color:#f92672">),</span> <span style="color:#66d9ef">_</span><span style="color:#f92672">)</span>    <span style="color:#66d9ef">=&gt;</span> <span style="color:#a6e22e">Some</span><span style="color:#f92672">(</span>a<span style="color:#f92672">)</span>
    <span style="color:#66d9ef">case</span> <span style="color:#f92672">(</span><span style="color:#a6e22e">None</span><span style="color:#f92672">,</span> <span style="color:#a6e22e">Some</span><span style="color:#f92672">(</span>b<span style="color:#f92672">))</span> <span style="color:#66d9ef">=&gt;</span> <span style="color:#a6e22e">Some</span><span style="color:#f92672">(</span>b<span style="color:#f92672">)</span>
    <span style="color:#66d9ef">case</span> <span style="color:#f92672">(</span><span style="color:#a6e22e">None</span><span style="color:#f92672">,</span> <span style="color:#a6e22e">None</span><span style="color:#f92672">)</span>    <span style="color:#66d9ef">=&gt;</span> <span style="color:#a6e22e">None</span>
  <span style="color:#f92672">}</span>

</code></pre></div><p>Using SemigroupK the same code becomes:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">  <span style="color:#66d9ef">val</span> res<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Option</span><span style="color:#f92672">[</span><span style="color:#66d9ef">Int</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">SemigroupK</span><span style="color:#f92672">[</span><span style="color:#66d9ef">Option</span><span style="color:#f92672">].</span>combineK<span style="color:#f92672">(</span>curr <span style="color:#f92672">,</span>prev<span style="color:#f92672">)</span>
</code></pre></div><p>With SemigroupK the code becomes much simpler and easier to read.</p>
<p>Here are a few examples of returns with SemigroupK:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">
<span style="color:#66d9ef">val</span> res <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">SemigroupK</span><span style="color:#f92672">[</span><span style="color:#66d9ef">Option</span><span style="color:#f92672">].</span>combineK<span style="color:#f92672">(</span><span style="color:#a6e22e">Some</span><span style="color:#f92672">(</span><span style="color:#ae81ff">2</span><span style="color:#f92672">),</span> <span style="color:#a6e22e">None</span><span style="color:#f92672">)</span>
<span style="color:#75715e">// res = Some(2)
</span><span style="color:#75715e"></span>
<span style="color:#66d9ef">val</span> res <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">SemigroupK</span><span style="color:#f92672">[</span><span style="color:#66d9ef">Option</span><span style="color:#f92672">].</span>combineK<span style="color:#f92672">(</span><span style="color:#a6e22e">None</span><span style="color:#f92672">,</span> <span style="color:#a6e22e">Some</span><span style="color:#f92672">(</span><span style="color:#ae81ff">3</span><span style="color:#f92672">))</span>
<span style="color:#75715e">// res = Some(3)
</span><span style="color:#75715e"></span>
<span style="color:#66d9ef">val</span> res <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">SemigroupK</span><span style="color:#f92672">[</span><span style="color:#66d9ef">Option</span><span style="color:#f92672">].</span>combineK<span style="color:#f92672">(</span><span style="color:#a6e22e">Some</span><span style="color:#f92672">(</span><span style="color:#ae81ff">2</span><span style="color:#f92672">),</span> <span style="color:#a6e22e">Some</span><span style="color:#f92672">(</span><span style="color:#ae81ff">3</span><span style="color:#f92672">))</span>
<span style="color:#75715e">// res = Some(2)
</span><span style="color:#75715e"></span>
<span style="color:#66d9ef">val</span> res <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">SemigroupK</span><span style="color:#f92672">[</span><span style="color:#66d9ef">Option</span><span style="color:#f92672">].</span>combineK<span style="color:#f92672">(</span><span style="color:#a6e22e">None</span><span style="color:#f92672">,</span> <span style="color:#a6e22e">None</span><span style="color:#f92672">)</span>
<span style="color:#75715e">// res = None
</span><span style="color:#75715e"></span>
</code></pre></div><p>Long story short, SemigroupK operates on Kind.</p>
<p>Note: a syntactic sugar for  semigroupK.combine is &lt;+&gt;</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">curr <span style="color:#f92672">&lt;+&gt;</span> prev
<span style="color:#75715e">// this would result in the same thing as:
</span><span style="color:#75715e"></span><span style="color:#a6e22e">SemigroupK</span><span style="color:#f92672">[</span><span style="color:#66d9ef">Option</span><span style="color:#f92672">].</span>combineK<span style="color:#f92672">(</span>curr <span style="color:#f92672">,</span>prev<span style="color:#f92672">)</span>
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Collect / FilterMap</title>
            <link>https://fares.codes/posts/collect-/-filtermap/</link>
            <pubDate>Sat, 03 Aug 2019 10:00:00 +0000</pubDate>
            
            <guid>https://fares.codes/posts/collect-/-filtermap/</guid>
            <description>Collect or FilterMap does exactly what is says. it filters a collection and then maps the values.
collect takes a partial function as a parameter and returns a Traversable of the same type.
def collect[B](pf: PartialFunction[A, B]): CC[B] Also from the scaladoc:
/** * @tparam CC type constructor of the collection (e.g. `List`, `Set`). Operations returning a * collection with a different type of element `B` (e.g. `map`) return a `CC[B]`.</description>
            <content type="html"><![CDATA[<p>Collect or FilterMap does exactly what is says. it filters a collection and then maps the values.</p>
<p>collect takes a partial function as a parameter and returns a Traversable of the same type.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#66d9ef">def</span> collect<span style="color:#f92672">[</span><span style="color:#66d9ef">B</span><span style="color:#f92672">](</span>pf<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">PartialFunction</span><span style="color:#f92672">[</span><span style="color:#66d9ef">A</span>, <span style="color:#66d9ef">B</span><span style="color:#f92672">])</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">CC</span><span style="color:#f92672">[</span><span style="color:#66d9ef">B</span><span style="color:#f92672">]</span>
</code></pre></div><p>Also from the scaladoc:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#75715e">/**
</span><span style="color:#75715e">  * @tparam CC type constructor of the collection (e.g. `List`, `Set`). Operations returning a
</span><span style="color:#75715e">  * collection with a different type of element `B` (e.g. `map`) return a `CC[B]`.
</span><span style="color:#75715e">  */</span>
</code></pre></div><p>This tells us that the function collect applies a function on a collection and returns a collection of a different type.</p>
<hr>
<p>let us look at a simple example:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">  <span style="color:#66d9ef">val</span> randomNumbers<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">List</span><span style="color:#f92672">[</span><span style="color:#66d9ef">Int</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">List</span><span style="color:#f92672">(</span><span style="color:#ae81ff">1</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">2</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">5</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">20</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">25</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">29</span><span style="color:#f92672">)</span>

  <span style="color:#66d9ef">val</span> result<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">List</span><span style="color:#f92672">[</span><span style="color:#66d9ef">Double</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span> randomNumbers<span style="color:#f92672">.</span>collect <span style="color:#f92672">{</span>
    <span style="color:#66d9ef">case</span> x<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Int</span> <span style="color:#66d9ef">if</span> <span style="color:#66d9ef">x</span> <span style="color:#66d9ef">&lt;</span> <span style="color:#960050;background-color:#1e0010">10</span>  <span style="color:#f92672">=&gt;</span> x <span style="color:#f92672">*</span> <span style="color:#ae81ff">10</span>
    <span style="color:#66d9ef">case</span> x<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Int</span> <span style="color:#66d9ef">if</span> <span style="color:#66d9ef">x</span> <span style="color:#66d9ef">&gt;=</span> <span style="color:#960050;background-color:#1e0010">10</span> <span style="color:#f92672">=&gt;</span> x <span style="color:#f92672">/</span> <span style="color:#ae81ff">10.0</span>
    <span style="color:#66d9ef">case</span> <span style="color:#66d9ef">_</span>                 <span style="color:#66d9ef">=&gt;</span> <span style="color:#ae81ff">0</span>
  <span style="color:#f92672">}</span>
</code></pre></div><p>The above code returns:</p>
<blockquote>
<p>List(10.0, 20.0, 50.0, 2.0, 2.5, 2.9)</p>
</blockquote>
<p>&ldquo;But&hellip; The example above is the same thing as applying a map&hellip;&rdquo; True it is&hellip; the below code yields the exact same result:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">  <span style="color:#66d9ef">val</span> result <span style="color:#66d9ef">=</span> randomNumbers<span style="color:#f92672">.</span>map <span style="color:#f92672">{</span> x <span style="color:#66d9ef">=&gt;</span>
    <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>x <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">10</span><span style="color:#f92672">)</span> x <span style="color:#f92672">*</span> <span style="color:#ae81ff">10</span>
    <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>x <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">10</span><span style="color:#f92672">)</span> x <span style="color:#f92672">/</span> <span style="color:#ae81ff">10.0</span>
    <span style="color:#66d9ef">else</span> <span style="color:#ae81ff">0</span>
  <span style="color:#f92672">}</span>
</code></pre></div><p>so where is the benefit of using collect instead of map? the answer is the in filtering part.</p>
<p>when applying collect we have the option to specify the range/type&hellip; of values we would like to apply the map on. the rest of the elements in our collection will not be mapped and therefore will no be collected in the result.</p>
<p>going back to our previous example, say we only wanted to collect values below 10 and multiply them by 10:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">  <span style="color:#66d9ef">val</span> result <span style="color:#66d9ef">=</span> randomNumbers<span style="color:#f92672">.</span>collect <span style="color:#f92672">{</span>
    <span style="color:#66d9ef">case</span> x<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Int</span> <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">x</span> <span style="color:#66d9ef">&lt;</span> <span style="color:#960050;background-color:#1e0010">10</span><span style="color:#f92672">)</span> <span style="color:#f92672">=&gt;</span> x <span style="color:#f92672">*</span> <span style="color:#ae81ff">10</span>
  <span style="color:#f92672">}</span>
</code></pre></div><p>the result would be:</p>
<blockquote>
<p>List(10.0, 20.0, 50.0)</p>
</blockquote>
<p>Now I&rsquo;m assuming you&rsquo;ve figured it out by now but collect is a more concise way of using:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#66d9ef">val</span> result <span style="color:#66d9ef">=</span> randomNumbers<span style="color:#f92672">.</span>filter<span style="color:#f92672">(</span><span style="color:#66d9ef">_</span> <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">10</span><span style="color:#f92672">).</span>map<span style="color:#f92672">(</span><span style="color:#66d9ef">_</span> <span style="color:#f92672">*</span> <span style="color:#ae81ff">10.0</span><span style="color:#f92672">)</span>
</code></pre></div><p>Specially when we start dealing with complex types and multiple scenarios.</p>
]]></content>
        </item>
        
        <item>
            <title>Un-Apply in Scala</title>
            <link>https://fares.codes/posts/un-apply-in-scala/</link>
            <pubDate>Fri, 02 Aug 2019 10:10:00 +0000</pubDate>
            
            <guid>https://fares.codes/posts/un-apply-in-scala/</guid>
            <description>Unapply in Scala is the inverse of the apply&amp;hellip; (queue no shit comments :p)
So what does it do exactly? given a class Person:
case class Person(name: String, age: Int, hobbies: List[String]) If we wanted to decompose the class person into a set of attributes:
 name: String age: Int hobbies: List[String]  We would use the unapply. the return type of the unapply is an Option of a tuple with the values inside the tuple representing the values we seek to retrieve.</description>
            <content type="html"><![CDATA[<p>Unapply in Scala is the inverse of the apply&hellip; (queue no shit comments :p)</p>
<p>So what does it do exactly? given a class Person:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#66d9ef">case</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Person</span><span style="color:#f92672">(</span>name<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">String</span><span style="color:#f92672">,</span> age<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Int</span><span style="color:#f92672">,</span> hobbies<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">List</span><span style="color:#f92672">[</span><span style="color:#66d9ef">String</span><span style="color:#f92672">])</span>
</code></pre></div><p>If we wanted to decompose the class person into a set of attributes:</p>
<ul>
<li>name: String</li>
<li>age: Int</li>
<li>hobbies: List[String]</li>
</ul>
<p>We would use the unapply. the return type of the unapply is an Option of a tuple with the values inside the tuple representing the values we seek to retrieve.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#66d9ef">case</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Person</span><span style="color:#f92672">(</span>name<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">String</span><span style="color:#f92672">,</span> age<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Int</span><span style="color:#f92672">,</span> hobbies<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">List</span><span style="color:#f92672">[</span><span style="color:#66d9ef">String</span><span style="color:#f92672">])</span>

<span style="color:#66d9ef">object</span> <span style="color:#a6e22e">Test</span> <span style="color:#f92672">{</span>
  
  <span style="color:#66d9ef">val</span> fares<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Person</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">Person</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;fares&#34;</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">23</span><span style="color:#f92672">,</span> <span style="color:#a6e22e">List</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Hiking&#34;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;Biking&#34;</span><span style="color:#f92672">))</span>
  <span style="color:#66d9ef">val</span> result<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Option</span><span style="color:#f92672">[(</span><span style="color:#66d9ef">String</span>, <span style="color:#66d9ef">Int</span>, <span style="color:#66d9ef">List</span><span style="color:#f92672">[</span><span style="color:#66d9ef">String</span><span style="color:#f92672">])]</span> <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">Person</span><span style="color:#f92672">.</span>unapply<span style="color:#f92672">(</span>fares<span style="color:#f92672">)</span>

<span style="color:#f92672">}</span>
</code></pre></div><p>We notice that the return type is an option of a tuple of string, int and List of String.
That means that after the unapply, we would have to extract the Tuple from the option and call <code>result._1</code> and so on to retrieve each individual value.</p>
<p>clearly this is cumbersome and annoying to deal with. And clearly there is a better way :p</p>
<p>But for fun, let us check what this might look like:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">  <span style="color:#66d9ef">val</span> fares<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Person</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">Person</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;fares&#34;</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">23</span><span style="color:#f92672">,</span> <span style="color:#a6e22e">List</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Hiking&#34;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;Biking&#34;</span><span style="color:#f92672">))</span>

  <span style="color:#66d9ef">var</span> result<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Option</span><span style="color:#f92672">[(</span><span style="color:#66d9ef">String</span>, <span style="color:#66d9ef">Int</span>, <span style="color:#66d9ef">List</span><span style="color:#f92672">[</span><span style="color:#66d9ef">String</span><span style="color:#f92672">])]</span> <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">Person</span><span style="color:#f92672">.</span>unapply<span style="color:#f92672">(</span>fares<span style="color:#f92672">)</span>

  <span style="color:#66d9ef">val</span> name <span style="color:#66d9ef">=</span> result<span style="color:#f92672">.</span>get<span style="color:#f92672">.</span>_1
  <span style="color:#66d9ef">val</span> age <span style="color:#66d9ef">=</span> result<span style="color:#f92672">.</span>get<span style="color:#f92672">.</span>_2
  <span style="color:#66d9ef">val</span> hobbies <span style="color:#66d9ef">=</span> result<span style="color:#f92672">.</span>get<span style="color:#f92672">.</span>_3
</code></pre></div><p>Note: calling get like this can throw a <code>java.util.NoSuchElementException</code> we should instead do some checking if it its defined or simply call <code>.getOrElse</code> and pass a default value&hellip; (complicate things even more) or check <code>.isDefined</code> before calling the <code>get</code></p>
<p>Not to mention that calling values inside tuples using the <code>_1</code> and so on can quickly become confusing.</p>
<hr>
<h2 id="unapply-and-case-classes">Unapply and case classes</h2>
<p>case classes automatically define both methods apply and unapply for us. this also allows us to easily do pattern matching on instances of case classes.</p>
<p>As we saw in previous examples, unapply can automatically be called on any case class and we pass to it the instance of the case class whose values we would like to unapply.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#66d9ef">val</span> result<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Option</span><span style="color:#f92672">[(</span><span style="color:#66d9ef">String</span>, <span style="color:#66d9ef">Int</span>, <span style="color:#66d9ef">List</span><span style="color:#f92672">[</span><span style="color:#66d9ef">String</span><span style="color:#f92672">])]</span> <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">Person</span><span style="color:#f92672">.</span>unapply<span style="color:#f92672">(</span>fares<span style="color:#f92672">)</span>
</code></pre></div><hr>
<h2 id="unapply-in-pattern-matching">Unapply in Pattern Matching</h2>
<p>Pattern matching automatically calls the unapply method, in order to check if the values inside match a specific case.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">  fares <span style="color:#66d9ef">match</span> <span style="color:#f92672">{</span>
    <span style="color:#66d9ef">case</span> <span style="color:#a6e22e">Person</span><span style="color:#f92672">(</span>name<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">String</span><span style="color:#f92672">,</span> age<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Int</span><span style="color:#f92672">,</span> <span style="color:#66d9ef">_</span><span style="color:#f92672">)</span> <span style="color:#66d9ef">=&gt;</span>
      <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>age <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">22</span><span style="color:#f92672">)</span> println<span style="color:#f92672">(</span>name<span style="color:#f92672">)</span> <span style="color:#66d9ef">else</span> println<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Not Fares&#34;</span><span style="color:#f92672">)</span>
    <span style="color:#66d9ef">case</span> <span style="color:#66d9ef">_</span> <span style="color:#66d9ef">=&gt;</span> println<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Ummm&#34;</span><span style="color:#f92672">)</span> <span style="color:#75715e">// Should not happen
</span><span style="color:#75715e"></span>  <span style="color:#f92672">}</span>
</code></pre></div><hr>
<h2 id="unapply-simplified">Unapply Simplified</h2>
<p>Going back to out Person case class and fares instance.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">  <span style="color:#66d9ef">val</span> <span style="color:#a6e22e">Person</span><span style="color:#f92672">(</span>faresName<span style="color:#f92672">,</span> faresAge<span style="color:#f92672">,</span> faresHobbies<span style="color:#f92672">)</span> <span style="color:#66d9ef">=</span> fares

  println<span style="color:#f92672">(</span>faresName<span style="color:#f92672">)</span>
  println<span style="color:#f92672">(</span>faresAge<span style="color:#f92672">)</span>
  println<span style="color:#f92672">(</span>faresHobbies<span style="color:#f92672">)</span>

  <span style="color:#75715e">//the following code yields:
</span><span style="color:#75715e"></span>
    fares
    <span style="color:#ae81ff">23</span>
    <span style="color:#a6e22e">List</span><span style="color:#f92672">(</span><span style="color:#a6e22e">Hiking</span><span style="color:#f92672">,</span> <span style="color:#a6e22e">Biking</span><span style="color:#f92672">)</span>
</code></pre></div><p>So we pass the val names we want in the case class Person and we assign it the value of the instance.</p>
<hr>
]]></content>
        </item>
        
        <item>
            <title>Sealed Traits in Scala</title>
            <link>https://fares.codes/posts/sealed-traits-in-scala/</link>
            <pubDate>Wed, 31 Jul 2019 21:00:00 +0000</pubDate>
            
            <guid>https://fares.codes/posts/sealed-traits-in-scala/</guid>
            <description>A sealed trait in scala forces all the case classes/objects that wish to extend it to be in the same source file.
In other words, if case class B wishes to extend sealed trait A B has to be defined in the same file where trait A is defined.
Taking a little step back, What exactly is a trait?
Traits in Scala Traits in scala are similar to interfaces in java.</description>
            <content type="html"><![CDATA[<p>A sealed trait in scala forces all the case classes/objects that wish to extend it to be in the same source file.</p>
<p>In other words, if <code>case class B</code> wishes to extend <code>sealed trait A</code> B has to be defined in the same file where trait A is defined.</p>
<p>Taking a little step back,  <em>What exactly is a trait?</em></p>
<h2 id="traits-in-scala">Traits in Scala</h2>
<p>Traits in scala are similar to interfaces in java.</p>
<p>They encapsulate methods and field definitions so that they can be reused by different classes/objects</p>
<p>A single class can inherit from multiple traits by <code>mixing</code> them.</p>
<p>While a single class can only extend one abstract class.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#66d9ef">trait</span> <span style="color:#a6e22e">A</span>
<span style="color:#66d9ef">trait</span> <span style="color:#a6e22e">B</span>
<span style="color:#66d9ef">case</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">C</span><span style="color:#f92672">(</span>name<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">String</span><span style="color:#f92672">)</span> <span style="color:#66d9ef">extends</span> A <span style="color:#66d9ef">with</span> B
</code></pre></div><p>Traits can include both function definition and function implementation, but there must be at least one abstract function in the trait for it to be considered as such.</p>
<p>Another useful note; wherever a trait is required, a subtype of the trait can be used.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#66d9ef">trait</span> <span style="color:#a6e22e">Animal</span> <span style="color:#f92672">{</span>  
 <span style="color:#66d9ef">def</span> getName<span style="color:#f92672">()</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">String</span>
<span style="color:#f92672">}</span>

<span style="color:#66d9ef">case</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Dog</span><span style="color:#f92672">(</span>name<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">String</span><span style="color:#f92672">)</span> <span style="color:#66d9ef">extends</span> <span style="color:#a6e22e">Animal</span><span style="color:#f92672">{</span>  
   <span style="color:#66d9ef">override</span> <span style="color:#66d9ef">def</span> getName<span style="color:#f92672">()</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">String</span> <span style="color:#f92672">=</span> name
<span style="color:#f92672">}</span>

<span style="color:#66d9ef">case</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Cat</span><span style="color:#f92672">(</span>name<span style="color:#66d9ef">:</span><span style="color:#66d9ef">String</span><span style="color:#f92672">)</span> <span style="color:#66d9ef">extends</span> <span style="color:#a6e22e">Animal</span><span style="color:#f92672">{</span>
 <span style="color:#66d9ef">override</span> <span style="color:#66d9ef">def</span> getName<span style="color:#f92672">()</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">String</span> <span style="color:#f92672">=</span> name
<span style="color:#f92672">}</span>

<span style="color:#66d9ef">val</span> l<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">List</span><span style="color:#f92672">[</span><span style="color:#66d9ef">Animal</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">List</span><span style="color:#f92672">(</span><span style="color:#a6e22e">Cat</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Blacky&#34;</span><span style="color:#f92672">),</span> <span style="color:#a6e22e">Dog</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Verra&#34;</span><span style="color:#f92672">))</span>
</code></pre></div><p>Notice how we were able to pass a list of Cat and Dog to a list of Animal?</p>
<p>Why are traits useful?</p>
<p>Traits allow you to model behavior and reuse functions across multiple classes that could potentially be unrelated.</p>
<h2 id="sealed-traits-in-scala">Sealed Traits In Scala</h2>
<p>As mentioned earlier, sealed traits can only be extended by classes in the same source folder as the trait itself.</p>
<p>This makes the code easier to read because we would have the trait as well as all the classes that extend it, in once file. As opposed to having to look for the subtypes across the project files.</p>
<p>to make a trait sealed, we just need to add the keyword <code>sealed</code> before it.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">
<span style="color:#66d9ef">sealed</span> <span style="color:#66d9ef">trait</span> <span style="color:#a6e22e">Database</span><span style="color:#f92672">[</span><span style="color:#66d9ef">A</span><span style="color:#f92672">]</span> <span style="color:#f92672">{</span>
  <span style="color:#66d9ef">def</span> insert<span style="color:#f92672">(</span>value<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">A</span><span style="color:#f92672">)</span>
  <span style="color:#66d9ef">def</span> delete<span style="color:#f92672">(</span>value<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">A</span><span style="color:#f92672">)</span>
  <span style="color:#66d9ef">def</span> update<span style="color:#f92672">(</span>old<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">A</span><span style="color:#f92672">,</span> `new`<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">A</span><span style="color:#f92672">)</span>
<span style="color:#f92672">}</span>

<span style="color:#66d9ef">case</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Person</span><span style="color:#f92672">(</span>name<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">String</span><span style="color:#f92672">,</span> age<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Int</span><span style="color:#f92672">,</span> hobbies<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">List</span><span style="color:#f92672">[</span><span style="color:#66d9ef">String</span><span style="color:#f92672">])</span>
<span style="color:#66d9ef">case</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Animal</span><span style="color:#f92672">(</span>name<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">String</span><span style="color:#f92672">,</span> color<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">String</span><span style="color:#f92672">,</span> owner<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Person</span><span style="color:#f92672">)</span>

<span style="color:#66d9ef">case</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">LocalDatabase</span><span style="color:#f92672">()</span> <span style="color:#66d9ef">extends</span> <span style="color:#a6e22e">Database</span><span style="color:#f92672">[</span><span style="color:#66d9ef">Person</span><span style="color:#f92672">]</span> <span style="color:#f92672">{</span>
  <span style="color:#66d9ef">override</span> <span style="color:#66d9ef">def</span> insert<span style="color:#f92672">(</span>value<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Person</span><span style="color:#f92672">)</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Unit</span> <span style="color:#f92672">=</span> <span style="color:#f92672">???</span>
  <span style="color:#66d9ef">override</span> <span style="color:#66d9ef">def</span> delete<span style="color:#f92672">(</span>value<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Person</span><span style="color:#f92672">)</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Unit</span> <span style="color:#f92672">=</span> <span style="color:#f92672">???</span>
  <span style="color:#66d9ef">override</span> <span style="color:#66d9ef">def</span> update<span style="color:#f92672">(</span>old<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Person</span><span style="color:#f92672">,</span> `new`<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Person</span><span style="color:#f92672">)</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Unit</span> <span style="color:#f92672">=</span> <span style="color:#f92672">???</span>
<span style="color:#f92672">}</span>

<span style="color:#66d9ef">case</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">MongoDB</span><span style="color:#f92672">()</span> <span style="color:#66d9ef">extends</span> <span style="color:#a6e22e">Database</span><span style="color:#f92672">[</span><span style="color:#66d9ef">Animal</span><span style="color:#f92672">]</span> <span style="color:#f92672">{</span>
  <span style="color:#66d9ef">override</span> <span style="color:#66d9ef">def</span> insert<span style="color:#f92672">(</span>value<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Animal</span><span style="color:#f92672">)</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Unit</span> <span style="color:#f92672">=</span> <span style="color:#f92672">???</span>
  <span style="color:#66d9ef">override</span> <span style="color:#66d9ef">def</span> delete<span style="color:#f92672">(</span>value<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Animal</span><span style="color:#f92672">)</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Unit</span> <span style="color:#f92672">=</span> <span style="color:#f92672">???</span>
  <span style="color:#66d9ef">override</span> <span style="color:#66d9ef">def</span> update<span style="color:#f92672">(</span>old<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Animal</span><span style="color:#f92672">,</span> `new`<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Animal</span><span style="color:#f92672">)</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Unit</span> <span style="color:#f92672">=</span> <span style="color:#f92672">???</span>
<span style="color:#f92672">}</span>

</code></pre></div><p>Another important benifit of using sealed traits is <code>exhausiveness checking</code>. During pattern matching, the compiler can check and make sure that the cases cover all the basis and that no case is left unhandeled.</p>
<p>Assume we were living in a world where only the following 3 shapes existed:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">
<span style="color:#66d9ef">sealed</span> <span style="color:#66d9ef">trait</span> <span style="color:#a6e22e">Shape</span>
<span style="color:#66d9ef">object</span> <span style="color:#a6e22e">Circle</span> <span style="color:#66d9ef">extends</span> <span style="color:#a6e22e">Shape</span>
<span style="color:#66d9ef">object</span> <span style="color:#a6e22e">Line</span> <span style="color:#66d9ef">extends</span> <span style="color:#a6e22e">Shape</span>
<span style="color:#66d9ef">object</span> <span style="color:#a6e22e">Rectangle</span> <span style="color:#66d9ef">extends</span> <span style="color:#a6e22e">Shape</span>

</code></pre></div><p>if we were to do a pattern matching on a function that returns a shape while omitting one case:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">
<span style="color:#66d9ef">sealed</span> <span style="color:#66d9ef">trait</span> <span style="color:#a6e22e">Shape</span>
<span style="color:#66d9ef">object</span> <span style="color:#a6e22e">Circle</span> <span style="color:#66d9ef">extends</span> <span style="color:#a6e22e">Shape</span>
<span style="color:#66d9ef">object</span> <span style="color:#a6e22e">Line</span> <span style="color:#66d9ef">extends</span> <span style="color:#a6e22e">Shape</span>
<span style="color:#66d9ef">object</span> <span style="color:#a6e22e">Rectangle</span> <span style="color:#66d9ef">extends</span> <span style="color:#a6e22e">Shape</span>

<span style="color:#66d9ef">object</span> <span style="color:#a6e22e">ShapeArea</span><span style="color:#f92672">{</span>
  <span style="color:#66d9ef">def</span> getType<span style="color:#f92672">(</span>value<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">String</span><span style="color:#f92672">)</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Shape</span> <span style="color:#f92672">=</span> <span style="color:#f92672">???</span>
  <span style="color:#66d9ef">val</span> name <span style="color:#66d9ef">=</span> <span style="color:#e6db74">&#34;Circle&#34;</span>
  getType<span style="color:#f92672">(</span>name<span style="color:#f92672">)</span> <span style="color:#66d9ef">match</span> <span style="color:#f92672">{</span>
    <span style="color:#66d9ef">case</span> <span style="color:#a6e22e">Circle</span> <span style="color:#66d9ef">=&gt;</span> <span style="color:#75715e">// do something
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">case</span> <span style="color:#a6e22e">Line</span>   <span style="color:#66d9ef">=&gt;</span> <span style="color:#75715e">// do something
</span><span style="color:#75715e"></span>  <span style="color:#f92672">}</span>
<span style="color:#f92672">}</span>
</code></pre></div><p>we would get the following warning:</p>
<p><code>Warning: match may not be exhaustive. It would fail on the following input: Rectangle</code></p>
]]></content>
        </item>
        
        <item>
            <title>For Comprehensions Demystified</title>
            <link>https://fares.codes/posts/for-comprehensions-demystified/</link>
            <pubDate>Mon, 29 Jul 2019 21:37:00 +0000</pubDate>
            
            <guid>https://fares.codes/posts/for-comprehensions-demystified/</guid>
            <description>A For Comprehension is a syntactic sugar for using a composition of map, flatMap and filter.
At first glance it might look complicated and difficult to comprehend. But once you get the hang of it, you&amp;rsquo;ll realise it&amp;rsquo;s a cool card to have up your sleeve, one that will surely make your code much more readable.
 Lets look at the below couple functions:
def computeA(a: Int): Either[Throwable, Int] = ?</description>
            <content type="html"><![CDATA[<p>A For Comprehension is a syntactic sugar for using a composition of map, flatMap and filter.</p>
<p>At first glance it might look complicated and difficult to comprehend. But once you get the hang of it, you&rsquo;ll realise it&rsquo;s a cool card to have up your sleeve, one that will surely make your code much more readable.</p>
<hr>
<p>Lets look at the below couple functions:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">
<span style="color:#66d9ef">def</span> computeA<span style="color:#f92672">(</span>a<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Int</span><span style="color:#f92672">)</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Either</span><span style="color:#f92672">[</span><span style="color:#66d9ef">Throwable</span>, <span style="color:#66d9ef">Int</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span> <span style="color:#f92672">???</span>
<span style="color:#66d9ef">def</span> computeB<span style="color:#f92672">(</span>b<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Int</span><span style="color:#f92672">)</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Either</span><span style="color:#f92672">[</span><span style="color:#66d9ef">Throwable</span>, <span style="color:#66d9ef">Int</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span> <span style="color:#f92672">???</span>
<span style="color:#66d9ef">def</span> computeC<span style="color:#f92672">(</span>c<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">String</span><span style="color:#f92672">)</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Either</span><span style="color:#f92672">[</span><span style="color:#66d9ef">Throwable</span>, <span style="color:#66d9ef">String</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span> <span style="color:#f92672">???</span>
<span style="color:#66d9ef">def</span> computeD<span style="color:#f92672">(</span>a<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Int</span><span style="color:#f92672">,</span> b<span style="color:#66d9ef">:</span><span style="color:#66d9ef">Int</span><span style="color:#f92672">,</span> c<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">String</span><span style="color:#f92672">)</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">String</span><span style="color:#f92672">=</span> <span style="color:#f92672">???</span>

</code></pre></div><p>The issue here is that computeA, computeB and computeC all  return an Either of Throwable or Something.</p>
<p>One way to deal with this would be to check the return value of each function, make sure it is a <code>Right(_)</code> else throw an error or something (<code>fold</code>? <code>getOrElse</code>? pattern matching?)&hellip;</p>
<p>But this quickly becomes cumbersome and annoying. it also makes the logic somewhat harder to follow.</p>
<p>So here comes For Comprehensions to the rescue.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">
<span style="color:#66d9ef">for</span> <span style="color:#f92672">{</span>
    a <span style="color:#66d9ef">&lt;-</span> computeA<span style="color:#f92672">(</span><span style="color:#ae81ff">1</span><span style="color:#f92672">)</span>
    b <span style="color:#66d9ef">&lt;-</span> computeB<span style="color:#f92672">(</span><span style="color:#ae81ff">2</span><span style="color:#f92672">)</span>
    c <span style="color:#66d9ef">&lt;-</span> computeC<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Hi&#34;</span><span style="color:#f92672">)</span>
<span style="color:#f92672">}</span> <span style="color:#66d9ef">yield</span> computeD<span style="color:#f92672">(</span>a<span style="color:#f92672">,</span>b<span style="color:#f92672">,</span> c<span style="color:#f92672">)</span>

</code></pre></div><p>so what does this mean exactly? when in doubt, use Intellij&rsquo;s desugar option.</p>
<p>the above code desugarized (is that a word?) is equivalent to the following code:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">computeA<span style="color:#f92672">(</span><span style="color:#ae81ff">1</span><span style="color:#f92672">).</span>flatMap<span style="color:#f92672">(</span>a <span style="color:#66d9ef">=&gt;</span>computeB<span style="color:#f92672">(</span><span style="color:#ae81ff">2</span><span style="color:#f92672">).</span>flatMap<span style="color:#f92672">(</span>b <span style="color:#66d9ef">=&gt;</span>computeC<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Hi&#34;</span><span style="color:#f92672">).</span>map<span style="color:#f92672">(</span>c <span style="color:#66d9ef">=&gt;</span>computeD<span style="color:#f92672">(</span>a<span style="color:#f92672">,</span> b<span style="color:#f92672">,</span> c<span style="color:#f92672">))))</span>
</code></pre></div><p>Of the two, I&rsquo;m sure we&rsquo;d all prefer reading / writing the first format&hellip; It is more concise, readable and hence less prone to errors.</p>
<hr>
<p>Here is a good article on For Comprehensions in Scala official docs: <a href="https://docs.scala-lang.org/tutorials/FAQ/yield.html" title="Translating for-comprehensions">Translating for-comprehensions</a></p>
<p>it basically says that for without the yield translates into a chain of foreach.</p>
<p>for with yield translates into a chain of flatMap followed by a map.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#66d9ef">for</span><span style="color:#f92672">(</span>x <span style="color:#66d9ef">&lt;-</span> c1<span style="color:#f92672">;</span> y <span style="color:#66d9ef">&lt;-</span> c2<span style="color:#f92672">;</span> z <span style="color:#66d9ef">&lt;-</span> c3<span style="color:#f92672">)</span> <span style="color:#66d9ef">yield</span> <span style="color:#f92672">{...}</span>
<span style="color:#75715e">//translates to
</span><span style="color:#75715e"></span>c1<span style="color:#f92672">.</span>flatMap<span style="color:#f92672">(</span>x <span style="color:#66d9ef">=&gt;</span> c2<span style="color:#f92672">.</span>flatMap<span style="color:#f92672">(</span>y <span style="color:#66d9ef">=&gt;</span> c3<span style="color:#f92672">.</span>map<span style="color:#f92672">(</span>z <span style="color:#66d9ef">=&gt;</span> <span style="color:#f92672">{...})))</span>
</code></pre></div><p>Using for with an if condition translates into a <code>.wihFilter</code> and as a fallback of <code>filter</code> if the method <code>wihFilter</code> is not available.</p>
<p><em>One important note</em> however, your methods have to have the same return type. in this case <code>Either[A,B]</code></p>
<p>You cannot mix an Either return type with an Option return type.</p>
<p>For Options, it is less of a problem since many methods exists to transform Either to Option and vice versa (example <code>.toOption</code>, <code>.toRight</code></p>
<p><em>Another important note</em>, you could also use assignment inside the for comprehension. you also do not need to add the key word val or var ( though I dont see why you should&hellip;). All assignments inside the for are vals.</p>
<p><em>third note (getting out of hand no?):</em> When we first said for comprehensions are a sequence of <code>flatMap</code> and <code>filter</code> followed by a <code>map</code>, it is important to know that it is actually the yield that calls the map.</p>
]]></content>
        </item>
        
    </channel>
</rss>
